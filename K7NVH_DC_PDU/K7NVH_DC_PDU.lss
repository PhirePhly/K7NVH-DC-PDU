
K7NVH_DC_PDU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00002770  00002804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  0080015a  0080015a  0000285e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000750  00000000  00000000  00002870  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bcf5  00000000  00000000  00002fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dea  00000000  00000000  0000ecb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000065ca  00000000  00000000  00011a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f7c  00000000  00000000  0001806c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000040f9  00000000  00000000  00018fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006d98  00000000  00000000  0001d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000820  00000000  00000000  00023e79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c1       	rjmp	.+818    	; 0x334 <__ctors_end>
       2:	00 00       	nop
       4:	b3 c1       	rjmp	.+870    	; 0x36c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c1       	rjmp	.+866    	; 0x36c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c1       	rjmp	.+862    	; 0x36c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c1       	rjmp	.+858    	; 0x36c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c1       	rjmp	.+854    	; 0x36c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c1       	rjmp	.+850    	; 0x36c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c1       	rjmp	.+846    	; 0x36c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c1       	rjmp	.+842    	; 0x36c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c1       	rjmp	.+838    	; 0x36c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c1       	rjmp	.+834    	; 0x36c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_11>
      30:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__vector_12>
      34:	9b c1       	rjmp	.+822    	; 0x36c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c1       	rjmp	.+818    	; 0x36c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c1       	rjmp	.+814    	; 0x36c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c1       	rjmp	.+810    	; 0x36c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c1       	rjmp	.+806    	; 0x36c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c1       	rjmp	.+802    	; 0x36c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c1       	rjmp	.+798    	; 0x36c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c1       	rjmp	.+794    	; 0x36c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c1       	rjmp	.+790    	; 0x36c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c1       	rjmp	.+786    	; 0x36c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c1       	rjmp	.+782    	; 0x36c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c1       	rjmp	.+778    	; 0x36c <__bad_interrupt>
      62:	00 00       	nop
      64:	83 c1       	rjmp	.+774    	; 0x36c <__bad_interrupt>
      66:	00 00       	nop
      68:	81 c1       	rjmp	.+770    	; 0x36c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7f c1       	rjmp	.+766    	; 0x36c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c1       	rjmp	.+762    	; 0x36c <__bad_interrupt>
      72:	00 00       	nop

00000074 <__trampolines_end>:
      74:	0d 0a       	sbc	r0, r29
      76:	0d 0a       	sbc	r0, r29
      78:	3e 20       	and	r3, r14
      7a:	00 0d       	add	r16, r0

0000007b <__c.4235>:
      7b:	0d 0a 50 4e 41 4d 45 53 3a 20 00                    ..PNAMES: .

00000086 <__c.4233>:
      86:	0d 0a 50 38 53 45 4e 53 45 3a 20 00                 ..P8SENSE: .

00000092 <__c.4231>:
      92:	0d 0a 52 45 46 5f 56 3a 20 00                       ..REF_V: .

0000009c <__c.4225>:
      9c:	0d 0a 50 4f 52 54 20 44 45 46 3a 20 00              ..PORT DEF: .

000000a9 <__c.4170>:
      a9:	41 2c 20 50 6f 77 65 72 3a 20 00                    A, Power: .

000000b4 <__c.4168>:
      b4:	2e 20 43 75 72 72 65 6e 74 3a 20 00                 . Current: .

000000c0 <__c.4165>:
      c0:	4f 46 46 00                                         OFF.

000000c4 <__c.4163>:
      c4:	4f 4e 00                                            ON.

000000c7 <__c.4161>:
      c7:	0d 0a 50 4f 52 54 20 00                             ..PORT .

000000cf <__c.4158>:
      cf:	0d 0a 49 6e 70 75 74 20 56 6f 6c 74 61 67 65 3a     ..Input Voltage:
      df:	20 00                                                .

000000e1 <__c.4151>:
      e1:	0d 0a 55 4e 52 45 43 4f 47 4e 49 5a 45 44 20 43     ..UNRECOGNIZED C
      f1:	4f 4d 4d 41 4e 44 00                                OMMAND.

000000f8 <__c.4145>:
      f8:	53 45 54 56 52 45 46 00                             SETVREF.

00000100 <__c.4143>:
     100:	43 55 52 52 45 4e 54 00                             CURRENT.

00000108 <__c.4141>:
     108:	50 38 53 45 4e 53 45 49 00                          P8SENSEI.

00000111 <__c.4139>:
     111:	56 4f 4c 54 41 47 45 00                             VOLTAGE.

00000119 <__c.4137>:
     119:	50 38 53 45 4e 53 45 56 00                          P8SENSEV.

00000122 <__c.4131>:
     122:	50 44 45 46 4f 46 46 00                             PDEFOFF.

0000012a <__c.4125>:
     12a:	50 44 45 46 4f 4e 00                                PDEFON.

00000131 <__c.4119>:
     131:	50 4f 46 46 00                                      POFF.

00000136 <__c.4113>:
     136:	50 4f 4e 00                                         PON.

0000013a <__c.4111>:
     13a:	45 45 50 52 4f 4d 44 55 4d 50 00                    EEPROMDUMP.

00000145 <__c.4109>:
     145:	53 54 41 54 55 53 00                                STATUS.

0000014c <__c.4085>:
     14c:	20 4f 46 46 0d 0a 00                                 OFF...

00000153 <__c.4083>:
     153:	20 4f 4e 0d 0a 00                                    ON...

00000159 <__c.4080>:
     159:	0d 0a 4b 37 4e 56 48 20 44 43 20 50 44 55 20 56     ..K7NVH DC PDU V
     169:	31 2e 30 0d 0a 00                                   1.0...

0000016f <STR_Port_8_Sense>:
     16f:	0d 0a 50 4f 52 54 20 38 20 53 45 4e 53 45 20 00     ..PORT 8 SENSE .

0000017f <STR_Port_Default>:
     17f:	0d 0a 50 4f 52 54 20 44 45 46 41 55 4c 54 20 00     ..PORT DEFAULT .

0000018f <STR_Port_Init>:
     18f:	50 4f 52 54 20 49 4e 49 54 3a 0d 0a 00              PORT INIT:...

0000019c <STR_Disabled>:
     19c:	44 49 53 41 42 4c 45 44 00                          DISABLED.

000001a5 <STR_Enabled>:
     1a5:	45 4e 41 42 4c 45 44 00                             ENABLED.

000001ad <STR_NR_Port>:
     1ad:	0d 0a 50 4f 52 54 20 00                             ..PORT .

000001b5 <ProductString>:
     1b5:	18 03 44 00 43 00 20 00 50 00 44 00 55 00 20 00     ..D.C. .P.D.U. .
     1c5:	56 00 31 00 2e 00 30 00 00 00                       V.1...0...

000001cf <ManufacturerString>:
     1cf:	0c 03 4b 00 37 00 4e 00 56 00 48 00 00 00           ..K.7.N.V.H...

000001dd <LanguageString>:
     1dd:	04 03 09 04                                         ....

000001e1 <ConfigurationDescriptor>:
     1e1:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     1f1:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     201:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     211:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000021f <DeviceDescriptor>:
     21f:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     22f:	dc 01                                               ..

00000231 <__c.2130>:
     231:	6e 61 6e 00                                         nan.

00000235 <__c.2128>:
     235:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     245:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     255:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     265:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     275:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     285:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     295:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2a5:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2b5:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2c5:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2d5:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2e5:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2f5:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     305:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     315:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     325:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000334 <__ctors_end>:
     334:	11 24       	eor	r1, r1
     336:	1f be       	out	0x3f, r1	; 63
     338:	cf ef       	ldi	r28, 0xFF	; 255
     33a:	d2 e0       	ldi	r29, 0x02	; 2
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	cd bf       	out	0x3d, r28	; 61

00000340 <__do_copy_data>:
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b1 e0       	ldi	r27, 0x01	; 1
     346:	e0 e7       	ldi	r30, 0x70	; 112
     348:	f7 e2       	ldi	r31, 0x27	; 39
     34a:	02 c0       	rjmp	.+4      	; 0x350 <__do_copy_data+0x10>
     34c:	05 90       	lpm	r0, Z+
     34e:	0d 92       	st	X+, r0
     350:	aa 35       	cpi	r26, 0x5A	; 90
     352:	b1 07       	cpc	r27, r17
     354:	d9 f7       	brne	.-10     	; 0x34c <__do_copy_data+0xc>

00000356 <__do_clear_bss>:
     356:	21 e0       	ldi	r18, 0x01	; 1
     358:	aa e5       	ldi	r26, 0x5A	; 90
     35a:	b1 e0       	ldi	r27, 0x01	; 1
     35c:	01 c0       	rjmp	.+2      	; 0x360 <.do_clear_bss_start>

0000035e <.do_clear_bss_loop>:
     35e:	1d 92       	st	X+, r1

00000360 <.do_clear_bss_start>:
     360:	af 3a       	cpi	r26, 0xAF	; 175
     362:	b2 07       	cpc	r27, r18
     364:	e1 f7       	brne	.-8      	; 0x35e <.do_clear_bss_loop>
     366:	92 d0       	rcall	.+292    	; 0x48c <main>
     368:	0c 94 b6 13 	jmp	0x276c	; 0x276c <_exit>

0000036c <__bad_interrupt>:
     36c:	49 ce       	rjmp	.-878    	; 0x0 <__vectors>

0000036e <printPGMStr>:
      fprintf(&USBSerialStream, "%.1fW", (voltage * current));
    }
  }
}

static inline void printPGMStr(PGM_P s){
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
  char c;
  while((c = pgm_read_byte(s++)) != 0) fputc(c, &USBSerialStream);
     372:	fc 01       	movw	r30, r24
     374:	24 91       	lpm	r18, Z
     376:	ec 01       	movw	r28, r24
     378:	21 96       	adiw	r28, 0x01	; 1
     37a:	22 23       	and	r18, r18
     37c:	41 f0       	breq	.+16     	; 0x38e <printPGMStr+0x20>
     37e:	6f e5       	ldi	r22, 0x5F	; 95
     380:	71 e0       	ldi	r23, 0x01	; 1
     382:	82 2f       	mov	r24, r18
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 f5 12 	call	0x25ea	; 0x25ea <fputc>
     38a:	ce 01       	movw	r24, r28
     38c:	f2 cf       	rjmp	.-28     	; 0x372 <printPGMStr+0x4>
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <INPUT_Clear>:

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~ Command Parsing Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline void INPUT_Clear(void){
     394:	e9 e7       	ldi	r30, 0x79	; 121
     396:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 32; i++){
    DATA_IN[i] = 0;
     398:	11 92       	st	Z+, r1
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~ Command Parsing Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline void INPUT_Clear(void){
  for(uint8_t i = 0; i < 32; i++){
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	e9 39       	cpi	r30, 0x99	; 153
     39e:	f8 07       	cpc	r31, r24
     3a0:	d9 f7       	brne	.-10     	; 0x398 <INPUT_Clear+0x4>
    DATA_IN[i] = 0;
  }
  DATA_IN_POS = 0;
     3a2:	10 92 5a 01 	sts	0x015A, r1
  printPGMStr(PSTR("\r\n\r\n> "));
     3a6:	84 e7       	ldi	r24, 0x74	; 116
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	e1 cf       	rjmp	.-62     	; 0x36e <printPGMStr>

000003ac <EEPROM_Write_Port_Defaults>:
    if(PORT_DEF[i] < 0 || PORT_DEF[i] > 1) PORT_DEF[i] = 1;
  }
}

// Write the default port state settings from the PORT_DEF array in RAM
static inline void EEPROM_Write_Port_Defaults(void){
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	09 e9       	ldi	r16, 0x99	; 153
     3b6:	11 e0       	ldi	r17, 0x01	; 1
     3b8:	c0 e0       	ldi	r28, 0x00	; 0
     3ba:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
  	// Update the EERPOM with the values from the PORT_DEF array
    eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i), PORT_DEF[i]);
     3bc:	f8 01       	movw	r30, r16
     3be:	61 91       	ld	r22, Z+
     3c0:	8f 01       	movw	r16, r30
     3c2:	ce 01       	movw	r24, r28
     3c4:	0e 94 a4 13 	call	0x2748	; 0x2748 <__eeupd_byte_m16u2>
     3c8:	21 96       	adiw	r28, 0x01	; 1
  }
}

// Write the default port state settings from the PORT_DEF array in RAM
static inline void EEPROM_Write_Port_Defaults(void){
  for(uint8_t i = 0; i < 8; i++){
     3ca:	c8 30       	cpi	r28, 0x08	; 8
     3cc:	d1 05       	cpc	r29, r1
     3ce:	b1 f7       	brne	.-20     	; 0x3bc <EEPROM_Write_Port_Defaults+0x10>
  	// Update the EERPOM with the values from the PORT_DEF array
    eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i), PORT_DEF[i]);
  }
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	08 95       	ret

000003da <run_lufa>:
// ~~ USB Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline void run_lufa(void){
  //CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
  CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <CDC_Device_USBTask>
  USB_USBTask();
     3e2:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <USB_USBTask>

000003e6 <PORT_CTL>:
// ~~ Port/LED Control Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline uint8_t PORT_CTL(uint8_t port, uint8_t state){
  // If state isn't on or off, or the port isn't a valid number, return error
  if(state != 0 && state != 1) return 1;
     3e6:	62 30       	cpi	r22, 0x02	; 2
     3e8:	a0 f5       	brcc	.+104    	; 0x452 <PORT_CTL+0x6c>
  if(port < 0 || port > 7) return 1;
     3ea:	88 30       	cpi	r24, 0x08	; 8
     3ec:	90 f5       	brcc	.+100    	; 0x452 <PORT_CTL+0x6c>
     3ee:	28 2f       	mov	r18, r24
     3f0:	30 e0       	ldi	r19, 0x00	; 0
  
  // Ports 0 through 3
  if(port >= 0 && port <= 3){
     3f2:	84 30       	cpi	r24, 0x04	; 4
     3f4:	a0 f4       	brcc	.+40     	; 0x41e <PORT_CTL+0x38>
    if(state == 1){
      PORTB |= (1 << (4 + port));
     3f6:	75 b1       	in	r23, 0x05	; 5
     3f8:	a9 01       	movw	r20, r18
     3fa:	4c 5f       	subi	r20, 0xFC	; 252
     3fc:	5f 4f       	sbci	r21, 0xFF	; 255
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	04 2e       	mov	r0, r20
     404:	01 c0       	rjmp	.+2      	; 0x408 <PORT_CTL+0x22>
     406:	88 0f       	add	r24, r24
     408:	0a 94       	dec	r0
     40a:	ea f7       	brpl	.-6      	; 0x406 <PORT_CTL+0x20>
  if(state != 0 && state != 1) return 1;
  if(port < 0 || port > 7) return 1;
  
  // Ports 0 through 3
  if(port >= 0 && port <= 3){
    if(state == 1){
     40c:	61 30       	cpi	r22, 0x01	; 1
     40e:	19 f4       	brne	.+6      	; 0x416 <PORT_CTL+0x30>
      PORTB |= (1 << (4 + port));
     410:	78 2b       	or	r23, r24
     412:	75 b9       	out	0x05, r23	; 5
     414:	18 c0       	rjmp	.+48     	; 0x446 <PORT_CTL+0x60>
    }else{
      PORTB &= ~(1 << (4 + port));
     416:	80 95       	com	r24
     418:	87 23       	and	r24, r23
     41a:	85 b9       	out	0x05, r24	; 5
     41c:	14 c0       	rjmp	.+40     	; 0x446 <PORT_CTL+0x60>
    }
  // Ports 4 through 7
  }else{
    if(state == 1){
      PORTC |= (1 << (11 - port));
     41e:	78 b1       	in	r23, 0x08	; 8
     420:	4b e0       	ldi	r20, 0x0B	; 11
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	42 1b       	sub	r20, r18
     426:	53 0b       	sbc	r21, r19
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	04 2e       	mov	r0, r20
     42e:	01 c0       	rjmp	.+2      	; 0x432 <PORT_CTL+0x4c>
     430:	88 0f       	add	r24, r24
     432:	0a 94       	dec	r0
     434:	ea f7       	brpl	.-6      	; 0x430 <PORT_CTL+0x4a>
    }else{
      PORTB &= ~(1 << (4 + port));
    }
  // Ports 4 through 7
  }else{
    if(state == 1){
     436:	61 30       	cpi	r22, 0x01	; 1
     438:	19 f4       	brne	.+6      	; 0x440 <PORT_CTL+0x5a>
      PORTC |= (1 << (11 - port));
     43a:	78 2b       	or	r23, r24
     43c:	78 b9       	out	0x08, r23	; 8
     43e:	03 c0       	rjmp	.+6      	; 0x446 <PORT_CTL+0x60>
    }else{
      PORTC &= ~(1 << (11 - port));
     440:	80 95       	com	r24
     442:	87 23       	and	r24, r23
     444:	88 b9       	out	0x08, r24	; 8
    }
  }
  
  // Update our port state array
  PORT_STATE[port] = state;
     446:	f9 01       	movw	r30, r18
     448:	ef 58       	subi	r30, 0x8F	; 143
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	60 83       	st	Z, r22
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	08 95       	ret
// ~~ Port/LED Control Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline uint8_t PORT_CTL(uint8_t port, uint8_t state){
  // If state isn't on or off, or the port isn't a valid number, return error
  if(state != 0 && state != 1) return 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
  
  // Update our port state array
  PORT_STATE[port] = state;
  
  return 0;
}
     454:	08 95       	ret

00000456 <ADC_Read_Raw>:
  return ((ADC_Read_Raw(7)* STEP_V) * 10.1);
}

// Return raw counts from the ADC
static inline uint16_t ADC_Read_Raw(uint8_t port){
  PORTB &= ~(1 << SPI_SS);
     456:	28 98       	cbi	0x05, 0	; 5
static inline void SPI_end(void) {
  SPCR &= ~_BV(SPE);
}

static inline uint8_t SPI_transfer(uint8_t _data){
  SPDR = _data;
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	9e bd       	out	0x2e, r25	; 46
  while(!(SPSR & _BV(SPIF))){};
     45c:	0d b4       	in	r0, 0x2d	; 45
     45e:	07 fe       	sbrs	r0, 7
     460:	fd cf       	rjmp	.-6      	; 0x45c <ADC_Read_Raw+0x6>
  return SPDR;
     462:	9e b5       	in	r25, 0x2e	; 46

// Return raw counts from the ADC
static inline uint16_t ADC_Read_Raw(uint8_t port){
  PORTB &= ~(1 << SPI_SS);
  SPI_transfer(0x01); // Start bit
  uint8_t temp1 = SPI_transfer(ADC_Ports[port]); // Single ended, input number, clocking in 4 bits
     464:	e8 2f       	mov	r30, r24
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	e5 5e       	subi	r30, 0xE5	; 229
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	80 81       	ld	r24, Z
static inline void SPI_end(void) {
  SPCR &= ~_BV(SPE);
}

static inline uint8_t SPI_transfer(uint8_t _data){
  SPDR = _data;
     46e:	8e bd       	out	0x2e, r24	; 46
  while(!(SPSR & _BV(SPIF))){};
     470:	0d b4       	in	r0, 0x2d	; 45
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <ADC_Read_Raw+0x1a>
  return SPDR;
     476:	2e b5       	in	r18, 0x2e	; 46
static inline void SPI_end(void) {
  SPCR &= ~_BV(SPE);
}

static inline uint8_t SPI_transfer(uint8_t _data){
  SPDR = _data;
     478:	1e bc       	out	0x2e, r1	; 46
  while(!(SPSR & _BV(SPIF))){};
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <ADC_Read_Raw+0x24>
  return SPDR;
     480:	8e b5       	in	r24, 0x2e	; 46
static inline uint16_t ADC_Read_Raw(uint8_t port){
  PORTB &= ~(1 << SPI_SS);
  SPI_transfer(0x01); // Start bit
  uint8_t temp1 = SPI_transfer(ADC_Ports[port]); // Single ended, input number, clocking in 4 bits
  uint8_t temp2 = SPI_transfer(0x00); // Clocking in 8 bits
  PORTB |= (1 << SPI_SS);
     482:	28 9a       	sbi	0x05, 0	; 5
  
  uint16_t adc_counts = ((temp1 & 0b00000011) << 8) | temp2;
     484:	23 70       	andi	r18, 0x03	; 3
     486:	90 e0       	ldi	r25, 0x00	; 0
  
  return adc_counts;
}
     488:	92 2b       	or	r25, r18
     48a:	08 95       	ret

0000048c <main>:
					},
			},
	};

// Main program entry point.
int main(void){
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	a8 97       	sbiw	r28, 0x28	; 40
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	29 e9       	ldi	r18, 0x99	; 153
     4a2:	e2 2e       	mov	r14, r18
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	f2 2e       	mov	r15, r18
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	10 e0       	ldi	r17, 0x00	; 0
static inline void EEPROM_Read_Port_Defaults(void){
  for(uint8_t i = 0; i < 8; i++){
  	// Update the PORT_DEF array with the values from EEPROM
    PORT_DEF[i] = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i));
    // If the value is not 0 or 1 (uninitialized), default it to 1
    if(PORT_DEF[i] < 0 || PORT_DEF[i] > 1) PORT_DEF[i] = 1;
     4ac:	dd 24       	eor	r13, r13
     4ae:	d3 94       	inc	r13

// Read the default port state settings into the PORT_DEF array in RAM
static inline void EEPROM_Read_Port_Defaults(void){
  for(uint8_t i = 0; i < 8; i++){
  	// Update the PORT_DEF array with the values from EEPROM
    PORT_DEF[i] = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i));
     4b0:	c8 01       	movw	r24, r16
     4b2:	0e 94 97 13 	call	0x272e	; 0x272e <__eerd_byte_m16u2>
    // If the value is not 0 or 1 (uninitialized), default it to 1
    if(PORT_DEF[i] < 0 || PORT_DEF[i] > 1) PORT_DEF[i] = 1;
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	18 f4       	brcc	.+6      	; 0x4c0 <main+0x34>

// Read the default port state settings into the PORT_DEF array in RAM
static inline void EEPROM_Read_Port_Defaults(void){
  for(uint8_t i = 0; i < 8; i++){
  	// Update the PORT_DEF array with the values from EEPROM
    PORT_DEF[i] = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i));
     4ba:	d7 01       	movw	r26, r14
     4bc:	8c 93       	st	X, r24
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <main+0x38>
    // If the value is not 0 or 1 (uninitialized), default it to 1
    if(PORT_DEF[i] < 0 || PORT_DEF[i] > 1) PORT_DEF[i] = 1;
     4c0:	f7 01       	movw	r30, r14
     4c2:	d0 82       	st	Z, r13
     4c4:	0f 5f       	subi	r16, 0xFF	; 255
     4c6:	1f 4f       	sbci	r17, 0xFF	; 255
     4c8:	ff ef       	ldi	r31, 0xFF	; 255
     4ca:	ef 1a       	sub	r14, r31
     4cc:	ff 0a       	sbc	r15, r31
// ~~ EEPROM Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

// Read the default port state settings into the PORT_DEF array in RAM
static inline void EEPROM_Read_Port_Defaults(void){
  for(uint8_t i = 0; i < 8; i++){
     4ce:	08 30       	cpi	r16, 0x08	; 8
     4d0:	11 05       	cpc	r17, r1
     4d2:	71 f7       	brne	.-36     	; 0x4b0 <main+0x24>
  }
}

// Read the stored reference voltage from EEPROM
static inline void EEPROM_Read_REF_V(void){
  REF_V = eeprom_read_float((float*)(EEPROM_OFFSET_REF_V));
     4d4:	88 e0       	ldi	r24, 0x08	; 8
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 9f 13 	call	0x273e	; 0x273e <__eerd_dword_m16u2>
     4dc:	6b 01       	movw	r12, r22
     4de:	7c 01       	movw	r14, r24
  // If the value seems out of range (uninitialized), default it to 4.2
  //float REF_V = 4.227;
  if(REF_V < 4.0 || REF_V > 4.4 || isnan(REF_V)) REF_V = 4.2;
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e8       	ldi	r20, 0x80	; 128
     4e6:	50 e4       	ldi	r21, 0x40	; 64
     4e8:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__cmpsf2>
     4ec:	87 fd       	sbrc	r24, 7
     4ee:	1b c0       	rjmp	.+54     	; 0x526 <main+0x9a>
     4f0:	2d ec       	ldi	r18, 0xCD	; 205
     4f2:	3c ec       	ldi	r19, 0xCC	; 204
     4f4:	4c e8       	ldi	r20, 0x8C	; 140
     4f6:	50 e4       	ldi	r21, 0x40	; 64
     4f8:	c7 01       	movw	r24, r14
     4fa:	b6 01       	movw	r22, r12
     4fc:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__gesf2>
     500:	18 16       	cp	r1, r24
     502:	8c f0       	brlt	.+34     	; 0x526 <main+0x9a>
     504:	a7 01       	movw	r20, r14
     506:	96 01       	movw	r18, r12
     508:	c7 01       	movw	r24, r14
     50a:	b6 01       	movw	r22, r12
     50c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__unordsf2>
     510:	81 11       	cpse	r24, r1
     512:	09 c0       	rjmp	.+18     	; 0x526 <main+0x9a>
  }
}

// Read the stored reference voltage from EEPROM
static inline void EEPROM_Read_REF_V(void){
  REF_V = eeprom_read_float((float*)(EEPROM_OFFSET_REF_V));
     514:	c0 92 6d 01 	sts	0x016D, r12
     518:	d0 92 6e 01 	sts	0x016E, r13
     51c:	e0 92 6f 01 	sts	0x016F, r14
     520:	f0 92 70 01 	sts	0x0170, r15
     524:	0c c0       	rjmp	.+24     	; 0x53e <main+0xb2>
  // If the value seems out of range (uninitialized), default it to 4.2
  //float REF_V = 4.227;
  if(REF_V < 4.0 || REF_V > 4.4 || isnan(REF_V)) REF_V = 4.2;
     526:	86 e6       	ldi	r24, 0x66	; 102
     528:	96 e6       	ldi	r25, 0x66	; 102
     52a:	a6 e8       	ldi	r26, 0x86	; 134
     52c:	b0 e4       	ldi	r27, 0x40	; 64
     52e:	80 93 6d 01 	sts	0x016D, r24
     532:	90 93 6e 01 	sts	0x016E, r25
     536:	a0 93 6f 01 	sts	0x016F, r26
     53a:	b0 93 70 01 	sts	0x0170, r27
  PORT8_SENSE = mode;
}

// Read the stored Port 8 Sense mode
static inline void EEPROM_Read_P8_Sense(void){
  PORT8_SENSE = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P8_SENSE));
     53e:	8c e0       	ldi	r24, 0x0C	; 12
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 97 13 	call	0x272e	; 0x272e <__eerd_byte_m16u2>
  if(PORT8_SENSE < 0 || PORT8_SENSE > 1) PORT8_SENSE = 0;
     546:	82 30       	cpi	r24, 0x02	; 2
     548:	18 f4       	brcc	.+6      	; 0x550 <main+0xc4>
  PORT8_SENSE = mode;
}

// Read the stored Port 8 Sense mode
static inline void EEPROM_Read_P8_Sense(void){
  PORT8_SENSE = eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P8_SENSE));
     54a:	80 93 a1 01 	sts	0x01A1, r24
     54e:	02 c0       	rjmp	.+4      	; 0x554 <main+0xc8>
  if(PORT8_SENSE < 0 || PORT8_SENSE > 1) PORT8_SENSE = 0;
     550:	10 92 a1 01 	sts	0x01A1, r1
  EEPROM_Read_Port_Defaults();
  EEPROM_Read_REF_V();
  EEPROM_Read_P8_Sense();

  // Initialize some variables
  STEP_V = REF_V / 1024;
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	5a e3       	ldi	r21, 0x3A	; 58
     55c:	60 91 6d 01 	lds	r22, 0x016D
     560:	70 91 6e 01 	lds	r23, 0x016E
     564:	80 91 6f 01 	lds	r24, 0x016F
     568:	90 91 70 01 	lds	r25, 0x0170
     56c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
     570:	60 93 5b 01 	sts	0x015B, r22
     574:	70 93 5c 01 	sts	0x015C, r23
     578:	80 93 5d 01 	sts	0x015D, r24
     57c:	90 93 5e 01 	sts	0x015E, r25
     580:	e9 e7       	ldi	r30, 0x79	; 121
     582:	f1 e0       	ldi	r31, 0x01	; 1
  int16_t BYTE_IN = -1;

  for(uint8_t i = 0; i < 32; i++){
    DATA_IN[i] = 0;
     584:	11 92       	st	Z+, r1

  // Initialize some variables
  STEP_V = REF_V / 1024;
  int16_t BYTE_IN = -1;

  for(uint8_t i = 0; i < 32; i++){
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	e9 39       	cpi	r30, 0x99	; 153
     58a:	f2 07       	cpc	r31, r18
     58c:	d9 f7       	brne	.-10     	; 0x584 <main+0xf8>
    DATA_IN[i] = 0;
  }

  // Disable watchdog if enabled by bootloader/fuses
  MCUSR &= ~(1 << WDRF);
     58e:	84 b7       	in	r24, 0x34	; 52
     590:	87 7f       	andi	r24, 0xF7	; 247
     592:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     594:	88 e1       	ldi	r24, 0x18	; 24
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	80 93 60 00 	sts	0x0060, r24
     59e:	10 92 60 00 	sts	0x0060, r1
     5a2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     5a4:	94 e0       	ldi	r25, 0x04	; 4
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	80 93 61 00 	sts	0x0061, r24
     5b0:	90 93 61 00 	sts	0x0061, r25
     5b4:	0f be       	out	0x3f, r0	; 63

  // Disable clock division
  clock_prescale_set(clock_div_16);
  
  // USB Hardware Initialization
  USB_Init();
     5b6:	ab d5       	rcall	.+2902   	; 0x110e <USB_Init>

  // Create a regular character stream for the interface so that it can be used with the stdio.h functions
  CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     5b8:	6f e5       	ldi	r22, 0x5F	; 95
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <CDC_Device_CreateStream>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     5c4:	78 94       	sei
  
  // Enable interrupts
  GlobalInterruptEnable();

  run_lufa();
     5c6:	09 df       	rcall	.-494    	; 0x3da <run_lufa>
     5c8:	84 ef       	ldi	r24, 0xF4	; 244
     5ca:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5cc:	a3 ec       	ldi	r26, 0xC3	; 195
     5ce:	b9 e0       	ldi	r27, 0x09	; 9
     5d0:	11 97       	sbiw	r26, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <main+0x144>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0x14a>
     5d6:	00 00       	nop
     5d8:	01 97       	sbiw	r24, 0x01	; 1
  
  for(uint16_t i = 0; i < 500; i++){
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	b9 f7       	brne	.-18     	; 0x5cc <main+0x140>
    _delay_ms(10);
  }
  
  // Print startup message
  printPGMStr(PSTR("\r\nK7NVH DC PDU V1.0\r\n"));
     5de:	89 e5       	ldi	r24, 0x59	; 89
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	c5 de       	rcall	.-630    	; 0x36e <printPGMStr>
  run_lufa();
     5e4:	fa de       	rcall	.-524    	; 0x3da <run_lufa>
  
  // Set up SPI pins
  DDRB |= (1 << SPI_SS)|(1 << SPI_SCK)|(1 << SPI_MOSI);
     5e6:	84 b1       	in	r24, 0x04	; 4
     5e8:	87 60       	ori	r24, 0x07	; 7
     5ea:	84 b9       	out	0x04, r24	; 4
  PORTB |= (1 << SPI_SS);
     5ec:	28 9a       	sbi	0x05, 0	; 5
  PORTB &= ~(1 << SPI_SCK);
     5ee:	29 98       	cbi	0x05, 1	; 5

static inline void SPI_begin(void){
  // Set SS to high so a connected chip will be "deselected" by default
  // Set SS to output
  
  SPCR |= _BV(MSTR);
     5f0:	8c b5       	in	r24, 0x2c	; 44
     5f2:	80 61       	ori	r24, 0x10	; 16
     5f4:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
     5f6:	8c b5       	in	r24, 0x2c	; 44
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	8c bd       	out	0x2c, r24	; 44
static inline void SPI_setDataMode(uint8_t mode){
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
}

static inline void SPI_setClockDivider(uint8_t rate){
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
     5fc:	8c b5       	in	r24, 0x2c	; 44
     5fe:	83 60       	ori	r24, 0x03	; 3
     600:	8c bd       	out	0x2c, r24	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
     602:	8d b5       	in	r24, 0x2d	; 45
     604:	8e 7f       	andi	r24, 0xFE	; 254
     606:	8d bd       	out	0x2d, r24	; 45
    SPCR &= ~(_BV(DORD));
  }
}

static inline void SPI_setDataMode(uint8_t mode){
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
     608:	8c b5       	in	r24, 0x2c	; 44
     60a:	83 7f       	andi	r24, 0xF3	; 243
     60c:	8c bd       	out	0x2c, r24	; 44
// 0 = LSBFIRST
static inline void SPI_setBitOrder(uint8_t bitOrder){
  if(bitOrder == 0){
    SPCR |= _BV(DORD);
  }else{
    SPCR &= ~(_BV(DORD));
     60e:	8c b5       	in	r24, 0x2c	; 44
     610:	8f 7d       	andi	r24, 0xDF	; 223
     612:	8c bd       	out	0x2c, r24	; 44
  SPI_setClockDivider(SPI_CLOCK_DIV128);
  SPI_setDataMode(SPI_MODE0);
  SPI_setBitOrder(1);

  // Set up control pins
  DDRB |= (1 << P1EN)|(1 << P2EN)|(1 << P3EN)|(1 << P4EN);
     614:	84 b1       	in	r24, 0x04	; 4
     616:	80 6f       	ori	r24, 0xF0	; 240
     618:	84 b9       	out	0x04, r24	; 4
  DDRC |= (1 << P5EN)|(1 << P6EN)|(1 << P7EN)|(1 << P8EN);
     61a:	87 b1       	in	r24, 0x07	; 7
     61c:	80 6f       	ori	r24, 0xF0	; 240
     61e:	87 b9       	out	0x07, r24	; 7
  DDRD |= (1 << LED1)|(1 << LED2);
     620:	8a b1       	in	r24, 0x0a	; 10
     622:	80 63       	ori	r24, 0x30	; 48
     624:	8a b9       	out	0x0a, r24	; 10
  
  // Enable/Disable ports per their defaults
  printPGMStr(STR_Port_Init);
     626:	8f e8       	ldi	r24, 0x8F	; 143
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	a1 de       	rcall	.-702    	; 0x36e <printPGMStr>
     62c:	19 e9       	ldi	r17, 0x99	; 153
     62e:	e1 2e       	mov	r14, r17
     630:	11 e0       	ldi	r17, 0x01	; 1
     632:	f1 2e       	mov	r15, r17
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
  	PORT_CTL(i, PORT_DEF[i]);
  	fprintf(&USBSerialStream, "P%i", i+1);
     638:	83 e2       	ldi	r24, 0x23	; 35
     63a:	c8 2e       	mov	r12, r24
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	d8 2e       	mov	r13, r24
     640:	9f e5       	ldi	r25, 0x5F	; 95
     642:	a9 2e       	mov	r10, r25
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	b9 2e       	mov	r11, r25
     648:	80 2f       	mov	r24, r16
     64a:	47 01       	movw	r8, r14
     64c:	0f 5f       	subi	r16, 0xFF	; 255
     64e:	1f 4f       	sbci	r17, 0xFF	; 255
  DDRD |= (1 << LED1)|(1 << LED2);
  
  // Enable/Disable ports per their defaults
  printPGMStr(STR_Port_Init);
  for(uint8_t i = 0; i < 8; i++){
  	PORT_CTL(i, PORT_DEF[i]);
     650:	f7 01       	movw	r30, r14
     652:	61 91       	ld	r22, Z+
     654:	7f 01       	movw	r14, r30
     656:	c7 de       	rcall	.-626    	; 0x3e6 <PORT_CTL>
  	fprintf(&USBSerialStream, "P%i", i+1);
     658:	1f 93       	push	r17
     65a:	0f 93       	push	r16
     65c:	df 92       	push	r13
     65e:	cf 92       	push	r12
     660:	bf 92       	push	r11
     662:	af 92       	push	r10
     664:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
  	if(PORT_DEF[i]){
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	d4 01       	movw	r26, r8
     676:	8c 91       	ld	r24, X
     678:	88 23       	and	r24, r24
     67a:	19 f0       	breq	.+6      	; 0x682 <main+0x1f6>
  	  printPGMStr(PSTR(" ON\r\n"));
     67c:	83 e5       	ldi	r24, 0x53	; 83
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	02 c0       	rjmp	.+4      	; 0x686 <main+0x1fa>
  	}else{
  	  printPGMStr(PSTR(" OFF\r\n"));
     682:	8c e4       	ldi	r24, 0x4C	; 76
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	73 de       	rcall	.-794    	; 0x36e <printPGMStr>
  	}
  	run_lufa();
     688:	a8 de       	rcall	.-688    	; 0x3da <run_lufa>
  DDRC |= (1 << P5EN)|(1 << P6EN)|(1 << P7EN)|(1 << P8EN);
  DDRD |= (1 << LED1)|(1 << LED2);
  
  // Enable/Disable ports per their defaults
  printPGMStr(STR_Port_Init);
  for(uint8_t i = 0; i < 8; i++){
     68a:	08 30       	cpi	r16, 0x08	; 8
     68c:	11 05       	cpc	r17, r1
     68e:	e1 f6       	brne	.-72     	; 0x648 <main+0x1bc>
  	  printPGMStr(PSTR(" OFF\r\n"));
  	}
  	run_lufa();
  }
    
  INPUT_Clear();
     690:	81 de       	rcall	.-766    	; 0x394 <INPUT_Clear>
    return;
  }
  if(strncmp_P(DATA_IN, PSTR("SETVREF"), 7) == 0){
    if(DATA_IN_POS > 7){
      char temp_str[5];
      strncpy(temp_str, DATA_IN+7, 4);
     692:	fe 01       	movw	r30, r28
     694:	31 96       	adiw	r30, 0x01	; 1
     696:	7f 01       	movw	r14, r30
      return;
    }else if(DATA_IN[7] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
        PORT_DEF[i] = 0;
        printPGMStr(STR_Port_Default);
        fprintf(&USBSerialStream, "%i ", i);
     698:	0d e3       	ldi	r16, 0x3D	; 61
     69a:	11 e0       	ldi	r17, 0x01	; 1
}

// Read the stored port name
static inline const char * EEPROM_Read_Port_Name(uint8_t port){
  char working[16];
  eeprom_read_block((void*)working, (const void*)EEPROM_OFFSET_P0NAME+(port*16), 16);
     69c:	1e 01       	movw	r2, r28
     69e:	f1 e1       	ldi	r31, 0x11	; 17
     6a0:	2f 0e       	add	r2, r31
     6a2:	31 1c       	adc	r3, r1
  }
    
  INPUT_Clear();

  for(;;){
    BYTE_IN = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 84 0b 	call	0x1708	; 0x1708 <CDC_Device_ReceiveByte>
     6ac:	6c 01       	movw	r12, r24
    
    if(BYTE_IN >= 0){
     6ae:	97 fd       	sbrc	r25, 7
     6b0:	2f c3       	rjmp	.+1630   	; 0xd10 <main+0x884>
}

static inline void LED_CTL(uint8_t led, uint8_t state){
  if(led == 1){
    if(state == 1){
      PORTD |= (1 << LED1);
     6b2:	5c 9a       	sbi	0x0b, 4	; 11
  for(;;){
    BYTE_IN = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
    
    if(BYTE_IN >= 0){
      LED_CTL(1, 1);
      fputc(BYTE_IN, &USBSerialStream);
     6b4:	6f e5       	ldi	r22, 0x5F	; 95
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <fputc>
    
      switch(BYTE_IN){
     6bc:	2a e0       	ldi	r18, 0x0A	; 10
     6be:	c2 16       	cp	r12, r18
     6c0:	d1 04       	cpc	r13, r1
     6c2:	e9 f0       	breq	.+58     	; 0x6fe <main+0x272>
     6c4:	2c f4       	brge	.+10     	; 0x6d0 <main+0x244>
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	c8 16       	cp	r12, r24
     6ca:	d1 04       	cpc	r13, r1
     6cc:	51 f0       	breq	.+20     	; 0x6e2 <main+0x256>
     6ce:	14 c3       	rjmp	.+1576   	; 0xcf8 <main+0x86c>
     6d0:	9d e0       	ldi	r25, 0x0D	; 13
     6d2:	c9 16       	cp	r12, r25
     6d4:	d1 04       	cpc	r13, r1
     6d6:	99 f0       	breq	.+38     	; 0x6fe <main+0x272>
     6d8:	af e7       	ldi	r26, 0x7F	; 127
     6da:	ca 16       	cp	r12, r26
     6dc:	d1 04       	cpc	r13, r1
     6de:	09 f0       	breq	.+2      	; 0x6e2 <main+0x256>
     6e0:	0b c3       	rjmp	.+1558   	; 0xcf8 <main+0x86c>
        case 8:
        case 127:
          // Backspace
          if(DATA_IN_POS > 0) DATA_IN_POS--;
     6e2:	80 91 5a 01 	lds	r24, 0x015A
     6e6:	88 23       	and	r24, r24
     6e8:	19 f0       	breq	.+6      	; 0x6f0 <main+0x264>
     6ea:	81 50       	subi	r24, 0x01	; 1
     6ec:	80 93 5a 01 	sts	0x015A, r24
          DATA_IN[DATA_IN_POS] = 0;
     6f0:	e0 91 5a 01 	lds	r30, 0x015A
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	e7 58       	subi	r30, 0x87	; 135
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	10 82       	st	Z, r1
          break;
     6fc:	09 c3       	rjmp	.+1554   	; 0xd10 <main+0x884>
  DATA_IN_POS = 0;
  printPGMStr(PSTR("\r\n\r\n> "));
}

static inline void INPUT_Parse(void){
  if(strcmp_P(DATA_IN, PSTR("STATUS")) == 0){ PRINT_Status(); return; }
     6fe:	65 e4       	ldi	r22, 0x45	; 69
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	89 e7       	ldi	r24, 0x79	; 121
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 a0 12 	call	0x2540	; 0x2540 <strcmp_P>
     70a:	89 2b       	or	r24, r25
     70c:	09 f0       	breq	.+2      	; 0x710 <main+0x284>
     70e:	fe c0       	rjmp	.+508    	; 0x90c <main+0x480>
// ~~ Printing Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline void PRINT_Status(void){
  float voltage, current;
  if(PORT8_SENSE == 1){
     710:	80 91 a1 01 	lds	r24, 0x01A1
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	c1 f5       	brne	.+112    	; 0x788 <main+0x2fc>
  return (voltage / 0.1);
}

// Read input voltage on ADC channel 8 if not measuring current
static inline float ADC_Read_Voltage(void){
  return ((ADC_Read_Raw(7)* STEP_V) * 10.1);
     718:	87 e0       	ldi	r24, 0x07	; 7
     71a:	9d de       	rcall	.-710    	; 0x456 <ADC_Read_Raw>
     71c:	bc 01       	movw	r22, r24
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__floatunsisf>
     726:	20 91 5b 01 	lds	r18, 0x015B
     72a:	30 91 5c 01 	lds	r19, 0x015C
     72e:	40 91 5d 01 	lds	r20, 0x015D
     732:	50 91 5e 01 	lds	r21, 0x015E
     736:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
     73a:	2a e9       	ldi	r18, 0x9A	; 154
     73c:	39 e9       	ldi	r19, 0x99	; 153
     73e:	41 e2       	ldi	r20, 0x21	; 33
     740:	51 e4       	ldi	r21, 0x41	; 65
     742:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
     746:	d8 2e       	mov	r13, r24
     748:	c9 2e       	mov	r12, r25
     74a:	6b a3       	std	Y+35, r22	; 0x23
     74c:	7c a3       	std	Y+36, r23	; 0x24
     74e:	8d a3       	std	Y+37, r24	; 0x25
     750:	9e a3       	std	Y+38, r25	; 0x26

static inline void PRINT_Status(void){
  float voltage, current;
  if(PORT8_SENSE == 1){
  	voltage = ADC_Read_Voltage();
  	printPGMStr(PSTR("\r\nInput Voltage: "));
     752:	8f ec       	ldi	r24, 0xCF	; 207
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	6f a3       	std	Y+39, r22	; 0x27
     758:	78 a7       	std	Y+40, r23	; 0x28
     75a:	09 de       	rcall	.-1006   	; 0x36e <printPGMStr>
    fprintf(&USBSerialStream, "%.2fV", voltage);
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	78 a5       	ldd	r23, Y+40	; 0x28
     762:	7f 93       	push	r23
     764:	6f a1       	ldd	r22, Y+39	; 0x27
     766:	6f 93       	push	r22
     768:	87 e2       	ldi	r24, 0x27	; 39
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	8f e5       	ldi	r24, 0x5F	; 95
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	04 c0       	rjmp	.+8      	; 0x790 <main+0x304>
// ~~ Printing Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

static inline void PRINT_Status(void){
  float voltage, current;
  if(PORT8_SENSE == 1){
     788:	1b a2       	std	Y+35, r1	; 0x23
     78a:	1c a2       	std	Y+36, r1	; 0x24
     78c:	1d a2       	std	Y+37, r1	; 0x25
     78e:	1e a2       	std	Y+38, r1	; 0x26
     790:	21 e7       	ldi	r18, 0x71	; 113
     792:	31 e0       	ldi	r19, 0x01	; 1
     794:	3a a3       	std	Y+34, r19	; 0x22
     796:	29 a3       	std	Y+33, r18	; 0x21
     798:	cc 24       	eor	r12, r12
     79a:	c3 94       	inc	r12
     79c:	d1 2c       	mov	r13, r1
     79e:	a0 e4       	ldi	r26, 0x40	; 64
     7a0:	aa 2e       	mov	r10, r26
     7a2:	b1 2c       	mov	r11, r1
  	printPGMStr(PSTR("\r\nInput Voltage: "));
    fprintf(&USBSerialStream, "%.2fV", voltage);
  }
  for(uint8_t i = 0; i < 8; i++){
    printPGMStr(PSTR("\r\nPORT "));
    fprintf(&USBSerialStream, "%i \"%s\": ", i+1, EEPROM_Read_Port_Name(i));
     7a4:	bf e5       	ldi	r27, 0x5F	; 95
     7a6:	8b 2e       	mov	r8, r27
     7a8:	b1 e0       	ldi	r27, 0x01	; 1
     7aa:	9b 2e       	mov	r9, r27
     7ac:	79 a0       	ldd	r7, Y+33	; 0x21
     7ae:	81 e7       	ldi	r24, 0x71	; 113
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	78 1a       	sub	r7, r24
  	voltage = ADC_Read_Voltage();
  	printPGMStr(PSTR("\r\nInput Voltage: "));
    fprintf(&USBSerialStream, "%.2fV", voltage);
  }
  for(uint8_t i = 0; i < 8; i++){
    printPGMStr(PSTR("\r\nPORT "));
     7b4:	87 ec       	ldi	r24, 0xC7	; 199
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	da dd       	rcall	.-1100   	; 0x36e <printPGMStr>
}

// Read the stored port name
static inline const char * EEPROM_Read_Port_Name(uint8_t port){
  char working[16];
  eeprom_read_block((void*)working, (const void*)EEPROM_OFFSET_P0NAME+(port*16), 16);
     7ba:	40 e1       	ldi	r20, 0x10	; 16
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	b5 01       	movw	r22, r10
     7c0:	c1 01       	movw	r24, r2
     7c2:	0e 94 87 13 	call	0x270e	; 0x270e <__eerd_block_m16u2>
  if(working[0] >= 127 || working[0] < 32){ memset(working,0,sizeof(working)); }
     7c6:	89 89       	ldd	r24, Y+17	; 0x11
     7c8:	80 52       	subi	r24, 0x20	; 32
     7ca:	8f 35       	cpi	r24, 0x5F	; 95
     7cc:	28 f0       	brcs	.+10     	; 0x7d8 <main+0x34c>
     7ce:	d1 01       	movw	r26, r2
     7d0:	e0 e1       	ldi	r30, 0x10	; 16
     7d2:	1d 92       	st	X+, r1
     7d4:	ea 95       	dec	r30
     7d6:	e9 f7       	brne	.-6      	; 0x7d2 <main+0x346>
  	printPGMStr(PSTR("\r\nInput Voltage: "));
    fprintf(&USBSerialStream, "%.2fV", voltage);
  }
  for(uint8_t i = 0; i < 8; i++){
    printPGMStr(PSTR("\r\nPORT "));
    fprintf(&USBSerialStream, "%i \"%s\": ", i+1, EEPROM_Read_Port_Name(i));
     7d8:	3f 92       	push	r3
     7da:	2f 92       	push	r2
     7dc:	df 92       	push	r13
     7de:	cf 92       	push	r12
     7e0:	ad e2       	ldi	r26, 0x2D	; 45
     7e2:	b1 e0       	ldi	r27, 0x01	; 1
     7e4:	bf 93       	push	r27
     7e6:	af 93       	push	r26
     7e8:	9f 92       	push	r9
     7ea:	8f 92       	push	r8
     7ec:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
    if(PORT_STATE[i] == 1){ printPGMStr(PSTR("ON")); }else{ printPGMStr(PSTR("OFF")); }
     7f0:	a9 a1       	ldd	r26, Y+33	; 0x21
     7f2:	ba a1       	ldd	r27, Y+34	; 0x22
     7f4:	8d 91       	ld	r24, X+
     7f6:	ba a3       	std	Y+34, r27	; 0x22
     7f8:	a9 a3       	std	Y+33, r26	; 0x21
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	19 f4       	brne	.+6      	; 0x80e <main+0x382>
     808:	84 ec       	ldi	r24, 0xC4	; 196
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <main+0x386>
     80e:	80 ec       	ldi	r24, 0xC0	; 192
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	ad dd       	rcall	.-1190   	; 0x36e <printPGMStr>
    if(i == 7 && PORT8_SENSE == 1) break;
     814:	f8 e0       	ldi	r31, 0x08	; 8
     816:	cf 12       	cpse	r12, r31
     818:	05 c0       	rjmp	.+10     	; 0x824 <main+0x398>
     81a:	80 91 a1 01 	lds	r24, 0x01A1
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	09 f4       	brne	.+2      	; 0x824 <main+0x398>
     822:	68 c2       	rjmp	.+1232   	; 0xcf4 <main+0x868>
// ~~ ADC Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Read current flow on a given port
static inline float ADC_Read_Current(uint8_t port){
  float voltage = (ADC_Read_Raw(port) * STEP_V) / 7.8;
     824:	87 2d       	mov	r24, r7
     826:	17 de       	rcall	.-978    	; 0x456 <ADC_Read_Raw>
     828:	bc 01       	movw	r22, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__floatunsisf>
     832:	20 91 5b 01 	lds	r18, 0x015B
     836:	30 91 5c 01 	lds	r19, 0x015C
     83a:	40 91 5d 01 	lds	r20, 0x015D
     83e:	50 91 5e 01 	lds	r21, 0x015E
     842:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
     846:	2a e9       	ldi	r18, 0x9A	; 154
     848:	39 e9       	ldi	r19, 0x99	; 153
     84a:	49 ef       	ldi	r20, 0xF9	; 249
     84c:	50 e4       	ldi	r21, 0x40	; 64
     84e:	0e 94 82 0c 	call	0x1904	; 0x1904 <__divsf3>
     852:	2b 01       	movw	r4, r22
     854:	3c 01       	movw	r6, r24
  if(voltage < 0.002) voltage = 0.0; // Ignore the lowest voltages so we don't falsely say there's current where there isn't.
     856:	2f e6       	ldi	r18, 0x6F	; 111
     858:	32 e1       	ldi	r19, 0x12	; 18
     85a:	43 e0       	ldi	r20, 0x03	; 3
     85c:	5b e3       	ldi	r21, 0x3B	; 59
     85e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__cmpsf2>
     862:	87 ff       	sbrs	r24, 7
     864:	03 c0       	rjmp	.+6      	; 0x86c <main+0x3e0>
     866:	41 2c       	mov	r4, r1
     868:	51 2c       	mov	r5, r1
     86a:	32 01       	movw	r6, r4
  return (voltage / 0.1);
     86c:	2d ec       	ldi	r18, 0xCD	; 205
     86e:	3c ec       	ldi	r19, 0xCC	; 204
     870:	4c ec       	ldi	r20, 0xCC	; 204
     872:	5d e3       	ldi	r21, 0x3D	; 61
     874:	c3 01       	movw	r24, r6
     876:	b2 01       	movw	r22, r4
     878:	0e 94 82 0c 	call	0x1904	; 0x1904 <__divsf3>
     87c:	2b 01       	movw	r4, r22
     87e:	3c 01       	movw	r6, r24
    printPGMStr(PSTR("\r\nPORT "));
    fprintf(&USBSerialStream, "%i \"%s\": ", i+1, EEPROM_Read_Port_Name(i));
    if(PORT_STATE[i] == 1){ printPGMStr(PSTR("ON")); }else{ printPGMStr(PSTR("OFF")); }
    if(i == 7 && PORT8_SENSE == 1) break;
    current = ADC_Read_Current(i);
    printPGMStr(PSTR(". Current: "));
     880:	84 eb       	ldi	r24, 0xB4	; 180
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	74 dd       	rcall	.-1304   	; 0x36e <printPGMStr>
    fprintf(&USBSerialStream, "%.2f", current);
     886:	7f 92       	push	r7
     888:	6f 92       	push	r6
     88a:	5f 92       	push	r5
     88c:	4f 92       	push	r4
     88e:	a6 e4       	ldi	r26, 0x46	; 70
     890:	b1 e0       	ldi	r27, 0x01	; 1
     892:	bf 93       	push	r27
     894:	af 93       	push	r26
     896:	9f 92       	push	r9
     898:	8f 92       	push	r8
     89a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
    if(PORT8_SENSE == 1){
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	80 91 a1 01 	lds	r24, 0x01A1
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	11 f5       	brne	.+68     	; 0x8f4 <main+0x468>
      printPGMStr(PSTR("A, Power: "));
     8b0:	89 ea       	ldi	r24, 0xA9	; 169
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	5c dd       	rcall	.-1352   	; 0x36e <printPGMStr>
      fprintf(&USBSerialStream, "%.1fW", (voltage * current));
     8b6:	24 2d       	mov	r18, r4
     8b8:	35 2d       	mov	r19, r5
     8ba:	46 2d       	mov	r20, r6
     8bc:	57 2d       	mov	r21, r7
     8be:	bb a1       	ldd	r27, Y+35	; 0x23
     8c0:	ac a1       	ldd	r26, Y+36	; 0x24
     8c2:	fd a1       	ldd	r31, Y+37	; 0x25
     8c4:	ee a1       	ldd	r30, Y+38	; 0x26
     8c6:	6b 2f       	mov	r22, r27
     8c8:	7a 2f       	mov	r23, r26
     8ca:	8f 2f       	mov	r24, r31
     8cc:	9e 2f       	mov	r25, r30
     8ce:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <__mulsf3>
     8d2:	9f 93       	push	r25
     8d4:	8f 93       	push	r24
     8d6:	7f 93       	push	r23
     8d8:	6f 93       	push	r22
     8da:	a7 e3       	ldi	r26, 0x37	; 55
     8dc:	b1 e0       	ldi	r27, 0x01	; 1
     8de:	bf 93       	push	r27
     8e0:	af 93       	push	r26
     8e2:	9f 92       	push	r9
     8e4:	8f 92       	push	r8
     8e6:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	30 e1       	ldi	r19, 0x10	; 16
     8f6:	a3 0e       	add	r10, r19
     8f8:	b1 1c       	adc	r11, r1
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	c8 1a       	sub	r12, r24
     8fe:	d8 0a       	sbc	r13, r24
  if(PORT8_SENSE == 1){
  	voltage = ADC_Read_Voltage();
  	printPGMStr(PSTR("\r\nInput Voltage: "));
    fprintf(&USBSerialStream, "%.2fV", voltage);
  }
  for(uint8_t i = 0; i < 8; i++){
     900:	90 ec       	ldi	r25, 0xC0	; 192
     902:	a9 16       	cp	r10, r25
     904:	b1 04       	cpc	r11, r1
     906:	09 f0       	breq	.+2      	; 0x90a <main+0x47e>
     908:	51 cf       	rjmp	.-350    	; 0x7ac <main+0x320>
     90a:	f4 c1       	rjmp	.+1000   	; 0xcf4 <main+0x868>
  printPGMStr(PSTR("\r\n\r\n> "));
}

static inline void INPUT_Parse(void){
  if(strcmp_P(DATA_IN, PSTR("STATUS")) == 0){ PRINT_Status(); return; }
  if(strcmp_P(DATA_IN, PSTR("EEPROMDUMP")) == 0){ EEPROM_Dump_Vars(); return; }
     90c:	6a e3       	ldi	r22, 0x3A	; 58
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	89 e7       	ldi	r24, 0x79	; 121
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 a0 12 	call	0x2540	; 0x2540 <strcmp_P>
     918:	89 2b       	or	r24, r25
     91a:	09 f0       	breq	.+2      	; 0x91e <main+0x492>
     91c:	7e c0       	rjmp	.+252    	; 0xa1a <main+0x58e>
}

// Dump all EEPROM variables
static inline void EEPROM_Dump_Vars(void){
  // Read port defaults
  printPGMStr(PSTR("\r\nPORT DEF: "));
     91e:	8c e9       	ldi	r24, 0x9C	; 156
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	25 dd       	rcall	.-1462   	; 0x36e <printPGMStr>
     924:	81 2c       	mov	r8, r1
     926:	91 2c       	mov	r9, r1
  for(uint8_t i = 0; i < 8; i++){
    fprintf(&USBSerialStream, "%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i)));
     928:	ef e5       	ldi	r30, 0x5F	; 95
     92a:	ae 2e       	mov	r10, r30
     92c:	e1 e0       	ldi	r30, 0x01	; 1
     92e:	be 2e       	mov	r11, r30
     930:	c4 01       	movw	r24, r8
     932:	0e 94 97 13 	call	0x272e	; 0x272e <__eerd_byte_m16u2>
     936:	1f 92       	push	r1
     938:	8f 93       	push	r24
     93a:	1f 93       	push	r17
     93c:	0f 93       	push	r16
     93e:	7f e5       	ldi	r23, 0x5F	; 95
     940:	c7 2e       	mov	r12, r23
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	d7 2e       	mov	r13, r23
     946:	bf 92       	push	r11
     948:	af 92       	push	r10
     94a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
     94e:	af ef       	ldi	r26, 0xFF	; 255
     950:	8a 1a       	sub	r8, r26
     952:	9a 0a       	sbc	r9, r26

// Dump all EEPROM variables
static inline void EEPROM_Dump_Vars(void){
  // Read port defaults
  printPGMStr(PSTR("\r\nPORT DEF: "));
  for(uint8_t i = 0; i < 8; i++){
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	b8 e0       	ldi	r27, 0x08	; 8
     962:	8b 16       	cp	r8, r27
     964:	91 04       	cpc	r9, r1
     966:	21 f7       	brne	.-56     	; 0x930 <main+0x4a4>
    fprintf(&USBSerialStream, "%i ", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_PORT_DEFAULTS + i)));
  }
  // Read REF_V
  printPGMStr(PSTR("\r\nREF_V: "));
     968:	82 e9       	ldi	r24, 0x92	; 146
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	00 dd       	rcall	.-1536   	; 0x36e <printPGMStr>
  fprintf(&USBSerialStream, "%.2f %.2f", eeprom_read_float((float*)(EEPROM_OFFSET_REF_V)), REF_V);
     96e:	b0 90 6d 01 	lds	r11, 0x016D
     972:	a0 90 6e 01 	lds	r10, 0x016E
     976:	90 90 6f 01 	lds	r9, 0x016F
     97a:	80 90 70 01 	lds	r8, 0x0170
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 9f 13 	call	0x273e	; 0x273e <__eerd_dword_m16u2>
     986:	8f 92       	push	r8
     988:	9f 92       	push	r9
     98a:	af 92       	push	r10
     98c:	bf 92       	push	r11
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	7f 93       	push	r23
     994:	6f 93       	push	r22
     996:	81 e4       	ldi	r24, 0x41	; 65
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	df 92       	push	r13
     9a0:	cf 92       	push	r12
     9a2:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
  // Read P8_SENSE
  printPGMStr(PSTR("\r\nP8SENSE: "));
     9a6:	86 e8       	ldi	r24, 0x86	; 134
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	e1 dc       	rcall	.-1598   	; 0x36e <printPGMStr>
  fprintf(&USBSerialStream, "%i", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P8_SENSE)));
     9ac:	8c e0       	ldi	r24, 0x0C	; 12
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 97 13 	call	0x272e	; 0x272e <__eerd_byte_m16u2>
     9b4:	1f 92       	push	r1
     9b6:	8f 93       	push	r24
     9b8:	87 e5       	ldi	r24, 0x57	; 87
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	df 92       	push	r13
     9c2:	cf 92       	push	r12
     9c4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
  // Read Port Names
  printPGMStr(PSTR("\r\nPNAMES: "));
     9c8:	8b e7       	ldi	r24, 0x7B	; 123
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	d0 dc       	rcall	.-1632   	; 0x36e <printPGMStr>
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	60 e4       	ldi	r22, 0x40	; 64
     9da:	a6 2e       	mov	r10, r22
     9dc:	b1 2c       	mov	r11, r1
  for(uint8_t i = 0; i < 8; i++){
    char working[16];
    eeprom_read_block((void*)working, (const void*)EEPROM_OFFSET_P0NAME+(i*16), 16);
     9de:	40 e1       	ldi	r20, 0x10	; 16
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	b5 01       	movw	r22, r10
     9e4:	c7 01       	movw	r24, r14
     9e6:	0e 94 87 13 	call	0x270e	; 0x270e <__eerd_block_m16u2>
    fprintf(&USBSerialStream, "%s ", working);
     9ea:	ff 92       	push	r15
     9ec:	ef 92       	push	r14
     9ee:	ab e4       	ldi	r26, 0x4B	; 75
     9f0:	b1 e0       	ldi	r27, 0x01	; 1
     9f2:	bf 93       	push	r27
     9f4:	af 93       	push	r26
     9f6:	df 92       	push	r13
     9f8:	cf 92       	push	r12
     9fa:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
     9fe:	f0 e1       	ldi	r31, 0x10	; 16
     a00:	af 0e       	add	r10, r31
     a02:	b1 1c       	adc	r11, r1
  // Read P8_SENSE
  printPGMStr(PSTR("\r\nP8SENSE: "));
  fprintf(&USBSerialStream, "%i", eeprom_read_byte((uint8_t*)(EEPROM_OFFSET_P8_SENSE)));
  // Read Port Names
  printPGMStr(PSTR("\r\nPNAMES: "));
  for(uint8_t i = 0; i < 8; i++){
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	20 ec       	ldi	r18, 0xC0	; 192
     a12:	a2 16       	cp	r10, r18
     a14:	b1 04       	cpc	r11, r1
     a16:	19 f7       	brne	.-58     	; 0x9de <main+0x552>
     a18:	6d c1       	rjmp	.+730    	; 0xcf4 <main+0x868>
}

static inline void INPUT_Parse(void){
  if(strcmp_P(DATA_IN, PSTR("STATUS")) == 0){ PRINT_Status(); return; }
  if(strcmp_P(DATA_IN, PSTR("EEPROMDUMP")) == 0){ EEPROM_Dump_Vars(); return; }
  if(strncmp_P(DATA_IN, PSTR("PON"), 3) == 0){
     a1a:	43 e0       	ldi	r20, 0x03	; 3
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	66 e3       	ldi	r22, 0x36	; 54
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	89 e7       	ldi	r24, 0x79	; 121
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     a2a:	89 2b       	or	r24, r25
     a2c:	91 f5       	brne	.+100    	; 0xa92 <main+0x606>
    if(DATA_IN[3] >= 49 && DATA_IN[3] <= 56){
     a2e:	90 91 7c 01 	lds	r25, 0x017C
     a32:	8f ec       	ldi	r24, 0xCF	; 207
     a34:	89 0f       	add	r24, r25
     a36:	88 30       	cpi	r24, 0x08	; 8
     a38:	28 f4       	brcc	.+10     	; 0xa44 <main+0x5b8>
      PORT_CTL(DATA_IN[3]-48-1, 1);
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	d4 dc       	rcall	.-1624   	; 0x3e6 <PORT_CTL>
      printPGMStr(STR_NR_Port);
     a3e:	8d ea       	ldi	r24, 0xAD	; 173
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	7c c0       	rjmp	.+248    	; 0xb3c <main+0x6b0>
      printPGMStr(STR_Enabled);
      return;
    }else if(DATA_IN[3] == 'A'){
     a44:	91 34       	cpi	r25, 0x41	; 65
     a46:	29 f5       	brne	.+74     	; 0xa92 <main+0x606>
     a48:	c1 2c       	mov	r12, r1
     a4a:	d1 2c       	mov	r13, r1
      for(uint8_t i = 0; i < 8; i++){
        PORT_CTL(i, 1);
        printPGMStr(STR_NR_Port);
        fprintf(&USBSerialStream, "%i ", i);
     a4c:	5f e5       	ldi	r21, 0x5F	; 95
     a4e:	a5 2e       	mov	r10, r21
     a50:	51 e0       	ldi	r21, 0x01	; 1
     a52:	b5 2e       	mov	r11, r21
      printPGMStr(STR_NR_Port);
      printPGMStr(STR_Enabled);
      return;
    }else if(DATA_IN[3] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
        PORT_CTL(i, 1);
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	8c 2d       	mov	r24, r12
     a58:	c6 dc       	rcall	.-1652   	; 0x3e6 <PORT_CTL>
        printPGMStr(STR_NR_Port);
     a5a:	8d ea       	ldi	r24, 0xAD	; 173
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	87 dc       	rcall	.-1778   	; 0x36e <printPGMStr>
        fprintf(&USBSerialStream, "%i ", i);
     a60:	df 92       	push	r13
     a62:	cf 92       	push	r12
     a64:	1f 93       	push	r17
     a66:	0f 93       	push	r16
     a68:	bf 92       	push	r11
     a6a:	af 92       	push	r10
     a6c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
        printPGMStr(STR_Enabled);
     a70:	85 ea       	ldi	r24, 0xA5	; 165
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	7c dc       	rcall	.-1800   	; 0x36e <printPGMStr>
     a76:	3f ef       	ldi	r19, 0xFF	; 255
     a78:	c3 1a       	sub	r12, r19
     a7a:	d3 0a       	sbc	r13, r19
      PORT_CTL(DATA_IN[3]-48-1, 1);
      printPGMStr(STR_NR_Port);
      printPGMStr(STR_Enabled);
      return;
    }else if(DATA_IN[3] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	88 e0       	ldi	r24, 0x08	; 8
     a8a:	c8 16       	cp	r12, r24
     a8c:	d1 04       	cpc	r13, r1
     a8e:	11 f7       	brne	.-60     	; 0xa54 <main+0x5c8>
     a90:	31 c1       	rjmp	.+610    	; 0xcf4 <main+0x868>
        printPGMStr(STR_Enabled);
      }
      return;
    }
  }
  if(strncmp_P(DATA_IN, PSTR("POFF"), 4) == 0){
     a92:	44 e0       	ldi	r20, 0x04	; 4
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	61 e3       	ldi	r22, 0x31	; 49
     a98:	71 e0       	ldi	r23, 0x01	; 1
     a9a:	89 e7       	ldi	r24, 0x79	; 121
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     aa2:	89 2b       	or	r24, r25
     aa4:	91 f5       	brne	.+100    	; 0xb0a <main+0x67e>
    if(DATA_IN[4] >= 49 && DATA_IN[4] <= 56){
     aa6:	90 91 7d 01 	lds	r25, 0x017D
     aaa:	8f ec       	ldi	r24, 0xCF	; 207
     aac:	89 0f       	add	r24, r25
     aae:	88 30       	cpi	r24, 0x08	; 8
     ab0:	28 f4       	brcc	.+10     	; 0xabc <main+0x630>
      PORT_CTL(DATA_IN[4]-48-1, 0);
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	98 dc       	rcall	.-1744   	; 0x3e6 <PORT_CTL>
      printPGMStr(STR_NR_Port);
     ab6:	8d ea       	ldi	r24, 0xAD	; 173
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	8a c0       	rjmp	.+276    	; 0xbd0 <main+0x744>
      printPGMStr(STR_Disabled);
      return;
    }else if(DATA_IN[4] == 'A'){
     abc:	91 34       	cpi	r25, 0x41	; 65
     abe:	29 f5       	brne	.+74     	; 0xb0a <main+0x67e>
     ac0:	c1 2c       	mov	r12, r1
     ac2:	d1 2c       	mov	r13, r1
      for(uint8_t i = 0; i < 8; i++){
        PORT_CTL(i, 0);
        printPGMStr(STR_NR_Port);
        fprintf(&USBSerialStream, "%i ", i);
     ac4:	4f e5       	ldi	r20, 0x5F	; 95
     ac6:	a4 2e       	mov	r10, r20
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	b4 2e       	mov	r11, r20
      printPGMStr(STR_NR_Port);
      printPGMStr(STR_Disabled);
      return;
    }else if(DATA_IN[4] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
        PORT_CTL(i, 0);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	8c 2d       	mov	r24, r12
     ad0:	8a dc       	rcall	.-1772   	; 0x3e6 <PORT_CTL>
        printPGMStr(STR_NR_Port);
     ad2:	8d ea       	ldi	r24, 0xAD	; 173
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	4b dc       	rcall	.-1898   	; 0x36e <printPGMStr>
        fprintf(&USBSerialStream, "%i ", i);
     ad8:	df 92       	push	r13
     ada:	cf 92       	push	r12
     adc:	1f 93       	push	r17
     ade:	0f 93       	push	r16
     ae0:	bf 92       	push	r11
     ae2:	af 92       	push	r10
     ae4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
        printPGMStr(STR_Disabled);
     ae8:	8c e9       	ldi	r24, 0x9C	; 156
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	40 dc       	rcall	.-1920   	; 0x36e <printPGMStr>
     aee:	9f ef       	ldi	r25, 0xFF	; 255
     af0:	c9 1a       	sub	r12, r25
     af2:	d9 0a       	sbc	r13, r25
      PORT_CTL(DATA_IN[4]-48-1, 0);
      printPGMStr(STR_NR_Port);
      printPGMStr(STR_Disabled);
      return;
    }else if(DATA_IN[4] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	a8 e0       	ldi	r26, 0x08	; 8
     b02:	ca 16       	cp	r12, r26
     b04:	d1 04       	cpc	r13, r1
     b06:	11 f7       	brne	.-60     	; 0xacc <main+0x640>
     b08:	f5 c0       	rjmp	.+490    	; 0xcf4 <main+0x868>
        printPGMStr(STR_Disabled);
      }
      return;
    }
  }
  if(strncmp_P(DATA_IN, PSTR("PDEFON"), 6) == 0){
     b0a:	46 e0       	ldi	r20, 0x06	; 6
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	6a e2       	ldi	r22, 0x2A	; 42
     b10:	71 e0       	ldi	r23, 0x01	; 1
     b12:	89 e7       	ldi	r24, 0x79	; 121
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     b1a:	89 2b       	or	r24, r25
     b1c:	09 f0       	breq	.+2      	; 0xb20 <main+0x694>
     b1e:	40 c0       	rjmp	.+128    	; 0xba0 <main+0x714>
    if(DATA_IN[6] >= 49 && DATA_IN[6] <= 56){
     b20:	e0 91 7f 01 	lds	r30, 0x017F
     b24:	8f ec       	ldi	r24, 0xCF	; 207
     b26:	8e 0f       	add	r24, r30
     b28:	88 30       	cpi	r24, 0x08	; 8
     b2a:	60 f4       	brcc	.+24     	; 0xb44 <main+0x6b8>
      PORT_DEF[DATA_IN[6]-48-1] = 1;
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	e8 59       	subi	r30, 0x98	; 152
     b30:	fe 4f       	sbci	r31, 0xFE	; 254
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 83       	st	Z, r24
      EEPROM_Write_Port_Defaults();
     b36:	3a dc       	rcall	.-1932   	; 0x3ac <EEPROM_Write_Port_Defaults>
      printPGMStr(STR_Port_Default);
     b38:	8f e7       	ldi	r24, 0x7F	; 127
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	18 dc       	rcall	.-2000   	; 0x36e <printPGMStr>
      printPGMStr(STR_Enabled);
     b3e:	85 ea       	ldi	r24, 0xA5	; 165
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	d7 c0       	rjmp	.+430    	; 0xcf2 <main+0x866>
      return;
    }else if(DATA_IN[6] == 'A'){
     b44:	e1 34       	cpi	r30, 0x41	; 65
     b46:	61 f5       	brne	.+88     	; 0xba0 <main+0x714>
     b48:	29 e9       	ldi	r18, 0x99	; 153
     b4a:	82 2e       	mov	r8, r18
     b4c:	21 e0       	ldi	r18, 0x01	; 1
     b4e:	92 2e       	mov	r9, r18
     b50:	c1 2c       	mov	r12, r1
     b52:	d1 2c       	mov	r13, r1
      for(uint8_t i = 0; i < 8; i++){
        PORT_DEF[i] = 1;
     b54:	77 24       	eor	r7, r7
     b56:	73 94       	inc	r7
        printPGMStr(STR_Port_Default);
        fprintf(&USBSerialStream, "%i ", i);
     b58:	3f e5       	ldi	r19, 0x5F	; 95
     b5a:	a3 2e       	mov	r10, r19
     b5c:	31 e0       	ldi	r19, 0x01	; 1
     b5e:	b3 2e       	mov	r11, r19
      printPGMStr(STR_Port_Default);
      printPGMStr(STR_Enabled);
      return;
    }else if(DATA_IN[6] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
        PORT_DEF[i] = 1;
     b60:	f4 01       	movw	r30, r8
     b62:	71 92       	st	Z+, r7
     b64:	4f 01       	movw	r8, r30
        printPGMStr(STR_Port_Default);
     b66:	8f e7       	ldi	r24, 0x7F	; 127
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	01 dc       	rcall	.-2046   	; 0x36e <printPGMStr>
        fprintf(&USBSerialStream, "%i ", i);
     b6c:	df 92       	push	r13
     b6e:	cf 92       	push	r12
     b70:	1f 93       	push	r17
     b72:	0f 93       	push	r16
     b74:	bf 92       	push	r11
     b76:	af 92       	push	r10
     b78:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
        printPGMStr(STR_Enabled);
     b7c:	85 ea       	ldi	r24, 0xA5	; 165
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	f6 db       	rcall	.-2068   	; 0x36e <printPGMStr>
     b82:	ff ef       	ldi	r31, 0xFF	; 255
     b84:	cf 1a       	sub	r12, r31
     b86:	df 0a       	sbc	r13, r31
      EEPROM_Write_Port_Defaults();
      printPGMStr(STR_Port_Default);
      printPGMStr(STR_Enabled);
      return;
    }else if(DATA_IN[6] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	28 e0       	ldi	r18, 0x08	; 8
     b96:	c2 16       	cp	r12, r18
     b98:	d1 04       	cpc	r13, r1
     b9a:	11 f7       	brne	.-60     	; 0xb60 <main+0x6d4>
        PORT_DEF[i] = 1;
        printPGMStr(STR_Port_Default);
        fprintf(&USBSerialStream, "%i ", i);
        printPGMStr(STR_Enabled);
      }
      EEPROM_Write_Port_Defaults();
     b9c:	07 dc       	rcall	.-2034   	; 0x3ac <EEPROM_Write_Port_Defaults>
     b9e:	aa c0       	rjmp	.+340    	; 0xcf4 <main+0x868>
      return;
    }
  }
  if(strncmp_P(DATA_IN, PSTR("PDEFOFF"), 7) == 0){
     ba0:	47 e0       	ldi	r20, 0x07	; 7
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	62 e2       	ldi	r22, 0x22	; 34
     ba6:	71 e0       	ldi	r23, 0x01	; 1
     ba8:	89 e7       	ldi	r24, 0x79	; 121
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     bb0:	89 2b       	or	r24, r25
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <main+0x72a>
     bb4:	3c c0       	rjmp	.+120    	; 0xc2e <main+0x7a2>
    if(DATA_IN[7] >= 49 && DATA_IN[7] <= 56){
     bb6:	e0 91 80 01 	lds	r30, 0x0180
     bba:	8f ec       	ldi	r24, 0xCF	; 207
     bbc:	8e 0f       	add	r24, r30
     bbe:	88 30       	cpi	r24, 0x08	; 8
     bc0:	58 f4       	brcc	.+22     	; 0xbd8 <main+0x74c>
      PORT_DEF[DATA_IN[7]-48-1] = 0;
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e8 59       	subi	r30, 0x98	; 152
     bc6:	fe 4f       	sbci	r31, 0xFE	; 254
     bc8:	10 82       	st	Z, r1
      EEPROM_Write_Port_Defaults();
     bca:	f0 db       	rcall	.-2080   	; 0x3ac <EEPROM_Write_Port_Defaults>
      printPGMStr(STR_Port_Default);
     bcc:	8f e7       	ldi	r24, 0x7F	; 127
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	ce db       	rcall	.-2148   	; 0x36e <printPGMStr>
      printPGMStr(STR_Disabled);
     bd2:	8c e9       	ldi	r24, 0x9C	; 156
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	8d c0       	rjmp	.+282    	; 0xcf2 <main+0x866>
      return;
    }else if(DATA_IN[7] == 'A'){
     bd8:	e1 34       	cpi	r30, 0x41	; 65
     bda:	49 f5       	brne	.+82     	; 0xc2e <main+0x7a2>
     bdc:	89 e9       	ldi	r24, 0x99	; 153
     bde:	88 2e       	mov	r8, r24
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	98 2e       	mov	r9, r24
     be4:	c1 2c       	mov	r12, r1
     be6:	d1 2c       	mov	r13, r1
      for(uint8_t i = 0; i < 8; i++){
        PORT_DEF[i] = 0;
        printPGMStr(STR_Port_Default);
        fprintf(&USBSerialStream, "%i ", i);
     be8:	9f e5       	ldi	r25, 0x5F	; 95
     bea:	a9 2e       	mov	r10, r25
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	b9 2e       	mov	r11, r25
      printPGMStr(STR_Port_Default);
      printPGMStr(STR_Disabled);
      return;
    }else if(DATA_IN[7] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
        PORT_DEF[i] = 0;
     bf0:	d4 01       	movw	r26, r8
     bf2:	1d 92       	st	X+, r1
     bf4:	4d 01       	movw	r8, r26
        printPGMStr(STR_Port_Default);
     bf6:	8f e7       	ldi	r24, 0x7F	; 127
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	b9 db       	rcall	.-2190   	; 0x36e <printPGMStr>
        fprintf(&USBSerialStream, "%i ", i);
     bfc:	df 92       	push	r13
     bfe:	cf 92       	push	r12
     c00:	1f 93       	push	r17
     c02:	0f 93       	push	r16
     c04:	bf 92       	push	r11
     c06:	af 92       	push	r10
     c08:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
        printPGMStr(STR_Disabled);
     c0c:	8c e9       	ldi	r24, 0x9C	; 156
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	ae db       	rcall	.-2212   	; 0x36e <printPGMStr>
     c12:	bf ef       	ldi	r27, 0xFF	; 255
     c14:	cb 1a       	sub	r12, r27
     c16:	db 0a       	sbc	r13, r27
      EEPROM_Write_Port_Defaults();
      printPGMStr(STR_Port_Default);
      printPGMStr(STR_Disabled);
      return;
    }else if(DATA_IN[7] == 'A'){
      for(uint8_t i = 0; i < 8; i++){
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	e8 e0       	ldi	r30, 0x08	; 8
     c26:	ce 16       	cp	r12, r30
     c28:	d1 04       	cpc	r13, r1
     c2a:	11 f7       	brne	.-60     	; 0xbf0 <main+0x764>
     c2c:	b7 cf       	rjmp	.-146    	; 0xb9c <main+0x710>
      }
      EEPROM_Write_Port_Defaults();
      return;
    }
  }
  if(strncmp_P(DATA_IN, PSTR("P8SENSEV"), 8) == 0){
     c2e:	48 e0       	ldi	r20, 0x08	; 8
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	69 e1       	ldi	r22, 0x19	; 25
     c34:	71 e0       	ldi	r23, 0x01	; 1
     c36:	89 e7       	ldi	r24, 0x79	; 121
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     c3e:	89 2b       	or	r24, r25
     c40:	71 f4       	brne	.+28     	; 0xc5e <main+0x7d2>
  eeprom_update_float((float*)(EEPROM_OFFSET_REF_V), REF_V);
}

// Write the Port 8 Sense mode to EEPROM
static inline void EEPROM_Write_P8_Sense(uint8_t mode){
  eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P8_SENSE), mode);
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	8c e0       	ldi	r24, 0x0C	; 12
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 a4 13 	call	0x2748	; 0x2748 <__eeupd_byte_m16u2>
  PORT8_SENSE = mode;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 a1 01 	sts	0x01A1, r24
      return;
    }
  }
  if(strncmp_P(DATA_IN, PSTR("P8SENSEV"), 8) == 0){
    EEPROM_Write_P8_Sense(1);
    printPGMStr(STR_Port_8_Sense);
     c52:	8f e6       	ldi	r24, 0x6F	; 111
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	8b db       	rcall	.-2282   	; 0x36e <printPGMStr>
    printPGMStr(PSTR("VOLTAGE"));
     c58:	81 e1       	ldi	r24, 0x11	; 17
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	4a c0       	rjmp	.+148    	; 0xcf2 <main+0x866>
    return;
  }
  if(strncmp_P(DATA_IN, PSTR("P8SENSEI"), 8) == 0){
     c5e:	48 e0       	ldi	r20, 0x08	; 8
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	68 e0       	ldi	r22, 0x08	; 8
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	89 e7       	ldi	r24, 0x79	; 121
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     c6e:	89 2b       	or	r24, r25
     c70:	69 f4       	brne	.+26     	; 0xc8c <main+0x800>
  eeprom_update_float((float*)(EEPROM_OFFSET_REF_V), REF_V);
}

// Write the Port 8 Sense mode to EEPROM
static inline void EEPROM_Write_P8_Sense(uint8_t mode){
  eeprom_update_byte((uint8_t*)(EEPROM_OFFSET_P8_SENSE), mode);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	8c e0       	ldi	r24, 0x0C	; 12
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 a4 13 	call	0x2748	; 0x2748 <__eeupd_byte_m16u2>
  PORT8_SENSE = mode;
     c7c:	10 92 a1 01 	sts	0x01A1, r1
    printPGMStr(PSTR("VOLTAGE"));
    return;
  }
  if(strncmp_P(DATA_IN, PSTR("P8SENSEI"), 8) == 0){
    EEPROM_Write_P8_Sense(0);
    printPGMStr(STR_Port_8_Sense);
     c80:	8f e6       	ldi	r24, 0x6F	; 111
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	74 db       	rcall	.-2328   	; 0x36e <printPGMStr>
    printPGMStr(PSTR("CURRENT"));
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	33 c0       	rjmp	.+102    	; 0xcf2 <main+0x866>
    return;
  }
  if(strncmp_P(DATA_IN, PSTR("SETVREF"), 7) == 0){
     c8c:	47 e0       	ldi	r20, 0x07	; 7
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	68 ef       	ldi	r22, 0xF8	; 248
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	89 e7       	ldi	r24, 0x79	; 121
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 a9 12 	call	0x2552	; 0x2552 <strncmp_P>
     c9c:	89 2b       	or	r24, r25
     c9e:	39 f5       	brne	.+78     	; 0xcee <main+0x862>
    if(DATA_IN_POS > 7){
     ca0:	80 91 5a 01 	lds	r24, 0x015A
     ca4:	88 30       	cpi	r24, 0x08	; 8
     ca6:	18 f1       	brcs	.+70     	; 0xcee <main+0x862>
      char temp_str[5];
      strncpy(temp_str, DATA_IN+7, 4);
     ca8:	44 e0       	ldi	r20, 0x04	; 4
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e8       	ldi	r22, 0x80	; 128
     cae:	71 e0       	ldi	r23, 0x01	; 1
     cb0:	c7 01       	movw	r24, r14
     cb2:	0e 94 c2 12 	call	0x2584	; 0x2584 <strncpy>
      temp_str[4] = '\0';
     cb6:	1d 82       	std	Y+5, r1	; 0x05
      uint16_t temp_int = atoi(temp_str);
     cb8:	c7 01       	movw	r24, r14
     cba:	0e 94 ab 11 	call	0x2356	; 0x2356 <atoi>
      fprintf(&USBSerialStream, "\r\n%s %i %i", temp_str, DATA_IN_POS, temp_int);
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	80 91 5a 01 	lds	r24, 0x015A
     cc6:	1f 92       	push	r1
     cc8:	8f 93       	push	r24
     cca:	ff 92       	push	r15
     ccc:	ef 92       	push	r14
     cce:	8f e4       	ldi	r24, 0x4F	; 79
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	8f e5       	ldi	r24, 0x5F	; 95
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 e6 12 	call	0x25cc	; 0x25cc <fprintf>
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <main+0x868>
      return;
    }
  }
  printPGMStr(PSTR("\r\nUNRECOGNIZED COMMAND"));
     cee:	81 ee       	ldi	r24, 0xE1	; 225
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	3d db       	rcall	.-2438   	; 0x36e <printPGMStr>
        
        case '\n':
        case '\r':
          // Newline, Parse our command
          INPUT_Parse();
          INPUT_Clear();
     cf4:	4f db       	rcall	.-2402   	; 0x394 <INPUT_Clear>
          break;
     cf6:	0c c0       	rjmp	.+24     	; 0xd10 <main+0x884>
        
        default:
          // Normal char buffering
          if(DATA_IN_POS < 31){
     cf8:	80 91 5a 01 	lds	r24, 0x015A
     cfc:	8f 31       	cpi	r24, 0x1F	; 31
     cfe:	d0 f7       	brcc	.-12     	; 0xcf4 <main+0x868>
            DATA_IN[DATA_IN_POS] = BYTE_IN;
     d00:	e8 2f       	mov	r30, r24
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	e7 58       	subi	r30, 0x87	; 135
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	c0 82       	st	Z, r12
            DATA_IN_POS++;
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	80 93 5a 01 	sts	0x015A, r24
static inline void LED_CTL(uint8_t led, uint8_t state){
  if(led == 1){
    if(state == 1){
      PORTD |= (1 << LED1);
    }else{
      PORTD &= ~(1 << LED1);
     d10:	5c 98       	cbi	0x0b, 4	; 11
          break;
      }
    }
    
    LED_CTL(1, 0);
    run_lufa();
     d12:	63 db       	rcall	.-2362   	; 0x3da <run_lufa>
  }
     d14:	c7 cc       	rjmp	.-1650   	; 0x6a4 <main+0x218>

00000d16 <EVENT_USB_Device_Connect>:
  CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
  USB_USBTask();
}

// Event handler for the library USB Connection event.
void EVENT_USB_Device_Connect(void){
     d16:	08 95       	ret

00000d18 <EVENT_USB_Device_Disconnect>:
  // Turn on the first LED to indicate we're enumerated.
  //PORTD = PORTD & 0b11111110;
}

// Event handler for the library USB Disconnection event.
void EVENT_USB_Device_Disconnect(void){
     d18:	08 95       	ret

00000d1a <EVENT_USB_Device_ConfigurationChanged>:
}

// Event handler for the library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void){
  bool ConfigSuccess = true;
  ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	58 c4       	rjmp	.+2224   	; 0x15d0 <CDC_Device_ConfigureEndpoints>

00000d20 <EVENT_USB_Device_ControlRequest>:
  //}
}

// Event handler for the library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void){
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	3b c5       	rjmp	.+2678   	; 0x179c <CDC_Device_ProcessControlRequest>

00000d26 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     d26:	29 2f       	mov	r18, r25
     d28:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	59 f0       	breq	.+22     	; 0xd46 <CALLBACK_USB_GetDescriptor+0x20>
     d30:	23 30       	cpi	r18, 0x03	; 3
     d32:	31 05       	cpc	r19, r1
     d34:	69 f0       	breq	.+26     	; 0xd50 <CALLBACK_USB_GetDescriptor+0x2a>
     d36:	21 30       	cpi	r18, 0x01	; 1
     d38:	31 05       	cpc	r19, r1
     d3a:	f9 f4       	brne	.+62     	; 0xd7a <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     d3c:	82 e1       	ldi	r24, 0x12	; 18
     d3e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     d40:	2f e1       	ldi	r18, 0x1F	; 31
     d42:	32 e0       	ldi	r19, 0x02	; 2
     d44:	1e c0       	rjmp	.+60     	; 0xd82 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     d46:	8e e3       	ldi	r24, 0x3E	; 62
     d48:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     d4a:	21 ee       	ldi	r18, 0xE1	; 225
     d4c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     d4e:	19 c0       	rjmp	.+50     	; 0xd82 <CALLBACK_USB_GetDescriptor+0x5c>
     d50:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	91 05       	cpc	r25, r1
     d56:	41 f0       	breq	.+16     	; 0xd68 <CALLBACK_USB_GetDescriptor+0x42>
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	91 05       	cpc	r25, r1
     d5c:	41 f0       	breq	.+16     	; 0xd6e <CALLBACK_USB_GetDescriptor+0x48>
     d5e:	89 2b       	or	r24, r25
     d60:	61 f4       	brne	.+24     	; 0xd7a <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     d62:	ed ed       	ldi	r30, 0xDD	; 221
     d64:	f1 e0       	ldi	r31, 0x01	; 1
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     d68:	ef ec       	ldi	r30, 0xCF	; 207
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     d6e:	e5 eb       	ldi	r30, 0xB5	; 181
     d70:	f1 e0       	ldi	r31, 0x01	; 1
     d72:	84 91       	lpm	r24, Z
     d74:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     d76:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     d82:	fa 01       	movw	r30, r20
     d84:	31 83       	std	Z+1, r19	; 0x01
     d86:	20 83       	st	Z, r18
	return Size;
}
     d88:	08 95       	ret

00000d8a <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d8a:	20 91 ad 01 	lds	r18, 0x01AD
     d8e:	30 91 ae 01 	lds	r19, 0x01AE
     d92:	26 17       	cp	r18, r22
     d94:	37 07       	cpc	r19, r23
     d96:	48 f0       	brcs	.+18     	; 0xdaa <Endpoint_Write_Control_Stream_LE+0x20>
     d98:	61 15       	cp	r22, r1
     d9a:	71 05       	cpc	r23, r1
     d9c:	39 f4       	brne	.+14     	; 0xdac <Endpoint_Write_Control_Stream_LE+0x22>
     d9e:	20 91 e8 00 	lds	r18, 0x00E8
     da2:	2e 77       	andi	r18, 0x7E	; 126
     da4:	20 93 e8 00 	sts	0x00E8, r18
     da8:	01 c0       	rjmp	.+2      	; 0xdac <Endpoint_Write_Control_Stream_LE+0x22>
     daa:	b9 01       	movw	r22, r18
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	61 15       	cp	r22, r1
     db0:	71 05       	cpc	r23, r1
     db2:	d1 f1       	breq	.+116    	; 0xe28 <Endpoint_Write_Control_Stream_LE+0x9e>
     db4:	30 91 a6 01 	lds	r19, 0x01A6
     db8:	33 23       	and	r19, r19
     dba:	09 f4       	brne	.+2      	; 0xdbe <Endpoint_Write_Control_Stream_LE+0x34>
     dbc:	43 c0       	rjmp	.+134    	; 0xe44 <Endpoint_Write_Control_Stream_LE+0xba>
     dbe:	35 30       	cpi	r19, 0x05	; 5
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <Endpoint_Write_Control_Stream_LE+0x3a>
     dc2:	42 c0       	rjmp	.+132    	; 0xe48 <Endpoint_Write_Control_Stream_LE+0xbe>
     dc4:	30 91 e8 00 	lds	r19, 0x00E8
     dc8:	33 fd       	sbrc	r19, 3
     dca:	40 c0       	rjmp	.+128    	; 0xe4c <Endpoint_Write_Control_Stream_LE+0xc2>
     dcc:	30 91 e8 00 	lds	r19, 0x00E8
     dd0:	32 ff       	sbrs	r19, 2
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <Endpoint_Write_Control_Stream_LE+0x56>
     dd4:	80 91 e8 00 	lds	r24, 0x00E8
     dd8:	82 ff       	sbrs	r24, 2
     dda:	29 c0       	rjmp	.+82     	; 0xe2e <Endpoint_Write_Control_Stream_LE+0xa4>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	08 95       	ret
     de0:	30 91 e8 00 	lds	r19, 0x00E8
     de4:	30 ff       	sbrs	r19, 0
     de6:	e3 cf       	rjmp	.-58     	; 0xdae <Endpoint_Write_Control_Stream_LE+0x24>
     de8:	20 91 f2 00 	lds	r18, 0x00F2
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	fc 01       	movw	r30, r24
     df0:	28 1b       	sub	r18, r24
     df2:	39 0b       	sbc	r19, r25
     df4:	cf 01       	movw	r24, r30
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	61 15       	cp	r22, r1
     dfc:	71 05       	cpc	r23, r1
     dfe:	49 f0       	breq	.+18     	; 0xe12 <Endpoint_Write_Control_Stream_LE+0x88>
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	91 05       	cpc	r25, r1
     e04:	30 f4       	brcc	.+12     	; 0xe12 <Endpoint_Write_Control_Stream_LE+0x88>
     e06:	81 91       	ld	r24, Z+
     e08:	80 93 f1 00 	sts	0x00F1, r24
     e0c:	61 50       	subi	r22, 0x01	; 1
     e0e:	71 09       	sbc	r23, r1
     e10:	f1 cf       	rjmp	.-30     	; 0xdf4 <Endpoint_Write_Control_Stream_LE+0x6a>
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	08 97       	sbiw	r24, 0x08	; 8
     e16:	09 f0       	breq	.+2      	; 0xe1a <Endpoint_Write_Control_Stream_LE+0x90>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
     e1e:	8e 77       	andi	r24, 0x7E	; 126
     e20:	80 93 e8 00 	sts	0x00E8, r24
     e24:	cf 01       	movw	r24, r30
     e26:	c3 cf       	rjmp	.-122    	; 0xdae <Endpoint_Write_Control_Stream_LE+0x24>
     e28:	21 11       	cpse	r18, r1
     e2a:	c4 cf       	rjmp	.-120    	; 0xdb4 <Endpoint_Write_Control_Stream_LE+0x2a>
     e2c:	d3 cf       	rjmp	.-90     	; 0xdd4 <Endpoint_Write_Control_Stream_LE+0x4a>
     e2e:	80 91 a6 01 	lds	r24, 0x01A6
     e32:	88 23       	and	r24, r24
     e34:	39 f0       	breq	.+14     	; 0xe44 <Endpoint_Write_Control_Stream_LE+0xba>
     e36:	85 30       	cpi	r24, 0x05	; 5
     e38:	39 f0       	breq	.+14     	; 0xe48 <Endpoint_Write_Control_Stream_LE+0xbe>
     e3a:	80 91 e8 00 	lds	r24, 0x00E8
     e3e:	83 ff       	sbrs	r24, 3
     e40:	c9 cf       	rjmp	.-110    	; 0xdd4 <Endpoint_Write_Control_Stream_LE+0x4a>
     e42:	04 c0       	rjmp	.+8      	; 0xe4c <Endpoint_Write_Control_Stream_LE+0xc2>
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	08 95       	ret
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	08 95       	ret
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	08 95       	ret

00000e50 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e50:	20 91 ad 01 	lds	r18, 0x01AD
     e54:	30 91 ae 01 	lds	r19, 0x01AE
     e58:	26 17       	cp	r18, r22
     e5a:	37 07       	cpc	r19, r23
     e5c:	48 f0       	brcs	.+18     	; 0xe70 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e5e:	61 15       	cp	r22, r1
     e60:	71 05       	cpc	r23, r1
     e62:	39 f4       	brne	.+14     	; 0xe72 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e64:	20 91 e8 00 	lds	r18, 0x00E8
     e68:	2e 77       	andi	r18, 0x7E	; 126
     e6a:	20 93 e8 00 	sts	0x00E8, r18
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <Endpoint_Write_Control_PStream_LE+0x22>
     e70:	b9 01       	movw	r22, r18

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     e72:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e74:	61 15       	cp	r22, r1
     e76:	71 05       	cpc	r23, r1
     e78:	d9 f1       	breq	.+118    	; 0xef0 <Endpoint_Write_Control_PStream_LE+0xa0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e7a:	30 91 a6 01 	lds	r19, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e7e:	33 23       	and	r19, r19
     e80:	09 f4       	brne	.+2      	; 0xe84 <Endpoint_Write_Control_PStream_LE+0x34>
     e82:	44 c0       	rjmp	.+136    	; 0xf0c <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e84:	35 30       	cpi	r19, 0x05	; 5
     e86:	09 f4       	brne	.+2      	; 0xe8a <Endpoint_Write_Control_PStream_LE+0x3a>
     e88:	43 c0       	rjmp	.+134    	; 0xf10 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e8a:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e8e:	33 fd       	sbrc	r19, 3
     e90:	41 c0       	rjmp	.+130    	; 0xf14 <Endpoint_Write_Control_PStream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e92:	30 91 e8 00 	lds	r19, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e96:	32 ff       	sbrs	r19, 2
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <Endpoint_Write_Control_PStream_LE+0x56>
     e9a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e9e:	82 ff       	sbrs	r24, 2
     ea0:	2a c0       	rjmp	.+84     	; 0xef6 <Endpoint_Write_Control_PStream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ea6:	30 91 e8 00 	lds	r19, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     eaa:	30 ff       	sbrs	r19, 0
     eac:	e3 cf       	rjmp	.-58     	; 0xe74 <Endpoint_Write_Control_PStream_LE+0x24>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     eae:	20 91 f2 00 	lds	r18, 0x00F2
     eb2:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     eb4:	fc 01       	movw	r30, r24
     eb6:	28 1b       	sub	r18, r24
     eb8:	39 0b       	sbc	r19, r25
     eba:	c9 01       	movw	r24, r18
     ebc:	8e 0f       	add	r24, r30
     ebe:	9f 1f       	adc	r25, r31
     ec0:	61 15       	cp	r22, r1
     ec2:	71 05       	cpc	r23, r1
     ec4:	51 f0       	breq	.+20     	; 0xeda <Endpoint_Write_Control_PStream_LE+0x8a>
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	91 05       	cpc	r25, r1
     eca:	38 f4       	brcc	.+14     	; 0xeda <Endpoint_Write_Control_PStream_LE+0x8a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ecc:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ece:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ed2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     ed4:	61 50       	subi	r22, 0x01	; 1
     ed6:	71 09       	sbc	r23, r1
     ed8:	f0 cf       	rjmp	.-32     	; 0xeba <Endpoint_Write_Control_PStream_LE+0x6a>
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	08 97       	sbiw	r24, 0x08	; 8
     ede:	09 f0       	breq	.+2      	; 0xee2 <Endpoint_Write_Control_PStream_LE+0x92>
     ee0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee2:	80 91 e8 00 	lds	r24, 0x00E8
     ee6:	8e 77       	andi	r24, 0x7E	; 126
     ee8:	80 93 e8 00 	sts	0x00E8, r24
     eec:	cf 01       	movw	r24, r30
     eee:	c2 cf       	rjmp	.-124    	; 0xe74 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ef0:	21 11       	cpse	r18, r1
     ef2:	c3 cf       	rjmp	.-122    	; 0xe7a <Endpoint_Write_Control_PStream_LE+0x2a>
     ef4:	d2 cf       	rjmp	.-92     	; 0xe9a <Endpoint_Write_Control_PStream_LE+0x4a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ef6:	80 91 a6 01 	lds	r24, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     efa:	88 23       	and	r24, r24
     efc:	39 f0       	breq	.+14     	; 0xf0c <Endpoint_Write_Control_PStream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     efe:	85 30       	cpi	r24, 0x05	; 5
     f00:	39 f0       	breq	.+14     	; 0xf10 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f02:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f06:	83 ff       	sbrs	r24, 3
     f08:	c8 cf       	rjmp	.-112    	; 0xe9a <Endpoint_Write_Control_PStream_LE+0x4a>
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <Endpoint_Write_Control_PStream_LE+0xc4>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     f14:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f16:	08 95       	ret

00000f18 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     f18:	98 2f       	mov	r25, r24
     f1a:	95 30       	cpi	r25, 0x05	; 5
     f1c:	58 f5       	brcc	.+86     	; 0xf74 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     f1e:	90 93 e9 00 	sts	0x00E9, r25
     f22:	98 17       	cp	r25, r24
     f24:	39 f0       	breq	.+14     	; 0xf34 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     f26:	70 91 ec 00 	lds	r23, 0x00EC
     f2a:	20 91 ed 00 	lds	r18, 0x00ED
     f2e:	50 91 f0 00 	lds	r21, 0x00F0
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <Endpoint_ConfigureEndpoint_Prv+0x22>
     f34:	24 2f       	mov	r18, r20
     f36:	76 2f       	mov	r23, r22
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	21 ff       	sbrs	r18, 1
     f3c:	19 c0       	rjmp	.+50     	; 0xf70 <Endpoint_ConfigureEndpoint_Prv+0x58>
     f3e:	30 91 eb 00 	lds	r19, 0x00EB
     f42:	3e 7f       	andi	r19, 0xFE	; 254
     f44:	30 93 eb 00 	sts	0x00EB, r19
     f48:	30 91 ed 00 	lds	r19, 0x00ED
     f4c:	3d 7f       	andi	r19, 0xFD	; 253
     f4e:	30 93 ed 00 	sts	0x00ED, r19
     f52:	30 91 eb 00 	lds	r19, 0x00EB
     f56:	31 60       	ori	r19, 0x01	; 1
     f58:	30 93 eb 00 	sts	0x00EB, r19
     f5c:	70 93 ec 00 	sts	0x00EC, r23
     f60:	20 93 ed 00 	sts	0x00ED, r18
     f64:	50 93 f0 00 	sts	0x00F0, r21
     f68:	20 91 ee 00 	lds	r18, 0x00EE
     f6c:	27 ff       	sbrs	r18, 7
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <Endpoint_ConfigureEndpoint_Prv+0x66>
     f70:	9f 5f       	subi	r25, 0xFF	; 255
     f72:	d3 cf       	rjmp	.-90     	; 0xf1a <Endpoint_ConfigureEndpoint_Prv+0x2>
     f74:	8f 70       	andi	r24, 0x0F	; 15
     f76:	80 93 e9 00 	sts	0x00E9, r24
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	08 95       	ret
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret

00000f82 <Endpoint_ConfigureEndpointTable>:
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	06 2f       	mov	r16, r22
     f8c:	ec 01       	movw	r28, r24
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	10 17       	cp	r17, r16
     f92:	69 f1       	breq	.+90     	; 0xfee <Endpoint_ConfigureEndpointTable+0x6c>
     f94:	98 81       	ld	r25, Y
     f96:	99 23       	and	r25, r25
     f98:	39 f1       	breq	.+78     	; 0xfe8 <Endpoint_ConfigureEndpointTable+0x66>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	e9 81       	ldd	r30, Y+1	; 0x01
     f9e:	fa 81       	ldd	r31, Y+2	; 0x02
     fa0:	6b 81       	ldd	r22, Y+3	; 0x03
     fa2:	89 2f       	mov	r24, r25
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	10 f0       	brcs	.+4      	; 0xfae <Endpoint_ConfigureEndpointTable+0x2c>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	21 c0       	rjmp	.+66     	; 0xff0 <Endpoint_ConfigureEndpointTable+0x6e>
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	10 f0       	brcs	.+4      	; 0xfb6 <Endpoint_ConfigureEndpointTable+0x34>
     fb2:	56 e0       	ldi	r21, 0x06	; 6
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <Endpoint_ConfigureEndpointTable+0x36>
     fb6:	52 e0       	ldi	r21, 0x02	; 2
     fb8:	28 e0       	ldi	r18, 0x08	; 8
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	2e 17       	cp	r18, r30
     fc0:	3f 07       	cpc	r19, r31
     fc2:	20 f4       	brcc	.+8      	; 0xfcc <Endpoint_ConfigureEndpointTable+0x4a>
     fc4:	4f 5f       	subi	r20, 0xFF	; 255
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	f9 cf       	rjmp	.-14     	; 0xfbe <Endpoint_ConfigureEndpointTable+0x3c>
     fcc:	42 95       	swap	r20
     fce:	40 7f       	andi	r20, 0xF0	; 240
     fd0:	45 2b       	or	r20, r21
     fd2:	99 1f       	adc	r25, r25
     fd4:	99 27       	eor	r25, r25
     fd6:	99 1f       	adc	r25, r25
     fd8:	62 95       	swap	r22
     fda:	66 0f       	add	r22, r22
     fdc:	66 0f       	add	r22, r22
     fde:	60 7c       	andi	r22, 0xC0	; 192
     fe0:	69 2b       	or	r22, r25
     fe2:	9a df       	rcall	.-204    	; 0xf18 <Endpoint_ConfigureEndpoint_Prv>
     fe4:	88 23       	and	r24, r24
     fe6:	09 f3       	breq	.-62     	; 0xfaa <Endpoint_ConfigureEndpointTable+0x28>
     fe8:	1f 5f       	subi	r17, 0xFF	; 255
     fea:	25 96       	adiw	r28, 0x05	; 5
     fec:	d1 cf       	rjmp	.-94     	; 0xf90 <Endpoint_ConfigureEndpointTable+0xe>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ffa:	80 91 a7 01 	lds	r24, 0x01A7
     ffe:	87 fd       	sbrc	r24, 7
    1000:	05 c0       	rjmp	.+10     	; 0x100c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1002:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1006:	80 ff       	sbrs	r24, 0
    1008:	0e c0       	rjmp	.+28     	; 0x1026 <Endpoint_ClearStatusStage+0x2c>
    100a:	12 c0       	rjmp	.+36     	; 0x1030 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    100c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1010:	82 fd       	sbrc	r24, 2
    1012:	05 c0       	rjmp	.+10     	; 0x101e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1014:	80 91 a6 01 	lds	r24, 0x01A6
    1018:	81 11       	cpse	r24, r1
    101a:	f8 cf       	rjmp	.-16     	; 0x100c <Endpoint_ClearStatusStage+0x12>
    101c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101e:	80 91 e8 00 	lds	r24, 0x00E8
    1022:	8b 77       	andi	r24, 0x7B	; 123
    1024:	08 c0       	rjmp	.+16     	; 0x1036 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1026:	80 91 a6 01 	lds	r24, 0x01A6
    102a:	81 11       	cpse	r24, r1
    102c:	ea cf       	rjmp	.-44     	; 0x1002 <Endpoint_ClearStatusStage+0x8>
    102e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1030:	80 91 e8 00 	lds	r24, 0x00E8
    1034:	8e 77       	andi	r24, 0x7E	; 126
    1036:	80 93 e8 00 	sts	0x00E8, r24
    103a:	08 95       	ret

0000103c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    103c:	80 91 e4 00 	lds	r24, 0x00E4
    1040:	90 91 e5 00 	lds	r25, 0x00E5
    1044:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1046:	20 91 ec 00 	lds	r18, 0x00EC
    104a:	20 ff       	sbrs	r18, 0
    104c:	21 c0       	rjmp	.+66     	; 0x1090 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    104e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1052:	20 fd       	sbrc	r18, 0
    1054:	21 c0       	rjmp	.+66     	; 0x1098 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1056:	20 91 a6 01 	lds	r18, 0x01A6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    105a:	22 23       	and	r18, r18
    105c:	89 f0       	breq	.+34     	; 0x1080 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    105e:	25 30       	cpi	r18, 0x05	; 5
    1060:	89 f0       	breq	.+34     	; 0x1084 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1062:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1066:	25 fd       	sbrc	r18, 5
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <Endpoint_WaitUntilReady+0x4c>
    106a:	20 91 e4 00 	lds	r18, 0x00E4
    106e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	39 f3       	breq	.-50     	; 0x1046 <Endpoint_WaitUntilReady+0xa>
    1078:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    107a:	41 f0       	breq	.+16     	; 0x108c <Endpoint_WaitUntilReady+0x50>
    107c:	c9 01       	movw	r24, r18
    107e:	e3 cf       	rjmp	.-58     	; 0x1046 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1090:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1094:	22 ff       	sbrs	r18, 2
    1096:	df cf       	rjmp	.-66     	; 0x1056 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret

0000109c <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    109c:	41 d0       	rcall	.+130    	; 0x1120 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    109e:	43 d0       	rcall	.+134    	; 0x1126 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    10a0:	80 91 d8 00 	lds	r24, 0x00D8
    10a4:	8f 77       	andi	r24, 0x7F	; 127
    10a6:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    10aa:	80 91 d8 00 	lds	r24, 0x00D8
    10ae:	80 68       	ori	r24, 0x80	; 128
    10b0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    10b4:	80 91 d8 00 	lds	r24, 0x00D8
    10b8:	8f 7d       	andi	r24, 0xDF	; 223
    10ba:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10c2:	86 e0       	ldi	r24, 0x06	; 6
    10c4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    10c6:	09 b4       	in	r0, 0x29	; 41
    10c8:	00 fe       	sbrs	r0, 0
    10ca:	fd cf       	rjmp	.-6      	; 0x10c6 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    10cc:	10 92 a6 01 	sts	0x01A6, r1
	USB_Device_ConfigurationNumber  = 0;
    10d0:	10 92 a2 01 	sts	0x01A2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    10d4:	10 92 a4 01 	sts	0x01A4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    10d8:	10 92 a3 01 	sts	0x01A3, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    10dc:	42 e0       	ldi	r20, 0x02	; 2
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	1a df       	rcall	.-460    	; 0xf18 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    10e4:	80 91 e1 00 	lds	r24, 0x00E1
    10e8:	8e 7f       	andi	r24, 0xFE	; 254
    10ea:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    10ee:	80 91 e2 00 	lds	r24, 0x00E2
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    10f8:	80 91 e2 00 	lds	r24, 0x00E2
    10fc:	88 60       	ori	r24, 0x08	; 8
    10fe:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1102:	80 91 e0 00 	lds	r24, 0x00E0
    1106:	8e 7f       	andi	r24, 0xFE	; 254
    1108:	80 93 e0 00 	sts	0x00E0, r24
    110c:	08 95       	ret

0000110e <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
    110e:	e3 e6       	ldi	r30, 0x63	; 99
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	8e 7f       	andi	r24, 0xFE	; 254
    1116:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 a5 01 	sts	0x01A5, r24

	USB_ResetInterface();
    111e:	be cf       	rjmp	.-132    	; 0x109c <USB_ResetInterface>

00001120 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1120:	10 92 e2 00 	sts	0x00E2, r1
    1124:	08 95       	ret

00001126 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1126:	10 92 e1 00 	sts	0x00E1, r1
    112a:	08 95       	ret

0000112c <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	11 24       	eor	r1, r1
    1136:	2f 93       	push	r18
    1138:	3f 93       	push	r19
    113a:	4f 93       	push	r20
    113c:	5f 93       	push	r21
    113e:	6f 93       	push	r22
    1140:	7f 93       	push	r23
    1142:	8f 93       	push	r24
    1144:	9f 93       	push	r25
    1146:	af 93       	push	r26
    1148:	bf 93       	push	r27
    114a:	ef 93       	push	r30
    114c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    114e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1152:	82 ff       	sbrs	r24, 2
    1154:	0a c0       	rjmp	.+20     	; 0x116a <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1156:	80 91 e2 00 	lds	r24, 0x00E2
    115a:	82 ff       	sbrs	r24, 2
    115c:	06 c0       	rjmp	.+12     	; 0x116a <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    115e:	80 91 e1 00 	lds	r24, 0x00E1
    1162:	8b 7f       	andi	r24, 0xFB	; 251
    1164:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1168:	16 d2       	rcall	.+1068   	; 0x1596 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    116a:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    116e:	80 ff       	sbrs	r24, 0
    1170:	17 c0       	rjmp	.+46     	; 0x11a0 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1172:	80 91 e2 00 	lds	r24, 0x00E2
    1176:	80 ff       	sbrs	r24, 0
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    117a:	80 91 e2 00 	lds	r24, 0x00E2
    117e:	8e 7f       	andi	r24, 0xFE	; 254
    1180:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1184:	80 91 e2 00 	lds	r24, 0x00E2
    1188:	80 61       	ori	r24, 0x10	; 16
    118a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    118e:	80 91 d8 00 	lds	r24, 0x00D8
    1192:	80 62       	ori	r24, 0x20	; 32
    1194:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1198:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    119a:	10 92 a6 01 	sts	0x01A6, r1
		EVENT_USB_Device_Disconnect();
    119e:	bc dd       	rcall	.-1160   	; 0xd18 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    11a0:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    11a4:	84 ff       	sbrs	r24, 4
    11a6:	2f c0       	rjmp	.+94     	; 0x1206 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    11a8:	80 91 e2 00 	lds	r24, 0x00E2
    11ac:	84 ff       	sbrs	r24, 4
    11ae:	2b c0       	rjmp	.+86     	; 0x1206 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    11b0:	84 e0       	ldi	r24, 0x04	; 4
    11b2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11b4:	86 e0       	ldi	r24, 0x06	; 6
    11b6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    11b8:	09 b4       	in	r0, 0x29	; 41
    11ba:	00 fe       	sbrs	r0, 0
    11bc:	fd cf       	rjmp	.-6      	; 0x11b8 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    11be:	80 91 d8 00 	lds	r24, 0x00D8
    11c2:	8f 7d       	andi	r24, 0xDF	; 223
    11c4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    11c8:	80 91 e1 00 	lds	r24, 0x00E1
    11cc:	8f 7e       	andi	r24, 0xEF	; 239
    11ce:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    11d2:	80 91 e2 00 	lds	r24, 0x00E2
    11d6:	8f 7e       	andi	r24, 0xEF	; 239
    11d8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    11dc:	80 91 e2 00 	lds	r24, 0x00E2
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    11e6:	80 91 a2 01 	lds	r24, 0x01A2
    11ea:	88 23       	and	r24, r24
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
    11ee:	84 e0       	ldi	r24, 0x04	; 4
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    11f2:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    11f6:	87 ff       	sbrs	r24, 7
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <__vector_11+0xd2>
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	01 c0       	rjmp	.+2      	; 0x1200 <__vector_11+0xd4>
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	80 93 a6 01 	sts	0x01A6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1204:	88 dd       	rcall	.-1264   	; 0xd16 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1206:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    120a:	83 ff       	sbrs	r24, 3
    120c:	27 c0       	rjmp	.+78     	; 0x125c <__vector_11+0x130>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    120e:	80 91 e2 00 	lds	r24, 0x00E2
    1212:	83 ff       	sbrs	r24, 3
    1214:	23 c0       	rjmp	.+70     	; 0x125c <__vector_11+0x130>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1216:	80 91 e1 00 	lds	r24, 0x00E1
    121a:	87 7f       	andi	r24, 0xF7	; 247
    121c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	80 93 a6 01 	sts	0x01A6, r24
		USB_Device_ConfigurationNumber = 0;
    1226:	10 92 a2 01 	sts	0x01A2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    122a:	80 91 e1 00 	lds	r24, 0x00E1
    122e:	8e 7f       	andi	r24, 0xFE	; 254
    1230:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1234:	80 91 e2 00 	lds	r24, 0x00E2
    1238:	8e 7f       	andi	r24, 0xFE	; 254
    123a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    123e:	80 91 e2 00 	lds	r24, 0x00E2
    1242:	80 61       	ori	r24, 0x10	; 16
    1244:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1248:	42 e0       	ldi	r20, 0x02	; 2
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	64 de       	rcall	.-824    	; 0xf18 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1250:	80 91 f0 00 	lds	r24, 0x00F0
    1254:	88 60       	ori	r24, 0x08	; 8
    1256:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    125a:	9d d1       	rcall	.+826    	; 0x1596 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    125c:	ff 91       	pop	r31
    125e:	ef 91       	pop	r30
    1260:	bf 91       	pop	r27
    1262:	af 91       	pop	r26
    1264:	9f 91       	pop	r25
    1266:	8f 91       	pop	r24
    1268:	7f 91       	pop	r23
    126a:	6f 91       	pop	r22
    126c:	5f 91       	pop	r21
    126e:	4f 91       	pop	r20
    1270:	3f 91       	pop	r19
    1272:	2f 91       	pop	r18
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	0f 90       	pop	r0
    127a:	1f 90       	pop	r1
    127c:	18 95       	reti

0000127e <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    127e:	1f 92       	push	r1
    1280:	0f 92       	push	r0
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	0f 92       	push	r0
    1286:	11 24       	eor	r1, r1
    1288:	2f 93       	push	r18
    128a:	3f 93       	push	r19
    128c:	4f 93       	push	r20
    128e:	5f 93       	push	r21
    1290:	6f 93       	push	r22
    1292:	7f 93       	push	r23
    1294:	8f 93       	push	r24
    1296:	9f 93       	push	r25
    1298:	af 93       	push	r26
    129a:	bf 93       	push	r27
    129c:	cf 93       	push	r28
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    12a2:	c0 91 e9 00 	lds	r28, 0x00E9
    12a6:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12a8:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12ac:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    12b0:	80 91 f0 00 	lds	r24, 0x00F0
    12b4:	87 7f       	andi	r24, 0xF7	; 247
    12b6:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    12ba:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    12bc:	1b d0       	rcall	.+54     	; 0x12f4 <USB_Device_ProcessControlRequest>
    12be:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    12c2:	80 91 f0 00 	lds	r24, 0x00F0
    12c6:	88 60       	ori	r24, 0x08	; 8
    12c8:	80 93 f0 00 	sts	0x00F0, r24
    12cc:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    12d0:	ff 91       	pop	r31
    12d2:	ef 91       	pop	r30
    12d4:	cf 91       	pop	r28
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	aa 97       	sbiw	r28, 0x2a	; 42
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	e7 ea       	ldi	r30, 0xA7	; 167
    130c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    130e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1312:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1314:	21 e0       	ldi	r18, 0x01	; 1
    1316:	ef 3a       	cpi	r30, 0xAF	; 175
    1318:	f2 07       	cpc	r31, r18
    131a:	c9 f7       	brne	.-14     	; 0x130e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    131c:	01 dd       	rcall	.-1534   	; 0xd20 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    131e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1322:	83 ff       	sbrs	r24, 3
    1324:	20 c1       	rjmp	.+576    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1326:	90 91 a7 01 	lds	r25, 0x01A7

		switch (USB_ControlRequest.bRequest)
    132a:	80 91 a8 01 	lds	r24, 0x01A8
    132e:	85 30       	cpi	r24, 0x05	; 5
    1330:	09 f4       	brne	.+2      	; 0x1334 <USB_Device_ProcessControlRequest+0x40>
    1332:	77 c0       	rjmp	.+238    	; 0x1422 <USB_Device_ProcessControlRequest+0x12e>
    1334:	30 f4       	brcc	.+12     	; 0x1342 <USB_Device_ProcessControlRequest+0x4e>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	81 f1       	breq	.+96     	; 0x139a <USB_Device_ProcessControlRequest+0xa6>
    133a:	68 f0       	brcs	.+26     	; 0x1356 <USB_Device_ProcessControlRequest+0x62>
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	69 f1       	breq	.+90     	; 0x139a <USB_Device_ProcessControlRequest+0xa6>
    1340:	12 c1       	rjmp	.+548    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	09 f4       	brne	.+2      	; 0x1348 <USB_Device_ProcessControlRequest+0x54>
    1346:	e1 c0       	rjmp	.+450    	; 0x150a <USB_Device_ProcessControlRequest+0x216>
    1348:	89 30       	cpi	r24, 0x09	; 9
    134a:	09 f4       	brne	.+2      	; 0x134e <USB_Device_ProcessControlRequest+0x5a>
    134c:	f0 c0       	rjmp	.+480    	; 0x152e <USB_Device_ProcessControlRequest+0x23a>
    134e:	86 30       	cpi	r24, 0x06	; 6
    1350:	09 f0       	breq	.+2      	; 0x1354 <USB_Device_ProcessControlRequest+0x60>
    1352:	09 c1       	rjmp	.+530    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
    1354:	88 c0       	rjmp	.+272    	; 0x1466 <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1356:	90 38       	cpi	r25, 0x80	; 128
    1358:	81 f0       	breq	.+32     	; 0x137a <USB_Device_ProcessControlRequest+0x86>
    135a:	92 38       	cpi	r25, 0x82	; 130
    135c:	09 f0       	breq	.+2      	; 0x1360 <USB_Device_ProcessControlRequest+0x6c>
    135e:	03 c1       	rjmp	.+518    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1360:	80 91 ab 01 	lds	r24, 0x01AB
    1364:	8f 70       	andi	r24, 0x0F	; 15
    1366:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    136a:	80 91 eb 00 	lds	r24, 0x00EB
    136e:	85 fb       	bst	r24, 5
    1370:	88 27       	eor	r24, r24
    1372:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1374:	10 92 e9 00 	sts	0x00E9, r1
    1378:	06 c0       	rjmp	.+12     	; 0x1386 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    137a:	80 91 a3 01 	lds	r24, 0x01A3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    137e:	90 91 a4 01 	lds	r25, 0x01A4
    1382:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1384:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1386:	90 91 e8 00 	lds	r25, 0x00E8
    138a:	97 7f       	andi	r25, 0xF7	; 247
    138c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1390:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1394:	10 92 f1 00 	sts	0x00F1, r1
    1398:	c3 c0       	rjmp	.+390    	; 0x1520 <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    139a:	29 2f       	mov	r18, r25
    139c:	2d 7f       	andi	r18, 0xFD	; 253
    139e:	09 f0       	breq	.+2      	; 0x13a2 <USB_Device_ProcessControlRequest+0xae>
    13a0:	e2 c0       	rjmp	.+452    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    13a2:	99 23       	and	r25, r25
    13a4:	19 f0       	breq	.+6      	; 0x13ac <USB_Device_ProcessControlRequest+0xb8>
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <USB_Device_ProcessControlRequest+0xce>
    13aa:	dd c0       	rjmp	.+442    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    13ac:	90 91 a9 01 	lds	r25, 0x01A9
    13b0:	91 30       	cpi	r25, 0x01	; 1
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <USB_Device_ProcessControlRequest+0xc2>
    13b4:	d8 c0       	rjmp	.+432    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	09 f0       	breq	.+2      	; 0x13bc <USB_Device_ProcessControlRequest+0xc8>
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	90 93 a4 01 	sts	0x01A4, r25
    13c0:	2a c0       	rjmp	.+84     	; 0x1416 <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    13c2:	90 91 a9 01 	lds	r25, 0x01A9
    13c6:	91 11       	cpse	r25, r1
    13c8:	26 c0       	rjmp	.+76     	; 0x1416 <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    13ca:	20 91 ab 01 	lds	r18, 0x01AB
    13ce:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <USB_Device_ProcessControlRequest+0xe0>
    13d2:	c9 c0       	rjmp	.+402    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13d4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13d8:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    13dc:	90 ff       	sbrs	r25, 0
    13de:	1b c0       	rjmp	.+54     	; 0x1416 <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    13e0:	83 30       	cpi	r24, 0x03	; 3
    13e2:	21 f4       	brne	.+8      	; 0x13ec <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    13e4:	80 91 eb 00 	lds	r24, 0x00EB
    13e8:	80 62       	ori	r24, 0x20	; 32
    13ea:	13 c0       	rjmp	.+38     	; 0x1412 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    13ec:	80 91 eb 00 	lds	r24, 0x00EB
    13f0:	80 61       	ori	r24, 0x10	; 16
    13f2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <USB_Device_ProcessControlRequest+0x10c>
    13fe:	88 0f       	add	r24, r24
    1400:	0a 94       	dec	r0
    1402:	ea f7       	brpl	.-6      	; 0x13fe <USB_Device_ProcessControlRequest+0x10a>
    1404:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1408:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    140c:	80 91 eb 00 	lds	r24, 0x00EB
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1416:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    141a:	80 91 e8 00 	lds	r24, 0x00E8
    141e:	87 7f       	andi	r24, 0xF7	; 247
    1420:	82 c0       	rjmp	.+260    	; 0x1526 <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1422:	91 11       	cpse	r25, r1
    1424:	a0 c0       	rjmp	.+320    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1426:	10 91 a9 01 	lds	r17, 0x01A9
    142a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    142c:	80 91 e3 00 	lds	r24, 0x00E3
    1430:	80 78       	andi	r24, 0x80	; 128
    1432:	81 2b       	or	r24, r17
    1434:	80 93 e3 00 	sts	0x00E3, r24
    1438:	80 91 e8 00 	lds	r24, 0x00E8
    143c:	87 7f       	andi	r24, 0xF7	; 247
    143e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1442:	db dd       	rcall	.-1098   	; 0xffa <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1444:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1448:	80 ff       	sbrs	r24, 0
    144a:	fc cf       	rjmp	.-8      	; 0x1444 <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    144c:	80 91 e3 00 	lds	r24, 0x00E3
    1450:	80 68       	ori	r24, 0x80	; 128
    1452:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1456:	11 23       	and	r17, r17
    1458:	11 f0       	breq	.+4      	; 0x145e <USB_Device_ProcessControlRequest+0x16a>
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <USB_Device_ProcessControlRequest+0x16c>
    145e:	82 e0       	ldi	r24, 0x02	; 2
    1460:	80 93 a6 01 	sts	0x01A6, r24
    1464:	80 c0       	rjmp	.+256    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1466:	90 58       	subi	r25, 0x80	; 128
    1468:	92 30       	cpi	r25, 0x02	; 2
    146a:	08 f0       	brcs	.+2      	; 0x146e <USB_Device_ProcessControlRequest+0x17a>
    146c:	7c c0       	rjmp	.+248    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    146e:	80 91 a9 01 	lds	r24, 0x01A9
    1472:	90 91 aa 01 	lds	r25, 0x01AA
    1476:	8c 3d       	cpi	r24, 0xDC	; 220
    1478:	23 e0       	ldi	r18, 0x03	; 3
    147a:	92 07       	cpc	r25, r18
    147c:	71 f5       	brne	.+92     	; 0x14da <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1482:	8a e2       	ldi	r24, 0x2A	; 42
    1484:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1486:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1488:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    148a:	de 01       	movw	r26, r28
    148c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    148e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1490:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1492:	51 e2       	ldi	r21, 0x21	; 33
    1494:	e3 2f       	mov	r30, r19
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	50 93 57 00 	sts	0x0057, r21
    149c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    149e:	20 ff       	sbrs	r18, 0
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
    14a2:	e2 95       	swap	r30
    14a4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    14a6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    14a8:	ef 70       	andi	r30, 0x0F	; 15
    14aa:	8e 2f       	mov	r24, r30
    14ac:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    14ae:	ea 30       	cpi	r30, 0x0A	; 10
    14b0:	10 f0       	brcs	.+4      	; 0x14b6 <USB_Device_ProcessControlRequest+0x1c2>
    14b2:	c7 96       	adiw	r24, 0x37	; 55
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <USB_Device_ProcessControlRequest+0x1c4>
    14b6:	c0 96       	adiw	r24, 0x30	; 48
    14b8:	8d 93       	st	X+, r24
    14ba:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    14bc:	2f 5f       	subi	r18, 0xFF	; 255
    14be:	24 31       	cpi	r18, 0x14	; 20
    14c0:	49 f7       	brne	.-46     	; 0x1494 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    14c2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14c4:	80 91 e8 00 	lds	r24, 0x00E8
    14c8:	87 7f       	andi	r24, 0xF7	; 247
    14ca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    14ce:	6a e2       	ldi	r22, 0x2A	; 42
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	ce 01       	movw	r24, r28
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	59 dc       	rcall	.-1870   	; 0xd8a <Endpoint_Write_Control_Stream_LE>
    14d8:	12 c0       	rjmp	.+36     	; 0x14fe <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    14da:	ae 01       	movw	r20, r28
    14dc:	4f 5f       	subi	r20, 0xFF	; 255
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
    14e0:	60 91 ab 01 	lds	r22, 0x01AB
    14e4:	20 dc       	rcall	.-1984   	; 0xd26 <CALLBACK_USB_GetDescriptor>
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	09 f4       	brne	.+2      	; 0x14ec <USB_Device_ProcessControlRequest+0x1f8>
    14ea:	3d c0       	rjmp	.+122    	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
    14ec:	20 91 e8 00 	lds	r18, 0x00E8
    14f0:	27 7f       	andi	r18, 0xF7	; 247
    14f2:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    14f6:	bc 01       	movw	r22, r24
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	9a 81       	ldd	r25, Y+2	; 0x02
    14fc:	a9 dc       	rcall	.-1710   	; 0xe50 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14fe:	80 91 e8 00 	lds	r24, 0x00E8
    1502:	8b 77       	andi	r24, 0x7B	; 123
    1504:	80 93 e8 00 	sts	0x00E8, r24
    1508:	2e c0       	rjmp	.+92     	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    150a:	90 38       	cpi	r25, 0x80	; 128
    150c:	61 f5       	brne	.+88     	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    150e:	80 91 e8 00 	lds	r24, 0x00E8
    1512:	87 7f       	andi	r24, 0xF7	; 247
    1514:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1518:	80 91 a2 01 	lds	r24, 0x01A2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    151c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1520:	80 91 e8 00 	lds	r24, 0x00E8
    1524:	8e 77       	andi	r24, 0x7E	; 126
    1526:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    152a:	67 dd       	rcall	.-1330   	; 0xffa <Endpoint_ClearStatusStage>
    152c:	1c c0       	rjmp	.+56     	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    152e:	91 11       	cpse	r25, r1
    1530:	1a c0       	rjmp	.+52     	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1532:	90 91 a9 01 	lds	r25, 0x01A9
    1536:	92 30       	cpi	r25, 0x02	; 2
    1538:	b0 f4       	brcc	.+44     	; 0x1566 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    153a:	80 91 e8 00 	lds	r24, 0x00E8
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1544:	90 93 a2 01 	sts	0x01A2, r25

	Endpoint_ClearStatusStage();
    1548:	58 dd       	rcall	.-1360   	; 0xffa <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    154a:	80 91 a2 01 	lds	r24, 0x01A2
    154e:	81 11       	cpse	r24, r1
    1550:	04 c0       	rjmp	.+8      	; 0x155a <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1552:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1556:	87 ff       	sbrs	r24, 7
    1558:	02 c0       	rjmp	.+4      	; 0x155e <USB_Device_ProcessControlRequest+0x26a>
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <USB_Device_ProcessControlRequest+0x26c>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 a6 01 	sts	0x01A6, r24

	EVENT_USB_Device_ConfigurationChanged();
    1564:	da db       	rcall	.-2124   	; 0xd1a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1566:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    156a:	83 ff       	sbrs	r24, 3
    156c:	0a c0       	rjmp	.+20     	; 0x1582 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    156e:	80 91 e8 00 	lds	r24, 0x00E8
    1572:	87 7f       	andi	r24, 0xF7	; 247
    1574:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1578:	80 91 eb 00 	lds	r24, 0x00EB
    157c:	80 62       	ori	r24, 0x20	; 32
    157e:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1582:	aa 96       	adiw	r28, 0x2a	; 42
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1596:	08 95       	ret

00001598 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1598:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    159a:	80 91 a6 01 	lds	r24, 0x01A6
    159e:	88 23       	and	r24, r24
    15a0:	a9 f0       	breq	.+42     	; 0x15cc <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15a2:	80 91 e9 00 	lds	r24, 0x00E9
    15a6:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15a8:	90 91 ec 00 	lds	r25, 0x00EC
    15ac:	90 ff       	sbrs	r25, 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <USB_USBTask+0x1c>
    15b0:	90 e8       	ldi	r25, 0x80	; 128
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <USB_USBTask+0x1e>
    15b4:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15b6:	c9 2f       	mov	r28, r25
    15b8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15ba:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15be:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    15c2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    15c4:	97 de       	rcall	.-722    	; 0x12f4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15c6:	cf 70       	andi	r28, 0x0F	; 15
    15c8:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
    15d6:	fc 01       	movw	r30, r24
    15d8:	70 96       	adiw	r30, 0x10	; 16
    15da:	8b e0       	ldi	r24, 0x0B	; 11
    15dc:	df 01       	movw	r26, r30
    15de:	1d 92       	st	X+, r1
    15e0:	8a 95       	dec	r24
    15e2:	e9 f7       	brne	.-6      	; 0x15de <CDC_Device_ConfigureEndpoints+0xe>
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	8c 83       	std	Y+4, r24	; 0x04
    15e8:	89 87       	std	Y+9, r24	; 0x09
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	8e 87       	std	Y+14, r24	; 0x0e
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	c6 dc       	rcall	.-1652   	; 0xf82 <Endpoint_ConfigureEndpointTable>
    15f6:	88 23       	and	r24, r24
    15f8:	61 f0       	breq	.+24     	; 0x1612 <CDC_Device_ConfigureEndpoints+0x42>
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	ce 01       	movw	r24, r28
    15fe:	06 96       	adiw	r24, 0x06	; 6
    1600:	c0 dc       	rcall	.-1664   	; 0xf82 <Endpoint_ConfigureEndpointTable>
    1602:	88 23       	and	r24, r24
    1604:	31 f0       	breq	.+12     	; 0x1612 <CDC_Device_ConfigureEndpoints+0x42>
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	ce 01       	movw	r24, r28
    160a:	0b 96       	adiw	r24, 0x0b	; 11
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	b8 cc       	rjmp	.-1680   	; 0xf82 <Endpoint_ConfigureEndpointTable>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	08 95       	ret

0000161a <CDC_Device_SendByte>:
    161a:	cf 93       	push	r28
    161c:	c6 2f       	mov	r28, r22
    161e:	20 91 a6 01 	lds	r18, 0x01A6
    1622:	24 30       	cpi	r18, 0x04	; 4
    1624:	f1 f4       	brne	.+60     	; 0x1662 <CDC_Device_SendByte+0x48>
    1626:	fc 01       	movw	r30, r24
    1628:	44 89       	ldd	r20, Z+20	; 0x14
    162a:	55 89       	ldd	r21, Z+21	; 0x15
    162c:	66 89       	ldd	r22, Z+22	; 0x16
    162e:	77 89       	ldd	r23, Z+23	; 0x17
    1630:	45 2b       	or	r20, r21
    1632:	46 2b       	or	r20, r22
    1634:	47 2b       	or	r20, r23
    1636:	a9 f0       	breq	.+42     	; 0x1662 <CDC_Device_SendByte+0x48>
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	8f 70       	andi	r24, 0x0F	; 15
    163c:	80 93 e9 00 	sts	0x00E9, r24
    1640:	80 91 e8 00 	lds	r24, 0x00E8
    1644:	85 ff       	sbrs	r24, 5
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <CDC_Device_SendByte+0x36>
    1648:	c0 93 f1 00 	sts	0x00F1, r28
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	0a c0       	rjmp	.+20     	; 0x1664 <CDC_Device_SendByte+0x4a>
    1650:	80 91 e8 00 	lds	r24, 0x00E8
    1654:	8e 77       	andi	r24, 0x7E	; 126
    1656:	80 93 e8 00 	sts	0x00E8, r24
    165a:	f0 dc       	rcall	.-1568   	; 0x103c <Endpoint_WaitUntilReady>
    165c:	88 23       	and	r24, r24
    165e:	a1 f3       	breq	.-24     	; 0x1648 <CDC_Device_SendByte+0x2e>
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <CDC_Device_SendByte+0x4a>
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <CDC_Device_putchar>:
    1668:	fb 01       	movw	r30, r22
    166a:	68 2f       	mov	r22, r24
    166c:	84 85       	ldd	r24, Z+12	; 0x0c
    166e:	95 85       	ldd	r25, Z+13	; 0x0d
    1670:	d4 df       	rcall	.-88     	; 0x161a <CDC_Device_SendByte>
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 11       	cpse	r24, r1
    1678:	02 c0       	rjmp	.+4      	; 0x167e <CDC_Device_putchar+0x16>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	88 27       	eor	r24, r24
    1680:	99 27       	eor	r25, r25
    1682:	82 1b       	sub	r24, r18
    1684:	93 0b       	sbc	r25, r19
    1686:	08 95       	ret

00001688 <CDC_Device_Flush>:
    1688:	20 91 a6 01 	lds	r18, 0x01A6
    168c:	24 30       	cpi	r18, 0x04	; 4
    168e:	21 f5       	brne	.+72     	; 0x16d8 <CDC_Device_Flush+0x50>
    1690:	fc 01       	movw	r30, r24
    1692:	44 89       	ldd	r20, Z+20	; 0x14
    1694:	55 89       	ldd	r21, Z+21	; 0x15
    1696:	66 89       	ldd	r22, Z+22	; 0x16
    1698:	77 89       	ldd	r23, Z+23	; 0x17
    169a:	45 2b       	or	r20, r21
    169c:	46 2b       	or	r20, r22
    169e:	47 2b       	or	r20, r23
    16a0:	d9 f0       	breq	.+54     	; 0x16d8 <CDC_Device_Flush+0x50>
    16a2:	81 81       	ldd	r24, Z+1	; 0x01
    16a4:	8f 70       	andi	r24, 0x0F	; 15
    16a6:	80 93 e9 00 	sts	0x00E9, r24
    16aa:	80 91 f2 00 	lds	r24, 0x00F2
    16ae:	88 23       	and	r24, r24
    16b0:	89 f0       	breq	.+34     	; 0x16d4 <CDC_Device_Flush+0x4c>
    16b2:	90 91 e8 00 	lds	r25, 0x00E8
    16b6:	80 91 e8 00 	lds	r24, 0x00E8
    16ba:	8e 77       	andi	r24, 0x7E	; 126
    16bc:	80 93 e8 00 	sts	0x00E8, r24
    16c0:	95 fd       	sbrc	r25, 5
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <CDC_Device_Flush+0x4c>
    16c4:	bb dc       	rcall	.-1674   	; 0x103c <Endpoint_WaitUntilReady>
    16c6:	81 11       	cpse	r24, r1
    16c8:	08 c0       	rjmp	.+16     	; 0x16da <CDC_Device_Flush+0x52>
    16ca:	80 91 e8 00 	lds	r24, 0x00E8
    16ce:	8e 77       	andi	r24, 0x7E	; 126
    16d0:	80 93 e8 00 	sts	0x00E8, r24
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	08 95       	ret
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	08 95       	ret

000016dc <CDC_Device_USBTask>:
    16dc:	20 91 a6 01 	lds	r18, 0x01A6
    16e0:	24 30       	cpi	r18, 0x04	; 4
    16e2:	89 f4       	brne	.+34     	; 0x1706 <CDC_Device_USBTask+0x2a>
    16e4:	fc 01       	movw	r30, r24
    16e6:	44 89       	ldd	r20, Z+20	; 0x14
    16e8:	55 89       	ldd	r21, Z+21	; 0x15
    16ea:	66 89       	ldd	r22, Z+22	; 0x16
    16ec:	77 89       	ldd	r23, Z+23	; 0x17
    16ee:	45 2b       	or	r20, r21
    16f0:	46 2b       	or	r20, r22
    16f2:	47 2b       	or	r20, r23
    16f4:	41 f0       	breq	.+16     	; 0x1706 <CDC_Device_USBTask+0x2a>
    16f6:	21 81       	ldd	r18, Z+1	; 0x01
    16f8:	2f 70       	andi	r18, 0x0F	; 15
    16fa:	20 93 e9 00 	sts	0x00E9, r18
    16fe:	20 91 e8 00 	lds	r18, 0x00E8
    1702:	20 fd       	sbrc	r18, 0
    1704:	c1 cf       	rjmp	.-126    	; 0x1688 <CDC_Device_Flush>
    1706:	08 95       	ret

00001708 <CDC_Device_ReceiveByte>:
    1708:	20 91 a6 01 	lds	r18, 0x01A6
    170c:	24 30       	cpi	r18, 0x04	; 4
    170e:	19 f0       	breq	.+6      	; 0x1716 <CDC_Device_ReceiveByte+0xe>
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	9f ef       	ldi	r25, 0xFF	; 255
    1714:	08 95       	ret
    1716:	fc 01       	movw	r30, r24
    1718:	44 89       	ldd	r20, Z+20	; 0x14
    171a:	55 89       	ldd	r21, Z+21	; 0x15
    171c:	66 89       	ldd	r22, Z+22	; 0x16
    171e:	77 89       	ldd	r23, Z+23	; 0x17
    1720:	45 2b       	or	r20, r21
    1722:	46 2b       	or	r20, r22
    1724:	47 2b       	or	r20, r23
    1726:	a1 f3       	breq	.-24     	; 0x1710 <CDC_Device_ReceiveByte+0x8>
    1728:	86 81       	ldd	r24, Z+6	; 0x06
    172a:	8f 70       	andi	r24, 0x0F	; 15
    172c:	80 93 e9 00 	sts	0x00E9, r24
    1730:	80 91 e8 00 	lds	r24, 0x00E8
    1734:	82 ff       	sbrs	r24, 2
    1736:	ec cf       	rjmp	.-40     	; 0x1710 <CDC_Device_ReceiveByte+0x8>
    1738:	80 91 f2 00 	lds	r24, 0x00F2
    173c:	88 23       	and	r24, r24
    173e:	21 f0       	breq	.+8      	; 0x1748 <CDC_Device_ReceiveByte+0x40>
    1740:	20 91 f1 00 	lds	r18, 0x00F1
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <CDC_Device_ReceiveByte+0x44>
    1748:	2f ef       	ldi	r18, 0xFF	; 255
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	80 91 f2 00 	lds	r24, 0x00F2
    1750:	81 11       	cpse	r24, r1
    1752:	05 c0       	rjmp	.+10     	; 0x175e <CDC_Device_ReceiveByte+0x56>
    1754:	80 91 e8 00 	lds	r24, 0x00E8
    1758:	8b 77       	andi	r24, 0x7B	; 123
    175a:	80 93 e8 00 	sts	0x00E8, r24
    175e:	c9 01       	movw	r24, r18
    1760:	08 95       	ret

00001762 <CDC_Device_getchar>:
    1762:	fc 01       	movw	r30, r24
    1764:	84 85       	ldd	r24, Z+12	; 0x0c
    1766:	95 85       	ldd	r25, Z+13	; 0x0d
    1768:	cf df       	rcall	.-98     	; 0x1708 <CDC_Device_ReceiveByte>
    176a:	97 ff       	sbrs	r25, 7
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <CDC_Device_getchar+0x10>
    176e:	8e ef       	ldi	r24, 0xFE	; 254
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	08 95       	ret

00001774 <CDC_Device_CreateStream>:
    1774:	fb 01       	movw	r30, r22
    1776:	2e e0       	ldi	r18, 0x0E	; 14
    1778:	db 01       	movw	r26, r22
    177a:	1d 92       	st	X+, r1
    177c:	2a 95       	dec	r18
    177e:	e9 f7       	brne	.-6      	; 0x177a <CDC_Device_CreateStream+0x6>
    1780:	23 e0       	ldi	r18, 0x03	; 3
    1782:	23 83       	std	Z+3, r18	; 0x03
    1784:	24 e3       	ldi	r18, 0x34	; 52
    1786:	3b e0       	ldi	r19, 0x0B	; 11
    1788:	31 87       	std	Z+9, r19	; 0x09
    178a:	20 87       	std	Z+8, r18	; 0x08
    178c:	21 eb       	ldi	r18, 0xB1	; 177
    178e:	3b e0       	ldi	r19, 0x0B	; 11
    1790:	33 87       	std	Z+11, r19	; 0x0b
    1792:	22 87       	std	Z+10, r18	; 0x0a
    1794:	95 87       	std	Z+13, r25	; 0x0d
    1796:	84 87       	std	Z+12, r24	; 0x0c
    1798:	08 95       	ret

0000179a <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    179a:	08 95       	ret

0000179c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    17a2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    17a6:	83 ff       	sbrs	r24, 3
    17a8:	a6 c0       	rjmp	.+332    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    17aa:	88 81       	ld	r24, Y
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	20 91 ab 01 	lds	r18, 0x01AB
    17b2:	30 91 ac 01 	lds	r19, 0x01AC
    17b6:	28 17       	cp	r18, r24
    17b8:	39 07       	cpc	r19, r25
    17ba:	09 f0       	breq	.+2      	; 0x17be <CDC_Device_ProcessControlRequest+0x22>
    17bc:	9c c0       	rjmp	.+312    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    17be:	80 91 a8 01 	lds	r24, 0x01A8
    17c2:	81 32       	cpi	r24, 0x21	; 33
    17c4:	61 f0       	breq	.+24     	; 0x17de <CDC_Device_ProcessControlRequest+0x42>
    17c6:	20 f4       	brcc	.+8      	; 0x17d0 <CDC_Device_ProcessControlRequest+0x34>
    17c8:	80 32       	cpi	r24, 0x20	; 32
    17ca:	09 f4       	brne	.+2      	; 0x17ce <CDC_Device_ProcessControlRequest+0x32>
    17cc:	3e c0       	rjmp	.+124    	; 0x184a <CDC_Device_ProcessControlRequest+0xae>
    17ce:	93 c0       	rjmp	.+294    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
    17d0:	82 32       	cpi	r24, 0x22	; 34
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <CDC_Device_ProcessControlRequest+0x3a>
    17d4:	6c c0       	rjmp	.+216    	; 0x18ae <CDC_Device_ProcessControlRequest+0x112>
    17d6:	83 32       	cpi	r24, 0x23	; 35
    17d8:	09 f4       	brne	.+2      	; 0x17dc <CDC_Device_ProcessControlRequest+0x40>
    17da:	7d c0       	rjmp	.+250    	; 0x18d6 <CDC_Device_ProcessControlRequest+0x13a>
    17dc:	8c c0       	rjmp	.+280    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17de:	80 91 a7 01 	lds	r24, 0x01A7
    17e2:	81 3a       	cpi	r24, 0xA1	; 161
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <CDC_Device_ProcessControlRequest+0x4c>
    17e6:	87 c0       	rjmp	.+270    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17e8:	80 91 e8 00 	lds	r24, 0x00E8
    17ec:	87 7f       	andi	r24, 0xF7	; 247
    17ee:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17f2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    17f6:	80 ff       	sbrs	r24, 0
    17f8:	fc cf       	rjmp	.-8      	; 0x17f2 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    17fa:	4c 89       	ldd	r20, Y+20	; 0x14
    17fc:	5d 89       	ldd	r21, Y+21	; 0x15
    17fe:	6e 89       	ldd	r22, Y+22	; 0x16
    1800:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1802:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1806:	bb 27       	eor	r27, r27
    1808:	a7 2f       	mov	r26, r23
    180a:	96 2f       	mov	r25, r22
    180c:	85 2f       	mov	r24, r21
    180e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 16);
    1812:	cb 01       	movw	r24, r22
    1814:	aa 27       	eor	r26, r26
    1816:	bb 27       	eor	r27, r27
    1818:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 24);
    181c:	47 2f       	mov	r20, r23
    181e:	55 27       	eor	r21, r21
    1820:	66 27       	eor	r22, r22
    1822:	77 27       	eor	r23, r23
    1824:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1828:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    182a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    182e:	89 8d       	ldd	r24, Y+25	; 0x19
    1830:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1834:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1836:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    183a:	80 91 e8 00 	lds	r24, 0x00E8
    183e:	8e 77       	andi	r24, 0x7E	; 126
    1840:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1848:	d8 cb       	rjmp	.-2128   	; 0xffa <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    184a:	80 91 a7 01 	lds	r24, 0x01A7
    184e:	81 32       	cpi	r24, 0x21	; 33
    1850:	09 f0       	breq	.+2      	; 0x1854 <CDC_Device_ProcessControlRequest+0xb8>
    1852:	51 c0       	rjmp	.+162    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1854:	80 91 e8 00 	lds	r24, 0x00E8
    1858:	87 7f       	andi	r24, 0xF7	; 247
    185a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    185e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1862:	82 fd       	sbrc	r24, 2
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1866:	80 91 a6 01 	lds	r24, 0x01A6
    186a:	81 11       	cpse	r24, r1
    186c:	f8 cf       	rjmp	.-16     	; 0x185e <CDC_Device_ProcessControlRequest+0xc2>
    186e:	43 c0       	rjmp	.+134    	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1870:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    1874:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    1878:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    187c:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1880:	3c 8b       	std	Y+20, r19	; 0x14
    1882:	2d 8b       	std	Y+21, r18	; 0x15
    1884:	9e 8b       	std	Y+22, r25	; 0x16
    1886:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1888:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    188c:	88 8f       	std	Y+24, r24	; 0x18
    188e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1892:	89 8f       	std	Y+25, r24	; 0x19
    1894:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1898:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    189a:	80 91 e8 00 	lds	r24, 0x00E8
    189e:	8b 77       	andi	r24, 0x7B	; 123
    18a0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    18a4:	aa db       	rcall	.-2220   	; 0xffa <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    18a6:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    18ac:	76 cf       	rjmp	.-276    	; 0x179a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18ae:	80 91 a7 01 	lds	r24, 0x01A7
    18b2:	81 32       	cpi	r24, 0x21	; 33
    18b4:	01 f5       	brne	.+64     	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18b6:	80 91 e8 00 	lds	r24, 0x00E8
    18ba:	87 7f       	andi	r24, 0xF7	; 247
    18bc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    18c0:	9c db       	rcall	.-2248   	; 0xffa <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    18c2:	80 91 a9 01 	lds	r24, 0x01A9
    18c6:	90 91 aa 01 	lds	r25, 0x01AA
    18ca:	99 8b       	std	Y+17, r25	; 0x11
    18cc:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    18ce:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    18d4:	62 cf       	rjmp	.-316    	; 0x179a <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18d6:	80 91 a7 01 	lds	r24, 0x01A7
    18da:	81 32       	cpi	r24, 0x21	; 33
    18dc:	61 f4       	brne	.+24     	; 0x18f6 <CDC_Device_ProcessControlRequest+0x15a>
    18de:	80 91 e8 00 	lds	r24, 0x00E8
    18e2:	87 7f       	andi	r24, 0xF7	; 247
    18e4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    18e8:	88 db       	rcall	.-2288   	; 0xffa <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    18ea:	60 91 a9 01 	lds	r22, 0x01A9
    18ee:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    18f4:	52 cf       	rjmp	.-348    	; 0x179a <CDC_Device_Event_Stub>
			}

			break;
	}
}
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <__cmpsf2>:
    18fc:	a8 d0       	rcall	.+336    	; 0x1a4e <__fp_cmp>
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <__cmpsf2+0x6>
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	08 95       	ret

00001904 <__divsf3>:
    1904:	0c d0       	rcall	.+24     	; 0x191e <__divsf3x>
    1906:	de c0       	rjmp	.+444    	; 0x1ac4 <__fp_round>
    1908:	d6 d0       	rcall	.+428    	; 0x1ab6 <__fp_pscB>
    190a:	40 f0       	brcs	.+16     	; 0x191c <__divsf3+0x18>
    190c:	cd d0       	rcall	.+410    	; 0x1aa8 <__fp_pscA>
    190e:	30 f0       	brcs	.+12     	; 0x191c <__divsf3+0x18>
    1910:	21 f4       	brne	.+8      	; 0x191a <__divsf3+0x16>
    1912:	5f 3f       	cpi	r21, 0xFF	; 255
    1914:	19 f0       	breq	.+6      	; 0x191c <__divsf3+0x18>
    1916:	bf c0       	rjmp	.+382    	; 0x1a96 <__fp_inf>
    1918:	51 11       	cpse	r21, r1
    191a:	08 c1       	rjmp	.+528    	; 0x1b2c <__fp_szero>
    191c:	c2 c0       	rjmp	.+388    	; 0x1aa2 <__fp_nan>

0000191e <__divsf3x>:
    191e:	e3 d0       	rcall	.+454    	; 0x1ae6 <__fp_split3>
    1920:	98 f3       	brcs	.-26     	; 0x1908 <__divsf3+0x4>

00001922 <__divsf3_pse>:
    1922:	99 23       	and	r25, r25
    1924:	c9 f3       	breq	.-14     	; 0x1918 <__divsf3+0x14>
    1926:	55 23       	and	r21, r21
    1928:	b1 f3       	breq	.-20     	; 0x1916 <__divsf3+0x12>
    192a:	95 1b       	sub	r25, r21
    192c:	55 0b       	sbc	r21, r21
    192e:	bb 27       	eor	r27, r27
    1930:	aa 27       	eor	r26, r26
    1932:	62 17       	cp	r22, r18
    1934:	73 07       	cpc	r23, r19
    1936:	84 07       	cpc	r24, r20
    1938:	38 f0       	brcs	.+14     	; 0x1948 <__divsf3_pse+0x26>
    193a:	9f 5f       	subi	r25, 0xFF	; 255
    193c:	5f 4f       	sbci	r21, 0xFF	; 255
    193e:	22 0f       	add	r18, r18
    1940:	33 1f       	adc	r19, r19
    1942:	44 1f       	adc	r20, r20
    1944:	aa 1f       	adc	r26, r26
    1946:	a9 f3       	breq	.-22     	; 0x1932 <__divsf3_pse+0x10>
    1948:	33 d0       	rcall	.+102    	; 0x19b0 <__divsf3_pse+0x8e>
    194a:	0e 2e       	mov	r0, r30
    194c:	3a f0       	brmi	.+14     	; 0x195c <__divsf3_pse+0x3a>
    194e:	e0 e8       	ldi	r30, 0x80	; 128
    1950:	30 d0       	rcall	.+96     	; 0x19b2 <__divsf3_pse+0x90>
    1952:	91 50       	subi	r25, 0x01	; 1
    1954:	50 40       	sbci	r21, 0x00	; 0
    1956:	e6 95       	lsr	r30
    1958:	00 1c       	adc	r0, r0
    195a:	ca f7       	brpl	.-14     	; 0x194e <__divsf3_pse+0x2c>
    195c:	29 d0       	rcall	.+82     	; 0x19b0 <__divsf3_pse+0x8e>
    195e:	fe 2f       	mov	r31, r30
    1960:	27 d0       	rcall	.+78     	; 0x19b0 <__divsf3_pse+0x8e>
    1962:	66 0f       	add	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	88 1f       	adc	r24, r24
    1968:	bb 1f       	adc	r27, r27
    196a:	26 17       	cp	r18, r22
    196c:	37 07       	cpc	r19, r23
    196e:	48 07       	cpc	r20, r24
    1970:	ab 07       	cpc	r26, r27
    1972:	b0 e8       	ldi	r27, 0x80	; 128
    1974:	09 f0       	breq	.+2      	; 0x1978 <__divsf3_pse+0x56>
    1976:	bb 0b       	sbc	r27, r27
    1978:	80 2d       	mov	r24, r0
    197a:	bf 01       	movw	r22, r30
    197c:	ff 27       	eor	r31, r31
    197e:	93 58       	subi	r25, 0x83	; 131
    1980:	5f 4f       	sbci	r21, 0xFF	; 255
    1982:	2a f0       	brmi	.+10     	; 0x198e <__divsf3_pse+0x6c>
    1984:	9e 3f       	cpi	r25, 0xFE	; 254
    1986:	51 05       	cpc	r21, r1
    1988:	68 f0       	brcs	.+26     	; 0x19a4 <__divsf3_pse+0x82>
    198a:	85 c0       	rjmp	.+266    	; 0x1a96 <__fp_inf>
    198c:	cf c0       	rjmp	.+414    	; 0x1b2c <__fp_szero>
    198e:	5f 3f       	cpi	r21, 0xFF	; 255
    1990:	ec f3       	brlt	.-6      	; 0x198c <__divsf3_pse+0x6a>
    1992:	98 3e       	cpi	r25, 0xE8	; 232
    1994:	dc f3       	brlt	.-10     	; 0x198c <__divsf3_pse+0x6a>
    1996:	86 95       	lsr	r24
    1998:	77 95       	ror	r23
    199a:	67 95       	ror	r22
    199c:	b7 95       	ror	r27
    199e:	f7 95       	ror	r31
    19a0:	9f 5f       	subi	r25, 0xFF	; 255
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__divsf3_pse+0x74>
    19a4:	88 0f       	add	r24, r24
    19a6:	91 1d       	adc	r25, r1
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	97 f9       	bld	r25, 7
    19ae:	08 95       	ret
    19b0:	e1 e0       	ldi	r30, 0x01	; 1
    19b2:	66 0f       	add	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	bb 1f       	adc	r27, r27
    19ba:	62 17       	cp	r22, r18
    19bc:	73 07       	cpc	r23, r19
    19be:	84 07       	cpc	r24, r20
    19c0:	ba 07       	cpc	r27, r26
    19c2:	20 f0       	brcs	.+8      	; 0x19cc <__divsf3_pse+0xaa>
    19c4:	62 1b       	sub	r22, r18
    19c6:	73 0b       	sbc	r23, r19
    19c8:	84 0b       	sbc	r24, r20
    19ca:	ba 0b       	sbc	r27, r26
    19cc:	ee 1f       	adc	r30, r30
    19ce:	88 f7       	brcc	.-30     	; 0x19b2 <__divsf3_pse+0x90>
    19d0:	e0 95       	com	r30
    19d2:	08 95       	ret

000019d4 <__floatunsisf>:
    19d4:	e8 94       	clt
    19d6:	09 c0       	rjmp	.+18     	; 0x19ea <__floatsisf+0x12>

000019d8 <__floatsisf>:
    19d8:	97 fb       	bst	r25, 7
    19da:	3e f4       	brtc	.+14     	; 0x19ea <__floatsisf+0x12>
    19dc:	90 95       	com	r25
    19de:	80 95       	com	r24
    19e0:	70 95       	com	r23
    19e2:	61 95       	neg	r22
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
    19e6:	8f 4f       	sbci	r24, 0xFF	; 255
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	99 23       	and	r25, r25
    19ec:	a9 f0       	breq	.+42     	; 0x1a18 <__floatsisf+0x40>
    19ee:	f9 2f       	mov	r31, r25
    19f0:	96 e9       	ldi	r25, 0x96	; 150
    19f2:	bb 27       	eor	r27, r27
    19f4:	93 95       	inc	r25
    19f6:	f6 95       	lsr	r31
    19f8:	87 95       	ror	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	b7 95       	ror	r27
    1a00:	f1 11       	cpse	r31, r1
    1a02:	f8 cf       	rjmp	.-16     	; 0x19f4 <__floatsisf+0x1c>
    1a04:	fa f4       	brpl	.+62     	; 0x1a44 <__floatsisf+0x6c>
    1a06:	bb 0f       	add	r27, r27
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <__floatsisf+0x36>
    1a0a:	60 ff       	sbrs	r22, 0
    1a0c:	1b c0       	rjmp	.+54     	; 0x1a44 <__floatsisf+0x6c>
    1a0e:	6f 5f       	subi	r22, 0xFF	; 255
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	8f 4f       	sbci	r24, 0xFF	; 255
    1a14:	9f 4f       	sbci	r25, 0xFF	; 255
    1a16:	16 c0       	rjmp	.+44     	; 0x1a44 <__floatsisf+0x6c>
    1a18:	88 23       	and	r24, r24
    1a1a:	11 f0       	breq	.+4      	; 0x1a20 <__floatsisf+0x48>
    1a1c:	96 e9       	ldi	r25, 0x96	; 150
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <__floatsisf+0x6a>
    1a20:	77 23       	and	r23, r23
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <__floatsisf+0x54>
    1a24:	9e e8       	ldi	r25, 0x8E	; 142
    1a26:	87 2f       	mov	r24, r23
    1a28:	76 2f       	mov	r23, r22
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <__floatsisf+0x5e>
    1a2c:	66 23       	and	r22, r22
    1a2e:	71 f0       	breq	.+28     	; 0x1a4c <__floatsisf+0x74>
    1a30:	96 e8       	ldi	r25, 0x86	; 134
    1a32:	86 2f       	mov	r24, r22
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	2a f0       	brmi	.+10     	; 0x1a44 <__floatsisf+0x6c>
    1a3a:	9a 95       	dec	r25
    1a3c:	66 0f       	add	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	da f7       	brpl	.-10     	; 0x1a3a <__floatsisf+0x62>
    1a44:	88 0f       	add	r24, r24
    1a46:	96 95       	lsr	r25
    1a48:	87 95       	ror	r24
    1a4a:	97 f9       	bld	r25, 7
    1a4c:	08 95       	ret

00001a4e <__fp_cmp>:
    1a4e:	99 0f       	add	r25, r25
    1a50:	00 08       	sbc	r0, r0
    1a52:	55 0f       	add	r21, r21
    1a54:	aa 0b       	sbc	r26, r26
    1a56:	e0 e8       	ldi	r30, 0x80	; 128
    1a58:	fe ef       	ldi	r31, 0xFE	; 254
    1a5a:	16 16       	cp	r1, r22
    1a5c:	17 06       	cpc	r1, r23
    1a5e:	e8 07       	cpc	r30, r24
    1a60:	f9 07       	cpc	r31, r25
    1a62:	c0 f0       	brcs	.+48     	; 0x1a94 <__fp_cmp+0x46>
    1a64:	12 16       	cp	r1, r18
    1a66:	13 06       	cpc	r1, r19
    1a68:	e4 07       	cpc	r30, r20
    1a6a:	f5 07       	cpc	r31, r21
    1a6c:	98 f0       	brcs	.+38     	; 0x1a94 <__fp_cmp+0x46>
    1a6e:	62 1b       	sub	r22, r18
    1a70:	73 0b       	sbc	r23, r19
    1a72:	84 0b       	sbc	r24, r20
    1a74:	95 0b       	sbc	r25, r21
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <__fp_cmp+0x38>
    1a78:	0a 26       	eor	r0, r26
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <__fp_cmp+0x46>
    1a7c:	23 2b       	or	r18, r19
    1a7e:	24 2b       	or	r18, r20
    1a80:	25 2b       	or	r18, r21
    1a82:	21 f4       	brne	.+8      	; 0x1a8c <__fp_cmp+0x3e>
    1a84:	08 95       	ret
    1a86:	0a 26       	eor	r0, r26
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__fp_cmp+0x3e>
    1a8a:	a1 40       	sbci	r26, 0x01	; 1
    1a8c:	a6 95       	lsr	r26
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	81 1d       	adc	r24, r1
    1a92:	81 1d       	adc	r24, r1
    1a94:	08 95       	ret

00001a96 <__fp_inf>:
    1a96:	97 f9       	bld	r25, 7
    1a98:	9f 67       	ori	r25, 0x7F	; 127
    1a9a:	80 e8       	ldi	r24, 0x80	; 128
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	08 95       	ret

00001aa2 <__fp_nan>:
    1aa2:	9f ef       	ldi	r25, 0xFF	; 255
    1aa4:	80 ec       	ldi	r24, 0xC0	; 192
    1aa6:	08 95       	ret

00001aa8 <__fp_pscA>:
    1aa8:	00 24       	eor	r0, r0
    1aaa:	0a 94       	dec	r0
    1aac:	16 16       	cp	r1, r22
    1aae:	17 06       	cpc	r1, r23
    1ab0:	18 06       	cpc	r1, r24
    1ab2:	09 06       	cpc	r0, r25
    1ab4:	08 95       	ret

00001ab6 <__fp_pscB>:
    1ab6:	00 24       	eor	r0, r0
    1ab8:	0a 94       	dec	r0
    1aba:	12 16       	cp	r1, r18
    1abc:	13 06       	cpc	r1, r19
    1abe:	14 06       	cpc	r1, r20
    1ac0:	05 06       	cpc	r0, r21
    1ac2:	08 95       	ret

00001ac4 <__fp_round>:
    1ac4:	09 2e       	mov	r0, r25
    1ac6:	03 94       	inc	r0
    1ac8:	00 0c       	add	r0, r0
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <__fp_round+0xc>
    1acc:	88 23       	and	r24, r24
    1ace:	52 f0       	brmi	.+20     	; 0x1ae4 <__fp_round+0x20>
    1ad0:	bb 0f       	add	r27, r27
    1ad2:	40 f4       	brcc	.+16     	; 0x1ae4 <__fp_round+0x20>
    1ad4:	bf 2b       	or	r27, r31
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <__fp_round+0x18>
    1ad8:	60 ff       	sbrs	r22, 0
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <__fp_round+0x20>
    1adc:	6f 5f       	subi	r22, 0xFF	; 255
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	08 95       	ret

00001ae6 <__fp_split3>:
    1ae6:	57 fd       	sbrc	r21, 7
    1ae8:	90 58       	subi	r25, 0x80	; 128
    1aea:	44 0f       	add	r20, r20
    1aec:	55 1f       	adc	r21, r21
    1aee:	59 f0       	breq	.+22     	; 0x1b06 <__fp_splitA+0x10>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <__fp_splitA+0x1a>
    1af4:	47 95       	ror	r20

00001af6 <__fp_splitA>:
    1af6:	88 0f       	add	r24, r24
    1af8:	97 fb       	bst	r25, 7
    1afa:	99 1f       	adc	r25, r25
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <__fp_splitA+0x20>
    1afe:	9f 3f       	cpi	r25, 0xFF	; 255
    1b00:	79 f0       	breq	.+30     	; 0x1b20 <__fp_splitA+0x2a>
    1b02:	87 95       	ror	r24
    1b04:	08 95       	ret
    1b06:	12 16       	cp	r1, r18
    1b08:	13 06       	cpc	r1, r19
    1b0a:	14 06       	cpc	r1, r20
    1b0c:	55 1f       	adc	r21, r21
    1b0e:	f2 cf       	rjmp	.-28     	; 0x1af4 <__fp_split3+0xe>
    1b10:	46 95       	lsr	r20
    1b12:	f1 df       	rcall	.-30     	; 0x1af6 <__fp_splitA>
    1b14:	08 c0       	rjmp	.+16     	; 0x1b26 <__fp_splitA+0x30>
    1b16:	16 16       	cp	r1, r22
    1b18:	17 06       	cpc	r1, r23
    1b1a:	18 06       	cpc	r1, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	f1 cf       	rjmp	.-30     	; 0x1b02 <__fp_splitA+0xc>
    1b20:	86 95       	lsr	r24
    1b22:	71 05       	cpc	r23, r1
    1b24:	61 05       	cpc	r22, r1
    1b26:	08 94       	sec
    1b28:	08 95       	ret

00001b2a <__fp_zero>:
    1b2a:	e8 94       	clt

00001b2c <__fp_szero>:
    1b2c:	bb 27       	eor	r27, r27
    1b2e:	66 27       	eor	r22, r22
    1b30:	77 27       	eor	r23, r23
    1b32:	cb 01       	movw	r24, r22
    1b34:	97 f9       	bld	r25, 7
    1b36:	08 95       	ret

00001b38 <__gesf2>:
    1b38:	8a df       	rcall	.-236    	; 0x1a4e <__fp_cmp>
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <__gesf2+0x6>
    1b3c:	8f ef       	ldi	r24, 0xFF	; 255
    1b3e:	08 95       	ret

00001b40 <__mulsf3>:
    1b40:	0a d0       	rcall	.+20     	; 0x1b56 <__mulsf3x>
    1b42:	c0 cf       	rjmp	.-128    	; 0x1ac4 <__fp_round>
    1b44:	b1 df       	rcall	.-158    	; 0x1aa8 <__fp_pscA>
    1b46:	28 f0       	brcs	.+10     	; 0x1b52 <__mulsf3+0x12>
    1b48:	b6 df       	rcall	.-148    	; 0x1ab6 <__fp_pscB>
    1b4a:	18 f0       	brcs	.+6      	; 0x1b52 <__mulsf3+0x12>
    1b4c:	95 23       	and	r25, r21
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <__mulsf3+0x12>
    1b50:	a2 cf       	rjmp	.-188    	; 0x1a96 <__fp_inf>
    1b52:	a7 cf       	rjmp	.-178    	; 0x1aa2 <__fp_nan>
    1b54:	eb cf       	rjmp	.-42     	; 0x1b2c <__fp_szero>

00001b56 <__mulsf3x>:
    1b56:	c7 df       	rcall	.-114    	; 0x1ae6 <__fp_split3>
    1b58:	a8 f3       	brcs	.-22     	; 0x1b44 <__mulsf3+0x4>

00001b5a <__mulsf3_pse>:
    1b5a:	99 23       	and	r25, r25
    1b5c:	d9 f3       	breq	.-10     	; 0x1b54 <__mulsf3+0x14>
    1b5e:	55 23       	and	r21, r21
    1b60:	c9 f3       	breq	.-14     	; 0x1b54 <__mulsf3+0x14>
    1b62:	95 0f       	add	r25, r21
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	55 1f       	adc	r21, r21
    1b68:	aa 27       	eor	r26, r26
    1b6a:	ee 27       	eor	r30, r30
    1b6c:	ff 27       	eor	r31, r31
    1b6e:	bb 27       	eor	r27, r27
    1b70:	00 24       	eor	r0, r0
    1b72:	08 94       	sec
    1b74:	67 95       	ror	r22
    1b76:	20 f4       	brcc	.+8      	; 0x1b80 <__mulsf3_pse+0x26>
    1b78:	e2 0f       	add	r30, r18
    1b7a:	f3 1f       	adc	r31, r19
    1b7c:	b4 1f       	adc	r27, r20
    1b7e:	0a 1e       	adc	r0, r26
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	44 1f       	adc	r20, r20
    1b86:	aa 1f       	adc	r26, r26
    1b88:	66 95       	lsr	r22
    1b8a:	a9 f7       	brne	.-22     	; 0x1b76 <__mulsf3_pse+0x1c>
    1b8c:	77 95       	ror	r23
    1b8e:	30 f4       	brcc	.+12     	; 0x1b9c <__mulsf3_pse+0x42>
    1b90:	f3 0f       	add	r31, r19
    1b92:	b4 1f       	adc	r27, r20
    1b94:	0a 1e       	adc	r0, r26
    1b96:	12 1e       	adc	r1, r18
    1b98:	08 f4       	brcc	.+2      	; 0x1b9c <__mulsf3_pse+0x42>
    1b9a:	63 95       	inc	r22
    1b9c:	33 0f       	add	r19, r19
    1b9e:	44 1f       	adc	r20, r20
    1ba0:	aa 1f       	adc	r26, r26
    1ba2:	22 1f       	adc	r18, r18
    1ba4:	76 95       	lsr	r23
    1ba6:	99 f7       	brne	.-26     	; 0x1b8e <__mulsf3_pse+0x34>
    1ba8:	87 95       	ror	r24
    1baa:	20 f4       	brcc	.+8      	; 0x1bb4 <__mulsf3_pse+0x5a>
    1bac:	b4 0f       	add	r27, r20
    1bae:	0a 1e       	adc	r0, r26
    1bb0:	12 1e       	adc	r1, r18
    1bb2:	63 1f       	adc	r22, r19
    1bb4:	44 0f       	add	r20, r20
    1bb6:	aa 1f       	adc	r26, r26
    1bb8:	22 1f       	adc	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	86 95       	lsr	r24
    1bbe:	a9 f7       	brne	.-22     	; 0x1baa <__mulsf3_pse+0x50>
    1bc0:	86 2f       	mov	r24, r22
    1bc2:	71 2d       	mov	r23, r1
    1bc4:	60 2d       	mov	r22, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	9f 57       	subi	r25, 0x7F	; 127
    1bca:	50 40       	sbci	r21, 0x00	; 0
    1bcc:	8a f0       	brmi	.+34     	; 0x1bf0 <__mulsf3_pse+0x96>
    1bce:	e1 f0       	breq	.+56     	; 0x1c08 <__mulsf3_pse+0xae>
    1bd0:	88 23       	and	r24, r24
    1bd2:	4a f0       	brmi	.+18     	; 0x1be6 <__mulsf3_pse+0x8c>
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	66 1f       	adc	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	91 50       	subi	r25, 0x01	; 1
    1be2:	50 40       	sbci	r21, 0x00	; 0
    1be4:	a9 f7       	brne	.-22     	; 0x1bd0 <__mulsf3_pse+0x76>
    1be6:	9e 3f       	cpi	r25, 0xFE	; 254
    1be8:	51 05       	cpc	r21, r1
    1bea:	70 f0       	brcs	.+28     	; 0x1c08 <__mulsf3_pse+0xae>
    1bec:	54 cf       	rjmp	.-344    	; 0x1a96 <__fp_inf>
    1bee:	9e cf       	rjmp	.-196    	; 0x1b2c <__fp_szero>
    1bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf2:	ec f3       	brlt	.-6      	; 0x1bee <__mulsf3_pse+0x94>
    1bf4:	98 3e       	cpi	r25, 0xE8	; 232
    1bf6:	dc f3       	brlt	.-10     	; 0x1bee <__mulsf3_pse+0x94>
    1bf8:	86 95       	lsr	r24
    1bfa:	77 95       	ror	r23
    1bfc:	67 95       	ror	r22
    1bfe:	b7 95       	ror	r27
    1c00:	f7 95       	ror	r31
    1c02:	e7 95       	ror	r30
    1c04:	9f 5f       	subi	r25, 0xFF	; 255
    1c06:	c1 f7       	brne	.-16     	; 0x1bf8 <__mulsf3_pse+0x9e>
    1c08:	fe 2b       	or	r31, r30
    1c0a:	88 0f       	add	r24, r24
    1c0c:	91 1d       	adc	r25, r1
    1c0e:	96 95       	lsr	r25
    1c10:	87 95       	ror	r24
    1c12:	97 f9       	bld	r25, 7
    1c14:	08 95       	ret

00001c16 <__unordsf2>:
    1c16:	1b df       	rcall	.-458    	; 0x1a4e <__fp_cmp>
    1c18:	88 0b       	sbc	r24, r24
    1c1a:	99 0b       	sbc	r25, r25
    1c1c:	08 95       	ret

00001c1e <vfprintf>:
    1c1e:	a3 e1       	ldi	r26, 0x13	; 19
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e4 e1       	ldi	r30, 0x14	; 20
    1c24:	fe e0       	ldi	r31, 0x0E	; 14
    1c26:	60 c3       	rjmp	.+1728   	; 0x22e8 <__prologue_saves__>
    1c28:	7c 01       	movw	r14, r24
    1c2a:	1b 01       	movw	r2, r22
    1c2c:	6a 01       	movw	r12, r20
    1c2e:	fc 01       	movw	r30, r24
    1c30:	17 82       	std	Z+7, r1	; 0x07
    1c32:	16 82       	std	Z+6, r1	; 0x06
    1c34:	83 81       	ldd	r24, Z+3	; 0x03
    1c36:	81 ff       	sbrs	r24, 1
    1c38:	49 c3       	rjmp	.+1682   	; 0x22cc <vfprintf+0x6ae>
    1c3a:	be 01       	movw	r22, r28
    1c3c:	6f 5f       	subi	r22, 0xFF	; 255
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	4b 01       	movw	r8, r22
    1c42:	f7 01       	movw	r30, r14
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	f1 01       	movw	r30, r2
    1c48:	93 fd       	sbrc	r25, 3
    1c4a:	85 91       	lpm	r24, Z+
    1c4c:	93 ff       	sbrs	r25, 3
    1c4e:	81 91       	ld	r24, Z+
    1c50:	1f 01       	movw	r2, r30
    1c52:	88 23       	and	r24, r24
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <vfprintf+0x3a>
    1c56:	36 c3       	rjmp	.+1644   	; 0x22c4 <vfprintf+0x6a6>
    1c58:	85 32       	cpi	r24, 0x25	; 37
    1c5a:	39 f4       	brne	.+14     	; 0x1c6a <vfprintf+0x4c>
    1c5c:	93 fd       	sbrc	r25, 3
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	93 ff       	sbrs	r25, 3
    1c62:	81 91       	ld	r24, Z+
    1c64:	1f 01       	movw	r2, r30
    1c66:	85 32       	cpi	r24, 0x25	; 37
    1c68:	31 f4       	brne	.+12     	; 0x1c76 <vfprintf+0x58>
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	bd d4       	rcall	.+2426   	; 0x25ea <fputc>
    1c70:	56 01       	movw	r10, r12
    1c72:	65 01       	movw	r12, r10
    1c74:	e6 cf       	rjmp	.-52     	; 0x1c42 <vfprintf+0x24>
    1c76:	10 e0       	ldi	r17, 0x00	; 0
    1c78:	51 2c       	mov	r5, r1
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	20 32       	cpi	r18, 0x20	; 32
    1c7e:	a0 f4       	brcc	.+40     	; 0x1ca8 <vfprintf+0x8a>
    1c80:	8b 32       	cpi	r24, 0x2B	; 43
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <vfprintf+0x80>
    1c84:	30 f4       	brcc	.+12     	; 0x1c92 <vfprintf+0x74>
    1c86:	80 32       	cpi	r24, 0x20	; 32
    1c88:	59 f0       	breq	.+22     	; 0x1ca0 <vfprintf+0x82>
    1c8a:	83 32       	cpi	r24, 0x23	; 35
    1c8c:	69 f4       	brne	.+26     	; 0x1ca8 <vfprintf+0x8a>
    1c8e:	20 61       	ori	r18, 0x10	; 16
    1c90:	2c c0       	rjmp	.+88     	; 0x1cea <vfprintf+0xcc>
    1c92:	8d 32       	cpi	r24, 0x2D	; 45
    1c94:	39 f0       	breq	.+14     	; 0x1ca4 <vfprintf+0x86>
    1c96:	80 33       	cpi	r24, 0x30	; 48
    1c98:	39 f4       	brne	.+14     	; 0x1ca8 <vfprintf+0x8a>
    1c9a:	21 60       	ori	r18, 0x01	; 1
    1c9c:	26 c0       	rjmp	.+76     	; 0x1cea <vfprintf+0xcc>
    1c9e:	22 60       	ori	r18, 0x02	; 2
    1ca0:	24 60       	ori	r18, 0x04	; 4
    1ca2:	23 c0       	rjmp	.+70     	; 0x1cea <vfprintf+0xcc>
    1ca4:	28 60       	ori	r18, 0x08	; 8
    1ca6:	21 c0       	rjmp	.+66     	; 0x1cea <vfprintf+0xcc>
    1ca8:	27 fd       	sbrc	r18, 7
    1caa:	27 c0       	rjmp	.+78     	; 0x1cfa <vfprintf+0xdc>
    1cac:	30 ed       	ldi	r19, 0xD0	; 208
    1cae:	38 0f       	add	r19, r24
    1cb0:	3a 30       	cpi	r19, 0x0A	; 10
    1cb2:	78 f4       	brcc	.+30     	; 0x1cd2 <vfprintf+0xb4>
    1cb4:	26 ff       	sbrs	r18, 6
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <vfprintf+0xa6>
    1cb8:	81 2f       	mov	r24, r17
    1cba:	6a e0       	ldi	r22, 0x0A	; 10
    1cbc:	0c d3       	rcall	.+1560   	; 0x22d6 <__mulqi3>
    1cbe:	18 2f       	mov	r17, r24
    1cc0:	13 0f       	add	r17, r19
    1cc2:	13 c0       	rjmp	.+38     	; 0x1cea <vfprintf+0xcc>
    1cc4:	85 2d       	mov	r24, r5
    1cc6:	6a e0       	ldi	r22, 0x0A	; 10
    1cc8:	06 d3       	rcall	.+1548   	; 0x22d6 <__mulqi3>
    1cca:	58 2e       	mov	r5, r24
    1ccc:	53 0e       	add	r5, r19
    1cce:	20 62       	ori	r18, 0x20	; 32
    1cd0:	0c c0       	rjmp	.+24     	; 0x1cea <vfprintf+0xcc>
    1cd2:	8e 32       	cpi	r24, 0x2E	; 46
    1cd4:	21 f4       	brne	.+8      	; 0x1cde <vfprintf+0xc0>
    1cd6:	26 fd       	sbrc	r18, 6
    1cd8:	f5 c2       	rjmp	.+1514   	; 0x22c4 <vfprintf+0x6a6>
    1cda:	20 64       	ori	r18, 0x40	; 64
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <vfprintf+0xcc>
    1cde:	8c 36       	cpi	r24, 0x6C	; 108
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <vfprintf+0xc8>
    1ce2:	20 68       	ori	r18, 0x80	; 128
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <vfprintf+0xcc>
    1ce6:	88 36       	cpi	r24, 0x68	; 104
    1ce8:	41 f4       	brne	.+16     	; 0x1cfa <vfprintf+0xdc>
    1cea:	f1 01       	movw	r30, r2
    1cec:	93 fd       	sbrc	r25, 3
    1cee:	85 91       	lpm	r24, Z+
    1cf0:	93 ff       	sbrs	r25, 3
    1cf2:	81 91       	ld	r24, Z+
    1cf4:	1f 01       	movw	r2, r30
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	c1 cf       	rjmp	.-126    	; 0x1c7c <vfprintf+0x5e>
    1cfa:	9b eb       	ldi	r25, 0xBB	; 187
    1cfc:	98 0f       	add	r25, r24
    1cfe:	93 30       	cpi	r25, 0x03	; 3
    1d00:	18 f4       	brcc	.+6      	; 0x1d08 <vfprintf+0xea>
    1d02:	20 61       	ori	r18, 0x10	; 16
    1d04:	80 5e       	subi	r24, 0xE0	; 224
    1d06:	06 c0       	rjmp	.+12     	; 0x1d14 <vfprintf+0xf6>
    1d08:	9b e9       	ldi	r25, 0x9B	; 155
    1d0a:	98 0f       	add	r25, r24
    1d0c:	93 30       	cpi	r25, 0x03	; 3
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <vfprintf+0xf4>
    1d10:	9a c1       	rjmp	.+820    	; 0x2046 <vfprintf+0x428>
    1d12:	2f 7e       	andi	r18, 0xEF	; 239
    1d14:	26 ff       	sbrs	r18, 6
    1d16:	16 e0       	ldi	r17, 0x06	; 6
    1d18:	2f 73       	andi	r18, 0x3F	; 63
    1d1a:	72 2e       	mov	r7, r18
    1d1c:	85 36       	cpi	r24, 0x65	; 101
    1d1e:	21 f4       	brne	.+8      	; 0x1d28 <vfprintf+0x10a>
    1d20:	f2 2f       	mov	r31, r18
    1d22:	f0 64       	ori	r31, 0x40	; 64
    1d24:	7f 2e       	mov	r7, r31
    1d26:	08 c0       	rjmp	.+16     	; 0x1d38 <vfprintf+0x11a>
    1d28:	86 36       	cpi	r24, 0x66	; 102
    1d2a:	21 f4       	brne	.+8      	; 0x1d34 <vfprintf+0x116>
    1d2c:	62 2f       	mov	r22, r18
    1d2e:	60 68       	ori	r22, 0x80	; 128
    1d30:	76 2e       	mov	r7, r22
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <vfprintf+0x11a>
    1d34:	11 11       	cpse	r17, r1
    1d36:	11 50       	subi	r17, 0x01	; 1
    1d38:	77 fe       	sbrs	r7, 7
    1d3a:	07 c0       	rjmp	.+14     	; 0x1d4a <vfprintf+0x12c>
    1d3c:	1c 33       	cpi	r17, 0x3C	; 60
    1d3e:	48 f4       	brcc	.+18     	; 0x1d52 <vfprintf+0x134>
    1d40:	44 24       	eor	r4, r4
    1d42:	43 94       	inc	r4
    1d44:	41 0e       	add	r4, r17
    1d46:	27 e0       	ldi	r18, 0x07	; 7
    1d48:	0b c0       	rjmp	.+22     	; 0x1d60 <vfprintf+0x142>
    1d4a:	18 30       	cpi	r17, 0x08	; 8
    1d4c:	30 f4       	brcc	.+12     	; 0x1d5a <vfprintf+0x13c>
    1d4e:	21 2f       	mov	r18, r17
    1d50:	06 c0       	rjmp	.+12     	; 0x1d5e <vfprintf+0x140>
    1d52:	27 e0       	ldi	r18, 0x07	; 7
    1d54:	4c e3       	ldi	r20, 0x3C	; 60
    1d56:	44 2e       	mov	r4, r20
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <vfprintf+0x142>
    1d5a:	27 e0       	ldi	r18, 0x07	; 7
    1d5c:	17 e0       	ldi	r17, 0x07	; 7
    1d5e:	41 2c       	mov	r4, r1
    1d60:	56 01       	movw	r10, r12
    1d62:	74 e0       	ldi	r23, 0x04	; 4
    1d64:	a7 0e       	add	r10, r23
    1d66:	b1 1c       	adc	r11, r1
    1d68:	f6 01       	movw	r30, r12
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	04 2d       	mov	r16, r4
    1d74:	a4 01       	movw	r20, r8
    1d76:	0c d3       	rcall	.+1560   	; 0x2390 <__ftoa_engine>
    1d78:	6c 01       	movw	r12, r24
    1d7a:	09 81       	ldd	r16, Y+1	; 0x01
    1d7c:	00 ff       	sbrs	r16, 0
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <vfprintf+0x166>
    1d80:	03 ff       	sbrs	r16, 3
    1d82:	06 c0       	rjmp	.+12     	; 0x1d90 <vfprintf+0x172>
    1d84:	71 fc       	sbrc	r7, 1
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <vfprintf+0x178>
    1d88:	72 fc       	sbrc	r7, 2
    1d8a:	08 c0       	rjmp	.+16     	; 0x1d9c <vfprintf+0x17e>
    1d8c:	61 2c       	mov	r6, r1
    1d8e:	08 c0       	rjmp	.+16     	; 0x1da0 <vfprintf+0x182>
    1d90:	3d e2       	ldi	r19, 0x2D	; 45
    1d92:	63 2e       	mov	r6, r19
    1d94:	05 c0       	rjmp	.+10     	; 0x1da0 <vfprintf+0x182>
    1d96:	2b e2       	ldi	r18, 0x2B	; 43
    1d98:	62 2e       	mov	r6, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <vfprintf+0x182>
    1d9c:	90 e2       	ldi	r25, 0x20	; 32
    1d9e:	69 2e       	mov	r6, r25
    1da0:	80 2f       	mov	r24, r16
    1da2:	8c 70       	andi	r24, 0x0C	; 12
    1da4:	81 f1       	breq	.+96     	; 0x1e06 <vfprintf+0x1e8>
    1da6:	66 20       	and	r6, r6
    1da8:	11 f0       	breq	.+4      	; 0x1dae <vfprintf+0x190>
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <vfprintf+0x192>
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	85 15       	cp	r24, r5
    1db2:	10 f0       	brcs	.+4      	; 0x1db8 <vfprintf+0x19a>
    1db4:	51 2c       	mov	r5, r1
    1db6:	0a c0       	rjmp	.+20     	; 0x1dcc <vfprintf+0x1ae>
    1db8:	58 1a       	sub	r5, r24
    1dba:	73 fc       	sbrc	r7, 3
    1dbc:	07 c0       	rjmp	.+14     	; 0x1dcc <vfprintf+0x1ae>
    1dbe:	b7 01       	movw	r22, r14
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	12 d4       	rcall	.+2084   	; 0x25ea <fputc>
    1dc6:	5a 94       	dec	r5
    1dc8:	d1 f7       	brne	.-12     	; 0x1dbe <vfprintf+0x1a0>
    1dca:	f4 cf       	rjmp	.-24     	; 0x1db4 <vfprintf+0x196>
    1dcc:	66 20       	and	r6, r6
    1dce:	21 f0       	breq	.+8      	; 0x1dd8 <vfprintf+0x1ba>
    1dd0:	b7 01       	movw	r22, r14
    1dd2:	86 2d       	mov	r24, r6
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	09 d4       	rcall	.+2066   	; 0x25ea <fputc>
    1dd8:	03 fd       	sbrc	r16, 3
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <vfprintf+0x1c4>
    1ddc:	05 e3       	ldi	r16, 0x35	; 53
    1dde:	12 e0       	ldi	r17, 0x02	; 2
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <vfprintf+0x1c8>
    1de2:	01 e3       	ldi	r16, 0x31	; 49
    1de4:	12 e0       	ldi	r17, 0x02	; 2
    1de6:	f7 2d       	mov	r31, r7
    1de8:	f0 71       	andi	r31, 0x10	; 16
    1dea:	7f 2e       	mov	r7, r31
    1dec:	f8 01       	movw	r30, r16
    1dee:	84 91       	lpm	r24, Z
    1df0:	88 23       	and	r24, r24
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <vfprintf+0x1d8>
    1df4:	5e c2       	rjmp	.+1212   	; 0x22b2 <vfprintf+0x694>
    1df6:	71 10       	cpse	r7, r1
    1df8:	80 52       	subi	r24, 0x20	; 32
    1dfa:	b7 01       	movw	r22, r14
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	f5 d3       	rcall	.+2026   	; 0x25ea <fputc>
    1e00:	0f 5f       	subi	r16, 0xFF	; 255
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	f3 cf       	rjmp	.-26     	; 0x1dec <vfprintf+0x1ce>
    1e06:	77 fe       	sbrs	r7, 7
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <vfprintf+0x20a>
    1e0a:	4c 0c       	add	r4, r12
    1e0c:	04 ff       	sbrs	r16, 4
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <vfprintf+0x1fa>
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	81 33       	cpi	r24, 0x31	; 49
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <vfprintf+0x1fa>
    1e16:	4a 94       	dec	r4
    1e18:	14 14       	cp	r1, r4
    1e1a:	74 f5       	brge	.+92     	; 0x1e78 <vfprintf+0x25a>
    1e1c:	f8 e0       	ldi	r31, 0x08	; 8
    1e1e:	f4 15       	cp	r31, r4
    1e20:	78 f5       	brcc	.+94     	; 0x1e80 <vfprintf+0x262>
    1e22:	88 e0       	ldi	r24, 0x08	; 8
    1e24:	48 2e       	mov	r4, r24
    1e26:	2c c0       	rjmp	.+88     	; 0x1e80 <vfprintf+0x262>
    1e28:	76 fc       	sbrc	r7, 6
    1e2a:	2a c0       	rjmp	.+84     	; 0x1e80 <vfprintf+0x262>
    1e2c:	81 2f       	mov	r24, r17
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	8c 15       	cp	r24, r12
    1e32:	9d 05       	cpc	r25, r13
    1e34:	9c f0       	brlt	.+38     	; 0x1e5c <vfprintf+0x23e>
    1e36:	6c ef       	ldi	r22, 0xFC	; 252
    1e38:	c6 16       	cp	r12, r22
    1e3a:	6f ef       	ldi	r22, 0xFF	; 255
    1e3c:	d6 06       	cpc	r13, r22
    1e3e:	74 f0       	brlt	.+28     	; 0x1e5c <vfprintf+0x23e>
    1e40:	77 2d       	mov	r23, r7
    1e42:	70 68       	ori	r23, 0x80	; 128
    1e44:	77 2e       	mov	r7, r23
    1e46:	0a c0       	rjmp	.+20     	; 0x1e5c <vfprintf+0x23e>
    1e48:	e2 e0       	ldi	r30, 0x02	; 2
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	ec 0f       	add	r30, r28
    1e4e:	fd 1f       	adc	r31, r29
    1e50:	e1 0f       	add	r30, r17
    1e52:	f1 1d       	adc	r31, r1
    1e54:	80 81       	ld	r24, Z
    1e56:	80 33       	cpi	r24, 0x30	; 48
    1e58:	19 f4       	brne	.+6      	; 0x1e60 <vfprintf+0x242>
    1e5a:	11 50       	subi	r17, 0x01	; 1
    1e5c:	11 11       	cpse	r17, r1
    1e5e:	f4 cf       	rjmp	.-24     	; 0x1e48 <vfprintf+0x22a>
    1e60:	77 fe       	sbrs	r7, 7
    1e62:	0e c0       	rjmp	.+28     	; 0x1e80 <vfprintf+0x262>
    1e64:	44 24       	eor	r4, r4
    1e66:	43 94       	inc	r4
    1e68:	41 0e       	add	r4, r17
    1e6a:	81 2f       	mov	r24, r17
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	c8 16       	cp	r12, r24
    1e70:	d9 06       	cpc	r13, r25
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <vfprintf+0x260>
    1e74:	1c 19       	sub	r17, r12
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <vfprintf+0x262>
    1e78:	44 24       	eor	r4, r4
    1e7a:	43 94       	inc	r4
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <vfprintf+0x262>
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	77 fe       	sbrs	r7, 7
    1e82:	07 c0       	rjmp	.+14     	; 0x1e92 <vfprintf+0x274>
    1e84:	1c 14       	cp	r1, r12
    1e86:	1d 04       	cpc	r1, r13
    1e88:	3c f4       	brge	.+14     	; 0x1e98 <vfprintf+0x27a>
    1e8a:	96 01       	movw	r18, r12
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x27e>
    1e92:	25 e0       	ldi	r18, 0x05	; 5
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <vfprintf+0x27e>
    1e98:	21 e0       	ldi	r18, 0x01	; 1
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	66 20       	and	r6, r6
    1e9e:	11 f0       	breq	.+4      	; 0x1ea4 <vfprintf+0x286>
    1ea0:	2f 5f       	subi	r18, 0xFF	; 255
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	11 23       	and	r17, r17
    1ea6:	31 f0       	breq	.+12     	; 0x1eb4 <vfprintf+0x296>
    1ea8:	41 2f       	mov	r20, r17
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	4f 5f       	subi	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	24 0f       	add	r18, r20
    1eb2:	35 1f       	adc	r19, r21
    1eb4:	45 2d       	mov	r20, r5
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	24 17       	cp	r18, r20
    1eba:	35 07       	cpc	r19, r21
    1ebc:	14 f4       	brge	.+4      	; 0x1ec2 <vfprintf+0x2a4>
    1ebe:	52 1a       	sub	r5, r18
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <vfprintf+0x2a6>
    1ec2:	51 2c       	mov	r5, r1
    1ec4:	87 2d       	mov	r24, r7
    1ec6:	89 70       	andi	r24, 0x09	; 9
    1ec8:	41 f4       	brne	.+16     	; 0x1eda <vfprintf+0x2bc>
    1eca:	55 20       	and	r5, r5
    1ecc:	31 f0       	breq	.+12     	; 0x1eda <vfprintf+0x2bc>
    1ece:	b7 01       	movw	r22, r14
    1ed0:	80 e2       	ldi	r24, 0x20	; 32
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	8a d3       	rcall	.+1812   	; 0x25ea <fputc>
    1ed6:	5a 94       	dec	r5
    1ed8:	f8 cf       	rjmp	.-16     	; 0x1eca <vfprintf+0x2ac>
    1eda:	66 20       	and	r6, r6
    1edc:	21 f0       	breq	.+8      	; 0x1ee6 <vfprintf+0x2c8>
    1ede:	b7 01       	movw	r22, r14
    1ee0:	86 2d       	mov	r24, r6
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	82 d3       	rcall	.+1796   	; 0x25ea <fputc>
    1ee6:	73 fc       	sbrc	r7, 3
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <vfprintf+0x2dc>
    1eea:	55 20       	and	r5, r5
    1eec:	31 f0       	breq	.+12     	; 0x1efa <vfprintf+0x2dc>
    1eee:	b7 01       	movw	r22, r14
    1ef0:	80 e3       	ldi	r24, 0x30	; 48
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	7a d3       	rcall	.+1780   	; 0x25ea <fputc>
    1ef6:	5a 94       	dec	r5
    1ef8:	f8 cf       	rjmp	.-16     	; 0x1eea <vfprintf+0x2cc>
    1efa:	77 fe       	sbrs	r7, 7
    1efc:	5d c0       	rjmp	.+186    	; 0x1fb8 <vfprintf+0x39a>
    1efe:	9c 2d       	mov	r25, r12
    1f00:	8d 2d       	mov	r24, r13
    1f02:	d7 fe       	sbrs	r13, 7
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <vfprintf+0x2ec>
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	69 2e       	mov	r6, r25
    1f0c:	78 2e       	mov	r7, r24
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	c6 01       	movw	r24, r12
    1f14:	84 19       	sub	r24, r4
    1f16:	91 09       	sbc	r25, r1
    1f18:	9d 87       	std	Y+13, r25	; 0x0d
    1f1a:	8c 87       	std	Y+12, r24	; 0x0c
    1f1c:	96 01       	movw	r18, r12
    1f1e:	26 19       	sub	r18, r6
    1f20:	37 09       	sbc	r19, r7
    1f22:	28 0d       	add	r18, r8
    1f24:	39 1d       	adc	r19, r9
    1f26:	81 2f       	mov	r24, r17
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	ee 27       	eor	r30, r30
    1f2c:	ff 27       	eor	r31, r31
    1f2e:	e8 1b       	sub	r30, r24
    1f30:	f9 0b       	sbc	r31, r25
    1f32:	ff 87       	std	Y+15, r31	; 0x0f
    1f34:	ee 87       	std	Y+14, r30	; 0x0e
    1f36:	ff ef       	ldi	r31, 0xFF	; 255
    1f38:	6f 16       	cp	r6, r31
    1f3a:	7f 06       	cpc	r7, r31
    1f3c:	61 f4       	brne	.+24     	; 0x1f56 <vfprintf+0x338>
    1f3e:	b7 01       	movw	r22, r14
    1f40:	8e e2       	ldi	r24, 0x2E	; 46
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	2b 8b       	std	Y+19, r18	; 0x13
    1f46:	3a 8b       	std	Y+18, r19	; 0x12
    1f48:	48 8b       	std	Y+16, r20	; 0x10
    1f4a:	59 8b       	std	Y+17, r21	; 0x11
    1f4c:	4e d3       	rcall	.+1692   	; 0x25ea <fputc>
    1f4e:	59 89       	ldd	r21, Y+17	; 0x11
    1f50:	48 89       	ldd	r20, Y+16	; 0x10
    1f52:	3a 89       	ldd	r19, Y+18	; 0x12
    1f54:	2b 89       	ldd	r18, Y+19	; 0x13
    1f56:	c6 14       	cp	r12, r6
    1f58:	d7 04       	cpc	r13, r7
    1f5a:	54 f0       	brlt	.+20     	; 0x1f70 <vfprintf+0x352>
    1f5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f60:	66 15       	cp	r22, r6
    1f62:	77 05       	cpc	r23, r7
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <vfprintf+0x352>
    1f66:	f9 01       	movw	r30, r18
    1f68:	e4 0f       	add	r30, r20
    1f6a:	f5 1f       	adc	r31, r21
    1f6c:	81 81       	ldd	r24, Z+1	; 0x01
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <vfprintf+0x354>
    1f70:	80 e3       	ldi	r24, 0x30	; 48
    1f72:	71 e0       	ldi	r23, 0x01	; 1
    1f74:	67 1a       	sub	r6, r23
    1f76:	71 08       	sbc	r7, r1
    1f78:	4f 5f       	subi	r20, 0xFF	; 255
    1f7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f7e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f80:	6e 16       	cp	r6, r30
    1f82:	7f 06       	cpc	r7, r31
    1f84:	64 f0       	brlt	.+24     	; 0x1f9e <vfprintf+0x380>
    1f86:	b7 01       	movw	r22, r14
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	2b 8b       	std	Y+19, r18	; 0x13
    1f8c:	3a 8b       	std	Y+18, r19	; 0x12
    1f8e:	48 8b       	std	Y+16, r20	; 0x10
    1f90:	59 8b       	std	Y+17, r21	; 0x11
    1f92:	2b d3       	rcall	.+1622   	; 0x25ea <fputc>
    1f94:	2b 89       	ldd	r18, Y+19	; 0x13
    1f96:	3a 89       	ldd	r19, Y+18	; 0x12
    1f98:	48 89       	ldd	r20, Y+16	; 0x10
    1f9a:	59 89       	ldd	r21, Y+17	; 0x11
    1f9c:	cc cf       	rjmp	.-104    	; 0x1f36 <vfprintf+0x318>
    1f9e:	6c 14       	cp	r6, r12
    1fa0:	7d 04       	cpc	r7, r13
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <vfprintf+0x394>
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	96 33       	cpi	r25, 0x36	; 54
    1fa8:	18 f4       	brcc	.+6      	; 0x1fb0 <vfprintf+0x392>
    1faa:	95 33       	cpi	r25, 0x35	; 53
    1fac:	11 f4       	brne	.+4      	; 0x1fb2 <vfprintf+0x394>
    1fae:	04 ff       	sbrs	r16, 4
    1fb0:	81 e3       	ldi	r24, 0x31	; 49
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	45 c0       	rjmp	.+138    	; 0x2042 <vfprintf+0x424>
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	81 33       	cpi	r24, 0x31	; 49
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <vfprintf+0x3a2>
    1fbe:	0f 7e       	andi	r16, 0xEF	; 239
    1fc0:	b7 01       	movw	r22, r14
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	12 d3       	rcall	.+1572   	; 0x25ea <fputc>
    1fc6:	11 11       	cpse	r17, r1
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <vfprintf+0x3b6>
    1fca:	74 fe       	sbrs	r7, 4
    1fcc:	16 c0       	rjmp	.+44     	; 0x1ffa <vfprintf+0x3dc>
    1fce:	85 e4       	ldi	r24, 0x45	; 69
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	15 c0       	rjmp	.+42     	; 0x1ffe <vfprintf+0x3e0>
    1fd4:	b7 01       	movw	r22, r14
    1fd6:	8e e2       	ldi	r24, 0x2E	; 46
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	07 d3       	rcall	.+1550   	; 0x25ea <fputc>
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	66 24       	eor	r6, r6
    1fe0:	63 94       	inc	r6
    1fe2:	68 0e       	add	r6, r24
    1fe4:	f4 01       	movw	r30, r8
    1fe6:	e8 0f       	add	r30, r24
    1fe8:	f1 1d       	adc	r31, r1
    1fea:	80 81       	ld	r24, Z
    1fec:	b7 01       	movw	r22, r14
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	fc d2       	rcall	.+1528   	; 0x25ea <fputc>
    1ff2:	11 50       	subi	r17, 0x01	; 1
    1ff4:	51 f3       	breq	.-44     	; 0x1fca <vfprintf+0x3ac>
    1ff6:	86 2d       	mov	r24, r6
    1ff8:	f2 cf       	rjmp	.-28     	; 0x1fde <vfprintf+0x3c0>
    1ffa:	85 e6       	ldi	r24, 0x65	; 101
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	b7 01       	movw	r22, r14
    2000:	f4 d2       	rcall	.+1512   	; 0x25ea <fputc>
    2002:	d7 fc       	sbrc	r13, 7
    2004:	05 c0       	rjmp	.+10     	; 0x2010 <vfprintf+0x3f2>
    2006:	c1 14       	cp	r12, r1
    2008:	d1 04       	cpc	r13, r1
    200a:	39 f4       	brne	.+14     	; 0x201a <vfprintf+0x3fc>
    200c:	04 ff       	sbrs	r16, 4
    200e:	05 c0       	rjmp	.+10     	; 0x201a <vfprintf+0x3fc>
    2010:	d1 94       	neg	r13
    2012:	c1 94       	neg	r12
    2014:	d1 08       	sbc	r13, r1
    2016:	8d e2       	ldi	r24, 0x2D	; 45
    2018:	01 c0       	rjmp	.+2      	; 0x201c <vfprintf+0x3fe>
    201a:	8b e2       	ldi	r24, 0x2B	; 43
    201c:	b7 01       	movw	r22, r14
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	e4 d2       	rcall	.+1480   	; 0x25ea <fputc>
    2022:	80 e3       	ldi	r24, 0x30	; 48
    2024:	6a e0       	ldi	r22, 0x0A	; 10
    2026:	c6 16       	cp	r12, r22
    2028:	d1 04       	cpc	r13, r1
    202a:	2c f0       	brlt	.+10     	; 0x2036 <vfprintf+0x418>
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	fa e0       	ldi	r31, 0x0A	; 10
    2030:	cf 1a       	sub	r12, r31
    2032:	d1 08       	sbc	r13, r1
    2034:	f7 cf       	rjmp	.-18     	; 0x2024 <vfprintf+0x406>
    2036:	b7 01       	movw	r22, r14
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	d7 d2       	rcall	.+1454   	; 0x25ea <fputc>
    203c:	b7 01       	movw	r22, r14
    203e:	c6 01       	movw	r24, r12
    2040:	c0 96       	adiw	r24, 0x30	; 48
    2042:	d3 d2       	rcall	.+1446   	; 0x25ea <fputc>
    2044:	36 c1       	rjmp	.+620    	; 0x22b2 <vfprintf+0x694>
    2046:	83 36       	cpi	r24, 0x63	; 99
    2048:	31 f0       	breq	.+12     	; 0x2056 <vfprintf+0x438>
    204a:	83 37       	cpi	r24, 0x73	; 115
    204c:	79 f0       	breq	.+30     	; 0x206c <vfprintf+0x44e>
    204e:	83 35       	cpi	r24, 0x53	; 83
    2050:	09 f0       	breq	.+2      	; 0x2054 <vfprintf+0x436>
    2052:	54 c0       	rjmp	.+168    	; 0x20fc <vfprintf+0x4de>
    2054:	20 c0       	rjmp	.+64     	; 0x2096 <vfprintf+0x478>
    2056:	56 01       	movw	r10, r12
    2058:	72 e0       	ldi	r23, 0x02	; 2
    205a:	a7 0e       	add	r10, r23
    205c:	b1 1c       	adc	r11, r1
    205e:	f6 01       	movw	r30, r12
    2060:	80 81       	ld	r24, Z
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	01 e0       	ldi	r16, 0x01	; 1
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	64 01       	movw	r12, r8
    206a:	13 c0       	rjmp	.+38     	; 0x2092 <vfprintf+0x474>
    206c:	56 01       	movw	r10, r12
    206e:	f2 e0       	ldi	r31, 0x02	; 2
    2070:	af 0e       	add	r10, r31
    2072:	b1 1c       	adc	r11, r1
    2074:	f6 01       	movw	r30, r12
    2076:	c0 80       	ld	r12, Z
    2078:	d1 80       	ldd	r13, Z+1	; 0x01
    207a:	26 ff       	sbrs	r18, 6
    207c:	03 c0       	rjmp	.+6      	; 0x2084 <vfprintf+0x466>
    207e:	61 2f       	mov	r22, r17
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <vfprintf+0x46a>
    2084:	6f ef       	ldi	r22, 0xFF	; 255
    2086:	7f ef       	ldi	r23, 0xFF	; 255
    2088:	c6 01       	movw	r24, r12
    208a:	2b 8b       	std	Y+19, r18	; 0x13
    208c:	8a d2       	rcall	.+1300   	; 0x25a2 <strnlen>
    208e:	8c 01       	movw	r16, r24
    2090:	2b 89       	ldd	r18, Y+19	; 0x13
    2092:	2f 77       	andi	r18, 0x7F	; 127
    2094:	14 c0       	rjmp	.+40     	; 0x20be <vfprintf+0x4a0>
    2096:	56 01       	movw	r10, r12
    2098:	f2 e0       	ldi	r31, 0x02	; 2
    209a:	af 0e       	add	r10, r31
    209c:	b1 1c       	adc	r11, r1
    209e:	f6 01       	movw	r30, r12
    20a0:	c0 80       	ld	r12, Z
    20a2:	d1 80       	ldd	r13, Z+1	; 0x01
    20a4:	26 ff       	sbrs	r18, 6
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <vfprintf+0x490>
    20a8:	61 2f       	mov	r22, r17
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <vfprintf+0x494>
    20ae:	6f ef       	ldi	r22, 0xFF	; 255
    20b0:	7f ef       	ldi	r23, 0xFF	; 255
    20b2:	c6 01       	movw	r24, r12
    20b4:	2b 8b       	std	Y+19, r18	; 0x13
    20b6:	5b d2       	rcall	.+1206   	; 0x256e <strnlen_P>
    20b8:	8c 01       	movw	r16, r24
    20ba:	2b 89       	ldd	r18, Y+19	; 0x13
    20bc:	20 68       	ori	r18, 0x80	; 128
    20be:	72 2e       	mov	r7, r18
    20c0:	23 fd       	sbrc	r18, 3
    20c2:	18 c0       	rjmp	.+48     	; 0x20f4 <vfprintf+0x4d6>
    20c4:	85 2d       	mov	r24, r5
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	08 17       	cp	r16, r24
    20ca:	19 07       	cpc	r17, r25
    20cc:	98 f4       	brcc	.+38     	; 0x20f4 <vfprintf+0x4d6>
    20ce:	b7 01       	movw	r22, r14
    20d0:	80 e2       	ldi	r24, 0x20	; 32
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	8a d2       	rcall	.+1300   	; 0x25ea <fputc>
    20d6:	5a 94       	dec	r5
    20d8:	f5 cf       	rjmp	.-22     	; 0x20c4 <vfprintf+0x4a6>
    20da:	f6 01       	movw	r30, r12
    20dc:	77 fc       	sbrc	r7, 7
    20de:	85 91       	lpm	r24, Z+
    20e0:	77 fe       	sbrs	r7, 7
    20e2:	81 91       	ld	r24, Z+
    20e4:	6f 01       	movw	r12, r30
    20e6:	b7 01       	movw	r22, r14
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	7f d2       	rcall	.+1278   	; 0x25ea <fputc>
    20ec:	51 10       	cpse	r5, r1
    20ee:	5a 94       	dec	r5
    20f0:	01 50       	subi	r16, 0x01	; 1
    20f2:	11 09       	sbc	r17, r1
    20f4:	01 15       	cp	r16, r1
    20f6:	11 05       	cpc	r17, r1
    20f8:	81 f7       	brne	.-32     	; 0x20da <vfprintf+0x4bc>
    20fa:	db c0       	rjmp	.+438    	; 0x22b2 <vfprintf+0x694>
    20fc:	84 36       	cpi	r24, 0x64	; 100
    20fe:	11 f0       	breq	.+4      	; 0x2104 <vfprintf+0x4e6>
    2100:	89 36       	cpi	r24, 0x69	; 105
    2102:	49 f5       	brne	.+82     	; 0x2156 <vfprintf+0x538>
    2104:	56 01       	movw	r10, r12
    2106:	27 ff       	sbrs	r18, 7
    2108:	09 c0       	rjmp	.+18     	; 0x211c <vfprintf+0x4fe>
    210a:	f4 e0       	ldi	r31, 0x04	; 4
    210c:	af 0e       	add	r10, r31
    210e:	b1 1c       	adc	r11, r1
    2110:	f6 01       	movw	r30, r12
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	93 81       	ldd	r25, Z+3	; 0x03
    211a:	0a c0       	rjmp	.+20     	; 0x2130 <vfprintf+0x512>
    211c:	f2 e0       	ldi	r31, 0x02	; 2
    211e:	af 0e       	add	r10, r31
    2120:	b1 1c       	adc	r11, r1
    2122:	f6 01       	movw	r30, r12
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	88 27       	eor	r24, r24
    212a:	77 fd       	sbrc	r23, 7
    212c:	80 95       	com	r24
    212e:	98 2f       	mov	r25, r24
    2130:	02 2f       	mov	r16, r18
    2132:	0f 76       	andi	r16, 0x6F	; 111
    2134:	97 ff       	sbrs	r25, 7
    2136:	08 c0       	rjmp	.+16     	; 0x2148 <vfprintf+0x52a>
    2138:	90 95       	com	r25
    213a:	80 95       	com	r24
    213c:	70 95       	com	r23
    213e:	61 95       	neg	r22
    2140:	7f 4f       	sbci	r23, 0xFF	; 255
    2142:	8f 4f       	sbci	r24, 0xFF	; 255
    2144:	9f 4f       	sbci	r25, 0xFF	; 255
    2146:	00 68       	ori	r16, 0x80	; 128
    2148:	2a e0       	ldi	r18, 0x0A	; 10
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	a4 01       	movw	r20, r8
    214e:	7f d2       	rcall	.+1278   	; 0x264e <__ultoa_invert>
    2150:	c8 2e       	mov	r12, r24
    2152:	c8 18       	sub	r12, r8
    2154:	3d c0       	rjmp	.+122    	; 0x21d0 <vfprintf+0x5b2>
    2156:	02 2f       	mov	r16, r18
    2158:	85 37       	cpi	r24, 0x75	; 117
    215a:	21 f4       	brne	.+8      	; 0x2164 <vfprintf+0x546>
    215c:	0f 7e       	andi	r16, 0xEF	; 239
    215e:	2a e0       	ldi	r18, 0x0A	; 10
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	1d c0       	rjmp	.+58     	; 0x219e <vfprintf+0x580>
    2164:	09 7f       	andi	r16, 0xF9	; 249
    2166:	8f 36       	cpi	r24, 0x6F	; 111
    2168:	91 f0       	breq	.+36     	; 0x218e <vfprintf+0x570>
    216a:	18 f4       	brcc	.+6      	; 0x2172 <vfprintf+0x554>
    216c:	88 35       	cpi	r24, 0x58	; 88
    216e:	59 f0       	breq	.+22     	; 0x2186 <vfprintf+0x568>
    2170:	a9 c0       	rjmp	.+338    	; 0x22c4 <vfprintf+0x6a6>
    2172:	80 37       	cpi	r24, 0x70	; 112
    2174:	19 f0       	breq	.+6      	; 0x217c <vfprintf+0x55e>
    2176:	88 37       	cpi	r24, 0x78	; 120
    2178:	11 f0       	breq	.+4      	; 0x217e <vfprintf+0x560>
    217a:	a4 c0       	rjmp	.+328    	; 0x22c4 <vfprintf+0x6a6>
    217c:	00 61       	ori	r16, 0x10	; 16
    217e:	04 ff       	sbrs	r16, 4
    2180:	09 c0       	rjmp	.+18     	; 0x2194 <vfprintf+0x576>
    2182:	04 60       	ori	r16, 0x04	; 4
    2184:	07 c0       	rjmp	.+14     	; 0x2194 <vfprintf+0x576>
    2186:	24 ff       	sbrs	r18, 4
    2188:	08 c0       	rjmp	.+16     	; 0x219a <vfprintf+0x57c>
    218a:	06 60       	ori	r16, 0x06	; 6
    218c:	06 c0       	rjmp	.+12     	; 0x219a <vfprintf+0x57c>
    218e:	28 e0       	ldi	r18, 0x08	; 8
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	05 c0       	rjmp	.+10     	; 0x219e <vfprintf+0x580>
    2194:	20 e1       	ldi	r18, 0x10	; 16
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	02 c0       	rjmp	.+4      	; 0x219e <vfprintf+0x580>
    219a:	20 e1       	ldi	r18, 0x10	; 16
    219c:	32 e0       	ldi	r19, 0x02	; 2
    219e:	56 01       	movw	r10, r12
    21a0:	07 ff       	sbrs	r16, 7
    21a2:	09 c0       	rjmp	.+18     	; 0x21b6 <vfprintf+0x598>
    21a4:	f4 e0       	ldi	r31, 0x04	; 4
    21a6:	af 0e       	add	r10, r31
    21a8:	b1 1c       	adc	r11, r1
    21aa:	f6 01       	movw	r30, r12
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	82 81       	ldd	r24, Z+2	; 0x02
    21b2:	93 81       	ldd	r25, Z+3	; 0x03
    21b4:	08 c0       	rjmp	.+16     	; 0x21c6 <vfprintf+0x5a8>
    21b6:	f2 e0       	ldi	r31, 0x02	; 2
    21b8:	af 0e       	add	r10, r31
    21ba:	b1 1c       	adc	r11, r1
    21bc:	f6 01       	movw	r30, r12
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a4 01       	movw	r20, r8
    21c8:	42 d2       	rcall	.+1156   	; 0x264e <__ultoa_invert>
    21ca:	c8 2e       	mov	r12, r24
    21cc:	c8 18       	sub	r12, r8
    21ce:	0f 77       	andi	r16, 0x7F	; 127
    21d0:	06 ff       	sbrs	r16, 6
    21d2:	0b c0       	rjmp	.+22     	; 0x21ea <vfprintf+0x5cc>
    21d4:	20 2f       	mov	r18, r16
    21d6:	2e 7f       	andi	r18, 0xFE	; 254
    21d8:	c1 16       	cp	r12, r17
    21da:	50 f4       	brcc	.+20     	; 0x21f0 <vfprintf+0x5d2>
    21dc:	04 ff       	sbrs	r16, 4
    21de:	0a c0       	rjmp	.+20     	; 0x21f4 <vfprintf+0x5d6>
    21e0:	02 fd       	sbrc	r16, 2
    21e2:	08 c0       	rjmp	.+16     	; 0x21f4 <vfprintf+0x5d6>
    21e4:	20 2f       	mov	r18, r16
    21e6:	2e 7e       	andi	r18, 0xEE	; 238
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <vfprintf+0x5d6>
    21ea:	dc 2c       	mov	r13, r12
    21ec:	20 2f       	mov	r18, r16
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <vfprintf+0x5d8>
    21f0:	dc 2c       	mov	r13, r12
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <vfprintf+0x5d8>
    21f4:	d1 2e       	mov	r13, r17
    21f6:	24 ff       	sbrs	r18, 4
    21f8:	0d c0       	rjmp	.+26     	; 0x2214 <vfprintf+0x5f6>
    21fa:	fe 01       	movw	r30, r28
    21fc:	ec 0d       	add	r30, r12
    21fe:	f1 1d       	adc	r31, r1
    2200:	80 81       	ld	r24, Z
    2202:	80 33       	cpi	r24, 0x30	; 48
    2204:	11 f4       	brne	.+4      	; 0x220a <vfprintf+0x5ec>
    2206:	29 7e       	andi	r18, 0xE9	; 233
    2208:	09 c0       	rjmp	.+18     	; 0x221c <vfprintf+0x5fe>
    220a:	22 ff       	sbrs	r18, 2
    220c:	06 c0       	rjmp	.+12     	; 0x221a <vfprintf+0x5fc>
    220e:	d3 94       	inc	r13
    2210:	d3 94       	inc	r13
    2212:	04 c0       	rjmp	.+8      	; 0x221c <vfprintf+0x5fe>
    2214:	82 2f       	mov	r24, r18
    2216:	86 78       	andi	r24, 0x86	; 134
    2218:	09 f0       	breq	.+2      	; 0x221c <vfprintf+0x5fe>
    221a:	d3 94       	inc	r13
    221c:	23 fd       	sbrc	r18, 3
    221e:	12 c0       	rjmp	.+36     	; 0x2244 <vfprintf+0x626>
    2220:	20 ff       	sbrs	r18, 0
    2222:	06 c0       	rjmp	.+12     	; 0x2230 <vfprintf+0x612>
    2224:	1c 2d       	mov	r17, r12
    2226:	d5 14       	cp	r13, r5
    2228:	18 f4       	brcc	.+6      	; 0x2230 <vfprintf+0x612>
    222a:	15 0d       	add	r17, r5
    222c:	1d 19       	sub	r17, r13
    222e:	d5 2c       	mov	r13, r5
    2230:	d5 14       	cp	r13, r5
    2232:	60 f4       	brcc	.+24     	; 0x224c <vfprintf+0x62e>
    2234:	b7 01       	movw	r22, r14
    2236:	80 e2       	ldi	r24, 0x20	; 32
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	2b 8b       	std	Y+19, r18	; 0x13
    223c:	d6 d1       	rcall	.+940    	; 0x25ea <fputc>
    223e:	d3 94       	inc	r13
    2240:	2b 89       	ldd	r18, Y+19	; 0x13
    2242:	f6 cf       	rjmp	.-20     	; 0x2230 <vfprintf+0x612>
    2244:	d5 14       	cp	r13, r5
    2246:	10 f4       	brcc	.+4      	; 0x224c <vfprintf+0x62e>
    2248:	5d 18       	sub	r5, r13
    224a:	01 c0       	rjmp	.+2      	; 0x224e <vfprintf+0x630>
    224c:	51 2c       	mov	r5, r1
    224e:	24 ff       	sbrs	r18, 4
    2250:	11 c0       	rjmp	.+34     	; 0x2274 <vfprintf+0x656>
    2252:	b7 01       	movw	r22, r14
    2254:	80 e3       	ldi	r24, 0x30	; 48
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	2b 8b       	std	Y+19, r18	; 0x13
    225a:	c7 d1       	rcall	.+910    	; 0x25ea <fputc>
    225c:	2b 89       	ldd	r18, Y+19	; 0x13
    225e:	22 ff       	sbrs	r18, 2
    2260:	16 c0       	rjmp	.+44     	; 0x228e <vfprintf+0x670>
    2262:	21 ff       	sbrs	r18, 1
    2264:	03 c0       	rjmp	.+6      	; 0x226c <vfprintf+0x64e>
    2266:	88 e5       	ldi	r24, 0x58	; 88
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0x652>
    226c:	88 e7       	ldi	r24, 0x78	; 120
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	b7 01       	movw	r22, r14
    2272:	0c c0       	rjmp	.+24     	; 0x228c <vfprintf+0x66e>
    2274:	82 2f       	mov	r24, r18
    2276:	86 78       	andi	r24, 0x86	; 134
    2278:	51 f0       	breq	.+20     	; 0x228e <vfprintf+0x670>
    227a:	21 fd       	sbrc	r18, 1
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <vfprintf+0x664>
    227e:	80 e2       	ldi	r24, 0x20	; 32
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <vfprintf+0x666>
    2282:	8b e2       	ldi	r24, 0x2B	; 43
    2284:	27 fd       	sbrc	r18, 7
    2286:	8d e2       	ldi	r24, 0x2D	; 45
    2288:	b7 01       	movw	r22, r14
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	ae d1       	rcall	.+860    	; 0x25ea <fputc>
    228e:	c1 16       	cp	r12, r17
    2290:	30 f4       	brcc	.+12     	; 0x229e <vfprintf+0x680>
    2292:	b7 01       	movw	r22, r14
    2294:	80 e3       	ldi	r24, 0x30	; 48
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a8 d1       	rcall	.+848    	; 0x25ea <fputc>
    229a:	11 50       	subi	r17, 0x01	; 1
    229c:	f8 cf       	rjmp	.-16     	; 0x228e <vfprintf+0x670>
    229e:	ca 94       	dec	r12
    22a0:	f4 01       	movw	r30, r8
    22a2:	ec 0d       	add	r30, r12
    22a4:	f1 1d       	adc	r31, r1
    22a6:	80 81       	ld	r24, Z
    22a8:	b7 01       	movw	r22, r14
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9e d1       	rcall	.+828    	; 0x25ea <fputc>
    22ae:	c1 10       	cpse	r12, r1
    22b0:	f6 cf       	rjmp	.-20     	; 0x229e <vfprintf+0x680>
    22b2:	55 20       	and	r5, r5
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <vfprintf+0x69a>
    22b6:	dd cc       	rjmp	.-1606   	; 0x1c72 <vfprintf+0x54>
    22b8:	b7 01       	movw	r22, r14
    22ba:	80 e2       	ldi	r24, 0x20	; 32
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	95 d1       	rcall	.+810    	; 0x25ea <fputc>
    22c0:	5a 94       	dec	r5
    22c2:	f7 cf       	rjmp	.-18     	; 0x22b2 <vfprintf+0x694>
    22c4:	f7 01       	movw	r30, r14
    22c6:	86 81       	ldd	r24, Z+6	; 0x06
    22c8:	97 81       	ldd	r25, Z+7	; 0x07
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <vfprintf+0x6b2>
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	9f ef       	ldi	r25, 0xFF	; 255
    22d0:	63 96       	adiw	r28, 0x13	; 19
    22d2:	e2 e1       	ldi	r30, 0x12	; 18
    22d4:	25 c0       	rjmp	.+74     	; 0x2320 <__epilogue_restores__>

000022d6 <__mulqi3>:
    22d6:	00 24       	eor	r0, r0

000022d8 <__mulqi3_loop>:
    22d8:	80 fd       	sbrc	r24, 0
    22da:	06 0e       	add	r0, r22
    22dc:	66 0f       	add	r22, r22
    22de:	11 f0       	breq	.+4      	; 0x22e4 <__mulqi3_exit>
    22e0:	86 95       	lsr	r24
    22e2:	d1 f7       	brne	.-12     	; 0x22d8 <__mulqi3_loop>

000022e4 <__mulqi3_exit>:
    22e4:	80 2d       	mov	r24, r0
    22e6:	08 95       	ret

000022e8 <__prologue_saves__>:
    22e8:	2f 92       	push	r2
    22ea:	3f 92       	push	r3
    22ec:	4f 92       	push	r4
    22ee:	5f 92       	push	r5
    22f0:	6f 92       	push	r6
    22f2:	7f 92       	push	r7
    22f4:	8f 92       	push	r8
    22f6:	9f 92       	push	r9
    22f8:	af 92       	push	r10
    22fa:	bf 92       	push	r11
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	ca 1b       	sub	r28, r26
    2312:	db 0b       	sbc	r29, r27
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	09 94       	ijmp

00002320 <__epilogue_restores__>:
    2320:	2a 88       	ldd	r2, Y+18	; 0x12
    2322:	39 88       	ldd	r3, Y+17	; 0x11
    2324:	48 88       	ldd	r4, Y+16	; 0x10
    2326:	5f 84       	ldd	r5, Y+15	; 0x0f
    2328:	6e 84       	ldd	r6, Y+14	; 0x0e
    232a:	7d 84       	ldd	r7, Y+13	; 0x0d
    232c:	8c 84       	ldd	r8, Y+12	; 0x0c
    232e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2330:	aa 84       	ldd	r10, Y+10	; 0x0a
    2332:	b9 84       	ldd	r11, Y+9	; 0x09
    2334:	c8 84       	ldd	r12, Y+8	; 0x08
    2336:	df 80       	ldd	r13, Y+7	; 0x07
    2338:	ee 80       	ldd	r14, Y+6	; 0x06
    233a:	fd 80       	ldd	r15, Y+5	; 0x05
    233c:	0c 81       	ldd	r16, Y+4	; 0x04
    233e:	1b 81       	ldd	r17, Y+3	; 0x03
    2340:	aa 81       	ldd	r26, Y+2	; 0x02
    2342:	b9 81       	ldd	r27, Y+1	; 0x01
    2344:	ce 0f       	add	r28, r30
    2346:	d1 1d       	adc	r29, r1
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	ed 01       	movw	r28, r26
    2354:	08 95       	ret

00002356 <atoi>:
    2356:	fc 01       	movw	r30, r24
    2358:	88 27       	eor	r24, r24
    235a:	99 27       	eor	r25, r25
    235c:	e8 94       	clt
    235e:	21 91       	ld	r18, Z+
    2360:	20 32       	cpi	r18, 0x20	; 32
    2362:	e9 f3       	breq	.-6      	; 0x235e <atoi+0x8>
    2364:	29 30       	cpi	r18, 0x09	; 9
    2366:	10 f0       	brcs	.+4      	; 0x236c <atoi+0x16>
    2368:	2e 30       	cpi	r18, 0x0E	; 14
    236a:	c8 f3       	brcs	.-14     	; 0x235e <atoi+0x8>
    236c:	2b 32       	cpi	r18, 0x2B	; 43
    236e:	39 f0       	breq	.+14     	; 0x237e <atoi+0x28>
    2370:	2d 32       	cpi	r18, 0x2D	; 45
    2372:	31 f4       	brne	.+12     	; 0x2380 <atoi+0x2a>
    2374:	68 94       	set
    2376:	03 c0       	rjmp	.+6      	; 0x237e <atoi+0x28>
    2378:	1f d1       	rcall	.+574    	; 0x25b8 <__mulhi_const_10>
    237a:	82 0f       	add	r24, r18
    237c:	91 1d       	adc	r25, r1
    237e:	21 91       	ld	r18, Z+
    2380:	20 53       	subi	r18, 0x30	; 48
    2382:	2a 30       	cpi	r18, 0x0A	; 10
    2384:	c8 f3       	brcs	.-14     	; 0x2378 <atoi+0x22>
    2386:	1e f4       	brtc	.+6      	; 0x238e <atoi+0x38>
    2388:	90 95       	com	r25
    238a:	81 95       	neg	r24
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	08 95       	ret

00002390 <__ftoa_engine>:
    2390:	28 30       	cpi	r18, 0x08	; 8
    2392:	08 f0       	brcs	.+2      	; 0x2396 <__ftoa_engine+0x6>
    2394:	27 e0       	ldi	r18, 0x07	; 7
    2396:	33 27       	eor	r19, r19
    2398:	da 01       	movw	r26, r20
    239a:	99 0f       	add	r25, r25
    239c:	31 1d       	adc	r19, r1
    239e:	87 fd       	sbrc	r24, 7
    23a0:	91 60       	ori	r25, 0x01	; 1
    23a2:	00 96       	adiw	r24, 0x00	; 0
    23a4:	61 05       	cpc	r22, r1
    23a6:	71 05       	cpc	r23, r1
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <__ftoa_engine+0x28>
    23aa:	32 60       	ori	r19, 0x02	; 2
    23ac:	2e 5f       	subi	r18, 0xFE	; 254
    23ae:	3d 93       	st	X+, r19
    23b0:	30 e3       	ldi	r19, 0x30	; 48
    23b2:	2a 95       	dec	r18
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <__ftoa_engine+0x1e>
    23b6:	08 95       	ret
    23b8:	9f 3f       	cpi	r25, 0xFF	; 255
    23ba:	30 f0       	brcs	.+12     	; 0x23c8 <__ftoa_engine+0x38>
    23bc:	80 38       	cpi	r24, 0x80	; 128
    23be:	71 05       	cpc	r23, r1
    23c0:	61 05       	cpc	r22, r1
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <__ftoa_engine+0x36>
    23c4:	3c 5f       	subi	r19, 0xFC	; 252
    23c6:	3c 5f       	subi	r19, 0xFC	; 252
    23c8:	3d 93       	st	X+, r19
    23ca:	91 30       	cpi	r25, 0x01	; 1
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <__ftoa_engine+0x40>
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	91 1d       	adc	r25, r1
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	1f 93       	push	r17
    23d8:	0f 93       	push	r16
    23da:	ff 92       	push	r15
    23dc:	ef 92       	push	r14
    23de:	19 2f       	mov	r17, r25
    23e0:	98 7f       	andi	r25, 0xF8	; 248
    23e2:	96 95       	lsr	r25
    23e4:	e9 2f       	mov	r30, r25
    23e6:	96 95       	lsr	r25
    23e8:	96 95       	lsr	r25
    23ea:	e9 0f       	add	r30, r25
    23ec:	ff 27       	eor	r31, r31
    23ee:	ed 56       	subi	r30, 0x6D	; 109
    23f0:	fd 4f       	sbci	r31, 0xFD	; 253
    23f2:	99 27       	eor	r25, r25
    23f4:	33 27       	eor	r19, r19
    23f6:	ee 24       	eor	r14, r14
    23f8:	ff 24       	eor	r15, r15
    23fa:	a7 01       	movw	r20, r14
    23fc:	e7 01       	movw	r28, r14
    23fe:	05 90       	lpm	r0, Z+
    2400:	08 94       	sec
    2402:	07 94       	ror	r0
    2404:	28 f4       	brcc	.+10     	; 0x2410 <__ftoa_engine+0x80>
    2406:	36 0f       	add	r19, r22
    2408:	e7 1e       	adc	r14, r23
    240a:	f8 1e       	adc	r15, r24
    240c:	49 1f       	adc	r20, r25
    240e:	51 1d       	adc	r21, r1
    2410:	66 0f       	add	r22, r22
    2412:	77 1f       	adc	r23, r23
    2414:	88 1f       	adc	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	06 94       	lsr	r0
    241a:	a1 f7       	brne	.-24     	; 0x2404 <__ftoa_engine+0x74>
    241c:	05 90       	lpm	r0, Z+
    241e:	07 94       	ror	r0
    2420:	28 f4       	brcc	.+10     	; 0x242c <__ftoa_engine+0x9c>
    2422:	e7 0e       	add	r14, r23
    2424:	f8 1e       	adc	r15, r24
    2426:	49 1f       	adc	r20, r25
    2428:	56 1f       	adc	r21, r22
    242a:	c1 1d       	adc	r28, r1
    242c:	77 0f       	add	r23, r23
    242e:	88 1f       	adc	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	66 1f       	adc	r22, r22
    2434:	06 94       	lsr	r0
    2436:	a1 f7       	brne	.-24     	; 0x2420 <__ftoa_engine+0x90>
    2438:	05 90       	lpm	r0, Z+
    243a:	07 94       	ror	r0
    243c:	28 f4       	brcc	.+10     	; 0x2448 <__ftoa_engine+0xb8>
    243e:	f8 0e       	add	r15, r24
    2440:	49 1f       	adc	r20, r25
    2442:	56 1f       	adc	r21, r22
    2444:	c7 1f       	adc	r28, r23
    2446:	d1 1d       	adc	r29, r1
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	66 1f       	adc	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	06 94       	lsr	r0
    2452:	a1 f7       	brne	.-24     	; 0x243c <__ftoa_engine+0xac>
    2454:	05 90       	lpm	r0, Z+
    2456:	07 94       	ror	r0
    2458:	20 f4       	brcc	.+8      	; 0x2462 <__ftoa_engine+0xd2>
    245a:	49 0f       	add	r20, r25
    245c:	56 1f       	adc	r21, r22
    245e:	c7 1f       	adc	r28, r23
    2460:	d8 1f       	adc	r29, r24
    2462:	99 0f       	add	r25, r25
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	06 94       	lsr	r0
    246c:	a9 f7       	brne	.-22     	; 0x2458 <__ftoa_engine+0xc8>
    246e:	84 91       	lpm	r24, Z
    2470:	10 95       	com	r17
    2472:	17 70       	andi	r17, 0x07	; 7
    2474:	41 f0       	breq	.+16     	; 0x2486 <__ftoa_engine+0xf6>
    2476:	d6 95       	lsr	r29
    2478:	c7 95       	ror	r28
    247a:	57 95       	ror	r21
    247c:	47 95       	ror	r20
    247e:	f7 94       	ror	r15
    2480:	e7 94       	ror	r14
    2482:	1a 95       	dec	r17
    2484:	c1 f7       	brne	.-16     	; 0x2476 <__ftoa_engine+0xe6>
    2486:	e9 e3       	ldi	r30, 0x39	; 57
    2488:	f2 e0       	ldi	r31, 0x02	; 2
    248a:	68 94       	set
    248c:	15 90       	lpm	r1, Z+
    248e:	15 91       	lpm	r17, Z+
    2490:	35 91       	lpm	r19, Z+
    2492:	65 91       	lpm	r22, Z+
    2494:	95 91       	lpm	r25, Z+
    2496:	05 90       	lpm	r0, Z+
    2498:	7f e2       	ldi	r23, 0x2F	; 47
    249a:	73 95       	inc	r23
    249c:	e1 18       	sub	r14, r1
    249e:	f1 0a       	sbc	r15, r17
    24a0:	43 0b       	sbc	r20, r19
    24a2:	56 0b       	sbc	r21, r22
    24a4:	c9 0b       	sbc	r28, r25
    24a6:	d0 09       	sbc	r29, r0
    24a8:	c0 f7       	brcc	.-16     	; 0x249a <__ftoa_engine+0x10a>
    24aa:	e1 0c       	add	r14, r1
    24ac:	f1 1e       	adc	r15, r17
    24ae:	43 1f       	adc	r20, r19
    24b0:	56 1f       	adc	r21, r22
    24b2:	c9 1f       	adc	r28, r25
    24b4:	d0 1d       	adc	r29, r0
    24b6:	7e f4       	brtc	.+30     	; 0x24d6 <__ftoa_engine+0x146>
    24b8:	70 33       	cpi	r23, 0x30	; 48
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <__ftoa_engine+0x130>
    24bc:	8a 95       	dec	r24
    24be:	e6 cf       	rjmp	.-52     	; 0x248c <__ftoa_engine+0xfc>
    24c0:	e8 94       	clt
    24c2:	01 50       	subi	r16, 0x01	; 1
    24c4:	30 f0       	brcs	.+12     	; 0x24d2 <__ftoa_engine+0x142>
    24c6:	08 0f       	add	r16, r24
    24c8:	0a f4       	brpl	.+2      	; 0x24cc <__ftoa_engine+0x13c>
    24ca:	00 27       	eor	r16, r16
    24cc:	02 17       	cp	r16, r18
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <__ftoa_engine+0x142>
    24d0:	20 2f       	mov	r18, r16
    24d2:	23 95       	inc	r18
    24d4:	02 2f       	mov	r16, r18
    24d6:	7a 33       	cpi	r23, 0x3A	; 58
    24d8:	28 f0       	brcs	.+10     	; 0x24e4 <__ftoa_engine+0x154>
    24da:	79 e3       	ldi	r23, 0x39	; 57
    24dc:	7d 93       	st	X+, r23
    24de:	2a 95       	dec	r18
    24e0:	e9 f7       	brne	.-6      	; 0x24dc <__ftoa_engine+0x14c>
    24e2:	10 c0       	rjmp	.+32     	; 0x2504 <__ftoa_engine+0x174>
    24e4:	7d 93       	st	X+, r23
    24e6:	2a 95       	dec	r18
    24e8:	89 f6       	brne	.-94     	; 0x248c <__ftoa_engine+0xfc>
    24ea:	06 94       	lsr	r0
    24ec:	97 95       	ror	r25
    24ee:	67 95       	ror	r22
    24f0:	37 95       	ror	r19
    24f2:	17 95       	ror	r17
    24f4:	17 94       	ror	r1
    24f6:	e1 18       	sub	r14, r1
    24f8:	f1 0a       	sbc	r15, r17
    24fa:	43 0b       	sbc	r20, r19
    24fc:	56 0b       	sbc	r21, r22
    24fe:	c9 0b       	sbc	r28, r25
    2500:	d0 09       	sbc	r29, r0
    2502:	98 f0       	brcs	.+38     	; 0x252a <__ftoa_engine+0x19a>
    2504:	23 95       	inc	r18
    2506:	7e 91       	ld	r23, -X
    2508:	73 95       	inc	r23
    250a:	7a 33       	cpi	r23, 0x3A	; 58
    250c:	08 f0       	brcs	.+2      	; 0x2510 <__ftoa_engine+0x180>
    250e:	70 e3       	ldi	r23, 0x30	; 48
    2510:	7c 93       	st	X, r23
    2512:	20 13       	cpse	r18, r16
    2514:	b8 f7       	brcc	.-18     	; 0x2504 <__ftoa_engine+0x174>
    2516:	7e 91       	ld	r23, -X
    2518:	70 61       	ori	r23, 0x10	; 16
    251a:	7d 93       	st	X+, r23
    251c:	30 f0       	brcs	.+12     	; 0x252a <__ftoa_engine+0x19a>
    251e:	83 95       	inc	r24
    2520:	71 e3       	ldi	r23, 0x31	; 49
    2522:	7d 93       	st	X+, r23
    2524:	70 e3       	ldi	r23, 0x30	; 48
    2526:	2a 95       	dec	r18
    2528:	e1 f7       	brne	.-8      	; 0x2522 <__ftoa_engine+0x192>
    252a:	11 24       	eor	r1, r1
    252c:	ef 90       	pop	r14
    252e:	ff 90       	pop	r15
    2530:	0f 91       	pop	r16
    2532:	1f 91       	pop	r17
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	99 27       	eor	r25, r25
    253a:	87 fd       	sbrc	r24, 7
    253c:	90 95       	com	r25
    253e:	08 95       	ret

00002540 <strcmp_P>:
    2540:	fb 01       	movw	r30, r22
    2542:	dc 01       	movw	r26, r24
    2544:	8d 91       	ld	r24, X+
    2546:	05 90       	lpm	r0, Z+
    2548:	80 19       	sub	r24, r0
    254a:	01 10       	cpse	r0, r1
    254c:	d9 f3       	breq	.-10     	; 0x2544 <strcmp_P+0x4>
    254e:	99 0b       	sbc	r25, r25
    2550:	08 95       	ret

00002552 <strncmp_P>:
    2552:	fb 01       	movw	r30, r22
    2554:	dc 01       	movw	r26, r24
    2556:	41 50       	subi	r20, 0x01	; 1
    2558:	50 40       	sbci	r21, 0x00	; 0
    255a:	30 f0       	brcs	.+12     	; 0x2568 <strncmp_P+0x16>
    255c:	8d 91       	ld	r24, X+
    255e:	05 90       	lpm	r0, Z+
    2560:	80 19       	sub	r24, r0
    2562:	19 f4       	brne	.+6      	; 0x256a <strncmp_P+0x18>
    2564:	00 20       	and	r0, r0
    2566:	b9 f7       	brne	.-18     	; 0x2556 <strncmp_P+0x4>
    2568:	88 1b       	sub	r24, r24
    256a:	99 0b       	sbc	r25, r25
    256c:	08 95       	ret

0000256e <strnlen_P>:
    256e:	fc 01       	movw	r30, r24
    2570:	05 90       	lpm	r0, Z+
    2572:	61 50       	subi	r22, 0x01	; 1
    2574:	70 40       	sbci	r23, 0x00	; 0
    2576:	01 10       	cpse	r0, r1
    2578:	d8 f7       	brcc	.-10     	; 0x2570 <strnlen_P+0x2>
    257a:	80 95       	com	r24
    257c:	90 95       	com	r25
    257e:	8e 0f       	add	r24, r30
    2580:	9f 1f       	adc	r25, r31
    2582:	08 95       	ret

00002584 <strncpy>:
    2584:	fb 01       	movw	r30, r22
    2586:	dc 01       	movw	r26, r24
    2588:	41 50       	subi	r20, 0x01	; 1
    258a:	50 40       	sbci	r21, 0x00	; 0
    258c:	48 f0       	brcs	.+18     	; 0x25a0 <strncpy+0x1c>
    258e:	01 90       	ld	r0, Z+
    2590:	0d 92       	st	X+, r0
    2592:	00 20       	and	r0, r0
    2594:	c9 f7       	brne	.-14     	; 0x2588 <strncpy+0x4>
    2596:	01 c0       	rjmp	.+2      	; 0x259a <strncpy+0x16>
    2598:	1d 92       	st	X+, r1
    259a:	41 50       	subi	r20, 0x01	; 1
    259c:	50 40       	sbci	r21, 0x00	; 0
    259e:	e0 f7       	brcc	.-8      	; 0x2598 <strncpy+0x14>
    25a0:	08 95       	ret

000025a2 <strnlen>:
    25a2:	fc 01       	movw	r30, r24
    25a4:	61 50       	subi	r22, 0x01	; 1
    25a6:	70 40       	sbci	r23, 0x00	; 0
    25a8:	01 90       	ld	r0, Z+
    25aa:	01 10       	cpse	r0, r1
    25ac:	d8 f7       	brcc	.-10     	; 0x25a4 <strnlen+0x2>
    25ae:	80 95       	com	r24
    25b0:	90 95       	com	r25
    25b2:	8e 0f       	add	r24, r30
    25b4:	9f 1f       	adc	r25, r31
    25b6:	08 95       	ret

000025b8 <__mulhi_const_10>:
    25b8:	bc 01       	movw	r22, r24
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	86 0f       	add	r24, r22
    25c4:	97 1f       	adc	r25, r23
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	08 95       	ret

000025cc <fprintf>:
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	eb ee       	ldi	r30, 0xEB	; 235
    25d2:	f2 e1       	ldi	r31, 0x12	; 18
    25d4:	99 ce       	rjmp	.-718    	; 0x2308 <__prologue_saves__+0x20>
    25d6:	ae 01       	movw	r20, r28
    25d8:	47 5f       	subi	r20, 0xF7	; 247
    25da:	5f 4f       	sbci	r21, 0xFF	; 255
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	1c db       	rcall	.-2504   	; 0x1c1e <vfprintf>
    25e6:	e2 e0       	ldi	r30, 0x02	; 2
    25e8:	ab ce       	rjmp	.-682    	; 0x2340 <__epilogue_restores__+0x20>

000025ea <fputc>:
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	18 2f       	mov	r17, r24
    25f4:	09 2f       	mov	r16, r25
    25f6:	eb 01       	movw	r28, r22
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	81 fd       	sbrc	r24, 1
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <fputc+0x1a>
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
    2600:	9f ef       	ldi	r25, 0xFF	; 255
    2602:	20 c0       	rjmp	.+64     	; 0x2644 <fputc+0x5a>
    2604:	82 ff       	sbrs	r24, 2
    2606:	10 c0       	rjmp	.+32     	; 0x2628 <fputc+0x3e>
    2608:	4e 81       	ldd	r20, Y+6	; 0x06
    260a:	5f 81       	ldd	r21, Y+7	; 0x07
    260c:	2c 81       	ldd	r18, Y+4	; 0x04
    260e:	3d 81       	ldd	r19, Y+5	; 0x05
    2610:	42 17       	cp	r20, r18
    2612:	53 07       	cpc	r21, r19
    2614:	7c f4       	brge	.+30     	; 0x2634 <fputc+0x4a>
    2616:	e8 81       	ld	r30, Y
    2618:	f9 81       	ldd	r31, Y+1	; 0x01
    261a:	9f 01       	movw	r18, r30
    261c:	2f 5f       	subi	r18, 0xFF	; 255
    261e:	3f 4f       	sbci	r19, 0xFF	; 255
    2620:	39 83       	std	Y+1, r19	; 0x01
    2622:	28 83       	st	Y, r18
    2624:	10 83       	st	Z, r17
    2626:	06 c0       	rjmp	.+12     	; 0x2634 <fputc+0x4a>
    2628:	e8 85       	ldd	r30, Y+8	; 0x08
    262a:	f9 85       	ldd	r31, Y+9	; 0x09
    262c:	81 2f       	mov	r24, r17
    262e:	09 95       	icall
    2630:	89 2b       	or	r24, r25
    2632:	29 f7       	brne	.-54     	; 0x25fe <fputc+0x14>
    2634:	2e 81       	ldd	r18, Y+6	; 0x06
    2636:	3f 81       	ldd	r19, Y+7	; 0x07
    2638:	2f 5f       	subi	r18, 0xFF	; 255
    263a:	3f 4f       	sbci	r19, 0xFF	; 255
    263c:	3f 83       	std	Y+7, r19	; 0x07
    263e:	2e 83       	std	Y+6, r18	; 0x06
    2640:	81 2f       	mov	r24, r17
    2642:	90 2f       	mov	r25, r16
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <__ultoa_invert>:
    264e:	fa 01       	movw	r30, r20
    2650:	aa 27       	eor	r26, r26
    2652:	28 30       	cpi	r18, 0x08	; 8
    2654:	61 f1       	breq	.+88     	; 0x26ae <__ultoa_invert+0x60>
    2656:	20 31       	cpi	r18, 0x10	; 16
    2658:	91 f1       	breq	.+100    	; 0x26be <__ultoa_invert+0x70>
    265a:	e8 94       	clt
    265c:	6f 93       	push	r22
    265e:	6e 7f       	andi	r22, 0xFE	; 254
    2660:	6e 5f       	subi	r22, 0xFE	; 254
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	8f 4f       	sbci	r24, 0xFF	; 255
    2666:	9f 4f       	sbci	r25, 0xFF	; 255
    2668:	af 4f       	sbci	r26, 0xFF	; 255
    266a:	b1 e0       	ldi	r27, 0x01	; 1
    266c:	40 d0       	rcall	.+128    	; 0x26ee <__ultoa_invert+0xa0>
    266e:	b4 e0       	ldi	r27, 0x04	; 4
    2670:	3e d0       	rcall	.+124    	; 0x26ee <__ultoa_invert+0xa0>
    2672:	67 0f       	add	r22, r23
    2674:	78 1f       	adc	r23, r24
    2676:	89 1f       	adc	r24, r25
    2678:	9a 1f       	adc	r25, r26
    267a:	a1 1d       	adc	r26, r1
    267c:	68 0f       	add	r22, r24
    267e:	79 1f       	adc	r23, r25
    2680:	8a 1f       	adc	r24, r26
    2682:	91 1d       	adc	r25, r1
    2684:	a1 1d       	adc	r26, r1
    2686:	6a 0f       	add	r22, r26
    2688:	71 1d       	adc	r23, r1
    268a:	81 1d       	adc	r24, r1
    268c:	91 1d       	adc	r25, r1
    268e:	a1 1d       	adc	r26, r1
    2690:	22 d0       	rcall	.+68     	; 0x26d6 <__ultoa_invert+0x88>
    2692:	09 f4       	brne	.+2      	; 0x2696 <__ultoa_invert+0x48>
    2694:	68 94       	set
    2696:	3f 91       	pop	r19
    2698:	06 2e       	mov	r0, r22
    269a:	00 0c       	add	r0, r0
    269c:	30 19       	sub	r19, r0
    269e:	00 0c       	add	r0, r0
    26a0:	00 0c       	add	r0, r0
    26a2:	30 19       	sub	r19, r0
    26a4:	30 5d       	subi	r19, 0xD0	; 208
    26a6:	31 93       	st	Z+, r19
    26a8:	ce f6       	brtc	.-78     	; 0x265c <__ultoa_invert+0xe>
    26aa:	cf 01       	movw	r24, r30
    26ac:	08 95       	ret
    26ae:	46 2f       	mov	r20, r22
    26b0:	47 70       	andi	r20, 0x07	; 7
    26b2:	40 5d       	subi	r20, 0xD0	; 208
    26b4:	41 93       	st	Z+, r20
    26b6:	b3 e0       	ldi	r27, 0x03	; 3
    26b8:	0f d0       	rcall	.+30     	; 0x26d8 <__ultoa_invert+0x8a>
    26ba:	c9 f7       	brne	.-14     	; 0x26ae <__ultoa_invert+0x60>
    26bc:	f6 cf       	rjmp	.-20     	; 0x26aa <__ultoa_invert+0x5c>
    26be:	46 2f       	mov	r20, r22
    26c0:	4f 70       	andi	r20, 0x0F	; 15
    26c2:	40 5d       	subi	r20, 0xD0	; 208
    26c4:	4a 33       	cpi	r20, 0x3A	; 58
    26c6:	18 f0       	brcs	.+6      	; 0x26ce <__ultoa_invert+0x80>
    26c8:	49 5d       	subi	r20, 0xD9	; 217
    26ca:	31 fd       	sbrc	r19, 1
    26cc:	40 52       	subi	r20, 0x20	; 32
    26ce:	41 93       	st	Z+, r20
    26d0:	02 d0       	rcall	.+4      	; 0x26d6 <__ultoa_invert+0x88>
    26d2:	a9 f7       	brne	.-22     	; 0x26be <__ultoa_invert+0x70>
    26d4:	ea cf       	rjmp	.-44     	; 0x26aa <__ultoa_invert+0x5c>
    26d6:	b4 e0       	ldi	r27, 0x04	; 4
    26d8:	a6 95       	lsr	r26
    26da:	97 95       	ror	r25
    26dc:	87 95       	ror	r24
    26de:	77 95       	ror	r23
    26e0:	67 95       	ror	r22
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__ultoa_invert+0x8a>
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	61 05       	cpc	r22, r1
    26ea:	71 05       	cpc	r23, r1
    26ec:	08 95       	ret
    26ee:	9b 01       	movw	r18, r22
    26f0:	ac 01       	movw	r20, r24
    26f2:	0a 2e       	mov	r0, r26
    26f4:	06 94       	lsr	r0
    26f6:	57 95       	ror	r21
    26f8:	47 95       	ror	r20
    26fa:	37 95       	ror	r19
    26fc:	27 95       	ror	r18
    26fe:	ba 95       	dec	r27
    2700:	c9 f7       	brne	.-14     	; 0x26f4 <__ultoa_invert+0xa6>
    2702:	62 0f       	add	r22, r18
    2704:	73 1f       	adc	r23, r19
    2706:	84 1f       	adc	r24, r20
    2708:	95 1f       	adc	r25, r21
    270a:	a0 1d       	adc	r26, r0
    270c:	08 95       	ret

0000270e <__eerd_block_m16u2>:
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22

00002712 <__eerd_blraw_m16u2>:
    2712:	fc 01       	movw	r30, r24
    2714:	f9 99       	sbic	0x1f, 1	; 31
    2716:	fe cf       	rjmp	.-4      	; 0x2714 <__eerd_blraw_m16u2+0x2>
    2718:	06 c0       	rjmp	.+12     	; 0x2726 <__eerd_blraw_m16u2+0x14>
    271a:	f2 bd       	out	0x22, r31	; 34
    271c:	e1 bd       	out	0x21, r30	; 33
    271e:	f8 9a       	sbi	0x1f, 0	; 31
    2720:	31 96       	adiw	r30, 0x01	; 1
    2722:	00 b4       	in	r0, 0x20	; 32
    2724:	0d 92       	st	X+, r0
    2726:	41 50       	subi	r20, 0x01	; 1
    2728:	50 40       	sbci	r21, 0x00	; 0
    272a:	b8 f7       	brcc	.-18     	; 0x271a <__eerd_blraw_m16u2+0x8>
    272c:	08 95       	ret

0000272e <__eerd_byte_m16u2>:
    272e:	f9 99       	sbic	0x1f, 1	; 31
    2730:	fe cf       	rjmp	.-4      	; 0x272e <__eerd_byte_m16u2>
    2732:	92 bd       	out	0x22, r25	; 34
    2734:	81 bd       	out	0x21, r24	; 33
    2736:	f8 9a       	sbi	0x1f, 0	; 31
    2738:	99 27       	eor	r25, r25
    273a:	80 b5       	in	r24, 0x20	; 32
    273c:	08 95       	ret

0000273e <__eerd_dword_m16u2>:
    273e:	a6 e1       	ldi	r26, 0x16	; 22
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	44 e0       	ldi	r20, 0x04	; 4
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	e5 cf       	rjmp	.-54     	; 0x2712 <__eerd_blraw_m16u2>

00002748 <__eeupd_byte_m16u2>:
    2748:	26 2f       	mov	r18, r22

0000274a <__eeupd_r18_m16u2>:
    274a:	f9 99       	sbic	0x1f, 1	; 31
    274c:	fe cf       	rjmp	.-4      	; 0x274a <__eeupd_r18_m16u2>
    274e:	92 bd       	out	0x22, r25	; 34
    2750:	81 bd       	out	0x21, r24	; 33
    2752:	f8 9a       	sbi	0x1f, 0	; 31
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	00 b4       	in	r0, 0x20	; 32
    2758:	02 16       	cp	r0, r18
    275a:	39 f0       	breq	.+14     	; 0x276a <__eeupd_r18_m16u2+0x20>
    275c:	1f ba       	out	0x1f, r1	; 31
    275e:	20 bd       	out	0x20, r18	; 32
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	fa 9a       	sbi	0x1f, 2	; 31
    2766:	f9 9a       	sbi	0x1f, 1	; 31
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	08 95       	ret

0000276c <_exit>:
    276c:	f8 94       	cli

0000276e <__stop_program>:
    276e:	ff cf       	rjmp	.-2      	; 0x276e <__stop_program>
